android10-security-release/wifi/java/android/net/wifi/WifiManager.java:1608:     * without the permission will trigger a {@link java.lang.SecurityException}.
android10-security-release/wifi/java/android/net/wifi/WifiManager.java:1639:     * without the permission will trigger a {@link java.lang.SecurityException}.
android10-security-release/wifi/java/android/net/wifi/WifiManager.java:1680:     * @throws {@link SecurityException} if the caller is missing required permissions.
android10-security-release/wifi/java/android/net/wifi/WifiManager.java:2443:     * @throws  {@link java.lang.SecurityException} if the caller is missing required permissions.
android10-security-release/wifi/java/android/net/wifi/WifiManager.java:2631:     * the permissions will trigger a {@link java.lang.SecurityException}.
android10-security-release/wifi/java/android/net/wifi/WifiManager.java:2715:     * {@link java.lang.SecurityException}.
android10-security-release/wifi/java/android/net/wifi/WifiManager.java:3146:     * without the permission will trigger a {@link java.lang.SecurityException}.
android10-security-release/wifi/java/android/net/wifi/WifiManager.java:4496:     * without the permission will trigger a {@link java.lang.SecurityException}.
android10-security-release/wifi/java/android/net/wifi/aware/WifiAwareNetworkSpecifier.java:296:            throw new SecurityException("mismatched UIDs");
android10-security-release/wifi/java/android/net/wifi/aware/WifiAwareAgentNetworkSpecifier.java:148:        throw new SecurityException(
android10-security-release/wifi/java/android/net/wifi/WifiNetworkSpecifier.java:606:            throw new SecurityException("mismatched UIDs");
android10-security-release/wifi/java/android/net/wifi/RttManager.java:1014:        } catch (SecurityException e) {
android10-security-release/wifi/java/android/net/wifi/hotspot2/ConfigParser.java:30:import java.security.GeneralSecurityException;
android10-security-release/wifi/java/android/net/wifi/hotspot2/ConfigParser.java:203:            } catch(GeneralSecurityException | IOException e) {
android10-security-release/wifi/java/android/net/wifi/hotspot2/ConfigParser.java:449:            throws GeneralSecurityException, IOException {
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:362:     * Verify a SecurityException is thrown for callers without proper permissions for
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:365:    @Test(expected = SecurityException.class)
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:366:    public void testStartLocalOnlyHotspotThrowsSecurityException() throws Exception {
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:368:        doThrow(new SecurityException()).when(mWifiService)
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:551:     * Verify a SecurityException resulting from an application without necessary permissions will
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:554:    @Test(expected = SecurityException.class)
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:555:    public void testLocalOnlyHotspotCallbackFullOnSecurityException() throws Exception {
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:557:        doThrow(new SecurityException()).when(mWifiService)
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:561:        } catch (SecurityException e) {
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:659:     * Verify a SecurityException is thrown for callers without proper permissions for
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:662:    @Test(expected = SecurityException.class)
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:663:    public void testStartWatchLocalOnlyHotspotThrowsSecurityException() throws Exception {
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:665:        doThrow(new SecurityException()).when(mWifiService)
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:986:    @Test(expected = SecurityException.class)
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:987:    public void testSetWifiCountryCodeFailedOnSecurityException() throws Exception {
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:988:        doThrow(new SecurityException()).when(mWifiService).setCountryCode(anyString());
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:1102:        doThrow(new SecurityException()).when(mWifiService).setWifiApConfiguration(any(), any());
android10-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:1107:        } catch (SecurityException e) { }
android10-security-release/wifi/tests/src/android/net/wifi/aware/WifiAwareAgentNetworkSpecifierTest.java:169:    @Test(expected = SecurityException.class)
android10-security-release/tools/apilint/apilint.py:323:    JAVA_LANG_TYPES = set("AbstractMethodError AbstractStringBuilder Appendable ArithmeticException ArrayIndexOutOfBoundsException ArrayStoreException AssertionError AutoCloseable Boolean BootstrapMethodError Byte Character CharSequence Class ClassCastException ClassCircularityError ClassFormatError ClassLoader ClassNotFoundException Cloneable CloneNotSupportedException Comparable Compiler Deprecated Double Enum EnumConstantNotPresentException Error Exception ExceptionInInitializerError Float FunctionalInterface IllegalAccessError IllegalAccessException IllegalArgumentException IllegalMonitorStateException IllegalStateException IllegalThreadStateException IncompatibleClassChangeError IndexOutOfBoundsException InheritableThreadLocal InstantiationError InstantiationException Integer InternalError InterruptedException Iterable LinkageError Long Math NegativeArraySizeException NoClassDefFoundError NoSuchFieldError NoSuchFieldException NoSuchMethodError NoSuchMethodException NullPointerException Number NumberFormatException Object OutOfMemoryError Override Package package-info.java Process ProcessBuilder ProcessEnvironment ProcessImpl Readable ReflectiveOperationException Runnable Runtime RuntimeException RuntimePermission SafeVarargs SecurityException SecurityManager Short StackOverflowError StackTraceElement StrictMath String StringBuffer StringBuilder StringIndexOutOfBoundsException SuppressWarnings System Thread ThreadDeath ThreadGroup ThreadLocal Throwable TypeNotPresentException UNIXProcess UnknownError UnsatisfiedLinkError UnsupportedClassVersionError UnsupportedOperationException VerifyError VirtualMachineError Void".split())
android10-security-release/tools/apilint/apilint.py:1639:        "java.lang.SecurityException",
android10-security-release/tools/powermodel/src/com/android/powermodel/RawBatteryStats.java:784:                    | ExceptionInInitializerError | SecurityException ex) {
Binary file android10-security-release/tools/aapt2/integration-tests/CommandTests/android-28.jar matches
Binary file android10-security-release/tools/preload/20100223.compiled matches
Binary file android10-security-release/tools/preload/20080522.compiled matches
Binary file android10-security-release/tools/preload/20090811.compiled matches
android10-security-release/test-base/src/android/test/InstrumentationTestCase.java:281:                    } catch (SecurityException e) {
android10-security-release/test-base/src/android/test/InstrumentationTestCase.java:312:            } catch (SecurityException e) {
android10-security-release/test-base/src/android/test/InstrumentationTestCase.java:344:                } catch (SecurityException e) {
android10-security-release/test-base/src/android/test/AndroidTestCase.java:89:     * attempting to start the activity and validating that a {@link SecurityException}
android10-security-release/test-base/src/android/test/AndroidTestCase.java:108:        } catch (SecurityException expected) {
android10-security-release/test-base/src/android/test/AndroidTestCase.java:118:     * uri and ensuring a {@link SecurityException} is thrown mentioning the particular permission.
android10-security-release/test-base/src/android/test/AndroidTestCase.java:126:            fail("expected SecurityException requiring " + permission);
android10-security-release/test-base/src/android/test/AndroidTestCase.java:127:        } catch (SecurityException expected) {
android10-security-release/test-base/src/android/test/AndroidTestCase.java:136:     * the uri and ensuring a {@link SecurityException} is thrown mentioning the particular
android10-security-release/test-base/src/android/test/AndroidTestCase.java:145:            fail("expected SecurityException requiring " + permission);
android10-security-release/test-base/src/android/test/AndroidTestCase.java:146:        } catch (SecurityException expected) {
android10-security-release/core/jni/android_os_HwParcel.cpp:99:            jniThrowException(env, "java/lang/SecurityException", NULL);
android10-security-release/core/jni/android_os_HwParcel.cpp:309:                    "java/lang/SecurityException",
android10-security-release/core/jni/android/graphics/pdf/PdfUtils.cpp:56:            jniThrowException(env, "java/lang/SecurityException",
android10-security-release/core/jni/android/graphics/pdf/PdfUtils.cpp:60:            jniThrowException(env, "java/lang/SecurityException", "unsupported security scheme");
android10-security-release/core/jni/android_util_Binder.cpp:767:            jniThrowException(env, "java/lang/SecurityException", NULL);
android10-security-release/core/jni/android_util_Process.cpp:81:            jniThrowExceptionFmt(env, "java/lang/SecurityException",
android10-security-release/core/jni/android_util_Process.cpp:93:            jniThrowExceptionFmt(env, "java/lang/SecurityException",
android10-security-release/core/jni/android_util_Process.cpp:106:            jniThrowExceptionFmt(env, "java/lang/SecurityException",
android10-security-release/core/jni/android_util_Process.cpp:517:                jniThrowException(env, "java/lang/SecurityException", "May not put this thread into background");
android10-security-release/core/jni/android_os_Parcel.cpp:650:    jniThrowException(env, "java/lang/SecurityException",
android10-security-release/core/java/android/view/ViewRootImpl.java:8432:                        throw new SecurityException("Insufficient permissions to invoke"
android10-security-release/core/java/android/view/autofill/AutofillManager.java:1953:                throw new SecurityException("caller is not user's Augmented Autofill Service");
android10-security-release/core/java/android/view/inputmethod/InputConnectionWrapper.java:55:     * @throws SecurityException when this wrapper has non-null target and is immutable.
android10-security-release/core/java/android/view/inputmethod/InputConnectionWrapper.java:59:            throw new SecurityException("not mutable");
android10-security-release/core/java/android/view/contentcapture/ContentCaptureManager.java:426:                throw new SecurityException(resultReceiver.getStringResult());
android10-security-release/core/java/android/view/contentcapture/ContentCaptureManager.java:533:     * @throws SecurityException if caller is not the app that owns the content capture service
android10-security-release/core/java/android/view/contentcapture/ContentCaptureManager.java:573:     * @throws SecurityException if caller is not allowed to execute the method.
android10-security-release/core/java/android/view/contentcapture/ContentCaptureManager.java:582:                throw new SecurityException(resultReceiver.getStringResult());
android10-security-release/core/java/android/se/omapi/Session.java:190:     * @throws SecurityException if the calling application cannot be granted
android10-security-release/core/java/android/se/omapi/Session.java:240:     * @throws SecurityException if the calling application cannot be granted
android10-security-release/core/java/android/se/omapi/Session.java:294:     * @throws SecurityException if the calling application cannot be granted
android10-security-release/core/java/android/se/omapi/Session.java:347:     * @throws SecurityException if the calling application cannot be granted
android10-security-release/core/java/android/se/omapi/Channel.java:159:     * @throws SecurityException if the command is filtered by the security policy.
android10-security-release/core/java/android/security/keystore/recovery/LockScreenRequiredException.java:21:import java.security.GeneralSecurityException;
android10-security-release/core/java/android/security/keystore/recovery/LockScreenRequiredException.java:31:public class LockScreenRequiredException extends GeneralSecurityException {
android10-security-release/core/java/android/security/keystore/recovery/InternalRecoveryServiceException.java:21:import java.security.GeneralSecurityException;
android10-security-release/core/java/android/security/keystore/recovery/InternalRecoveryServiceException.java:32:public class InternalRecoveryServiceException extends GeneralSecurityException {
android10-security-release/core/java/android/security/keystore/recovery/SessionExpiredException.java:21:import java.security.GeneralSecurityException;
android10-security-release/core/java/android/security/keystore/recovery/SessionExpiredException.java:29:public class SessionExpiredException extends GeneralSecurityException {
android10-security-release/core/java/android/security/keystore/recovery/DecryptionFailedException.java:21:import java.security.GeneralSecurityException;
android10-security-release/core/java/android/security/keystore/recovery/DecryptionFailedException.java:30:public class DecryptionFailedException extends GeneralSecurityException {
android10-security-release/core/java/android/security/net/config/NetworkSecurityTrustManager.java:26:import java.security.GeneralSecurityException;
android10-security-release/core/java/android/security/net/config/NetworkSecurityTrustManager.java:61:        } catch (GeneralSecurityException | IOException e) {
android10-security-release/core/java/android/security/net/config/NetworkSecurityTrustManager.java:136:                    } catch (GeneralSecurityException e) {
android10-security-release/core/java/android/bluetooth/BluetoothProfileConnector.java:95:                } catch (SecurityException se) {
android10-security-release/core/java/android/bluetooth/BluetoothPbap.java:161:            } catch (SecurityException se) {
android10-security-release/core/java/android/accounts/AbstractAccountAuthenticator.java:517:            throw new SecurityException("caller uid " + uid + " lacks " + perm);
android10-security-release/core/java/android/widget/TextView.java:11250:                throw new SecurityException("INTERACT_ACROSS_USERS_FULL is required."
android10-security-release/core/java/android/provider/SearchIndexablesProvider.java:102:            throw new SecurityException("Provider must be exported");
android10-security-release/core/java/android/provider/SearchIndexablesProvider.java:105:            throw new SecurityException("Provider must grantUriPermissions");
android10-security-release/core/java/android/provider/SearchIndexablesProvider.java:108:            throw new SecurityException("Provider must be protected by READ_SEARCH_INDEXABLES");
android10-security-release/core/java/android/provider/DocumentsProvider.java:170:            throw new SecurityException("Provider must be exported");
android10-security-release/core/java/android/provider/DocumentsProvider.java:173:            throw new SecurityException("Provider must grantUriPermissions");
android10-security-release/core/java/android/provider/DocumentsProvider.java:177:            throw new SecurityException("Provider must be protected by MANAGE_DOCUMENTS");
android10-security-release/core/java/android/provider/DocumentsProvider.java:229:                throw new SecurityException(
android10-security-release/core/java/android/provider/DocumentsProvider.java:1097:            throw new SecurityException(
android10-security-release/core/java/android/provider/BlockedNumberContract.java:144: * {@code false}, all operations on the provider will fail with a {@link SecurityException}. The
android10-security-release/core/java/android/provider/BlockedNumberContract.java:322:     * context {@code context}, this method will throw a {@link SecurityException}.
android10-security-release/core/java/android/provider/BlockedNumberContract.java:356:     * context {@code context}, this method will throw a {@link SecurityException}.
android10-security-release/core/java/android/provider/ContactsContract.java:226:     * {@link SecurityException} will be thrown. Unlike {@link Context#grantUriPermission},
android10-security-release/core/java/android/provider/DeviceConfig.java:737:        } catch (SecurityException e) {
android10-security-release/core/java/android/provider/DeviceConfig.java:784:                throw new SecurityException("Permission denial: reading from settings requires:"
android10-security-release/core/java/android/provider/Settings.java:5279:                        throw new SecurityException("Settings.Secure." + name
android10-security-release/core/java/android/provider/Settings.java:6228:         *             {@link VERSION_CODES#M} or later throws a {@code SecurityException}.
android10-security-release/core/java/android/provider/Settings.java:6237:         *             {@link VERSION_CODES#M} or later throws a {@code SecurityException}.
android10-security-release/core/java/android/provider/Settings.java:6250:         *             {@link VERSION_CODES#M} or later throws a {@code SecurityException}.
android10-security-release/core/java/android/provider/Settings.java:15359:        // prepare string to throw SecurityException
android10-security-release/core/java/android/provider/Settings.java:15373:        throw new SecurityException(exceptionMessage.toString());
android10-security-release/core/java/android/provider/MediaStore.java:404:     * java.lang.SecurityException}.
android10-security-release/core/java/android/provider/MediaStore.java:458:     * java.lang.SecurityException}.
android10-security-release/core/java/android/webkit/WebSettings.java:940:     * a value of {@code false} will cause a {@link java.lang.SecurityException}
android10-security-release/core/java/android/app/Instrumentation.java:2054:                throw new SecurityException("Not allowed to start activity "
android10-security-release/core/java/android/app/Instrumentation.java:2063:                throw new SecurityException(
android10-security-release/core/java/android/app/NotificationManager.java:917:     * Throws a SecurityException if policy access is granted to this package.
android10-security-release/core/java/android/app/NotificationManager.java:941:     * Throws a SecurityException if policy access is granted to this package.
android10-security-release/core/java/android/app/NotificationManager.java:961:     * Throws a SecurityException if policy access is granted to this package.
android10-security-release/core/java/android/app/NotificationManager.java:980:     * Throws a SecurityException if policy access is granted to this package.
android10-security-release/core/java/android/app/NotificationManager.java:1022:     * Throws a SecurityException if policy access is granted to this package.
android10-security-release/core/java/android/app/ActivityThread.java:2212:                    throw new SecurityException(
android10-security-release/core/java/android/app/ActivityThread.java:2249:                throw new SecurityException(msg);
android10-security-release/core/java/android/app/ActivityThread.java:7214:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/ActivityThread.java:7231:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/StatsManager.java:119:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/StatsManager.java:155:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/StatsManager.java:224:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/StatsManager.java:278:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/StatsManager.java:318:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/StatsManager.java:356:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/StatsManager.java:393:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/StatsManager.java:469:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/ActivityManager.java:1584:            throws SecurityException {
android10-security-release/core/java/android/app/ActivityManager.java:1675:     * @throws SecurityException
android10-security-release/core/java/android/app/ActivityManager.java:1812:            throws SecurityException {
android10-security-release/core/java/android/app/ActivityManager.java:2073:     * system, in which case an activity start may throw a {@link SecurityException}. Call this
android10-security-release/core/java/android/app/ActivityManager.java:2085:     * provided context and no {@link SecurityException} will be thrown, {@code false} otherwise.
android10-security-release/core/java/android/app/ActivityManager.java:2280:            throws SecurityException {
android10-security-release/core/java/android/app/ActivityManager.java:2295:            throws SecurityException {
android10-security-release/core/java/android/app/ActivityManager.java:3343:     * @throws SecurityException If the caller does not hold
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:131: * owns. Otherwise, a {@link SecurityException} will be thrown.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:2429:     * @throws SecurityException if the caller is not in the owner application of {@code admin}.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:2450:     * @throws SecurityException if {@code admin} is not an active administrator.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:2616:     * @throws SecurityException if {@code admin} is not an active administrator or if {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:2687:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:2756:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:2832:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:2908:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:2983:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3058:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3132:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3208:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3250:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3413:     * @throws SecurityException if the calling application isn't an active admin that uses
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3437:     * @throws SecurityException if the calling application does not have the permission
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3463:     * @throws SecurityException if {@code admin} is not a profile owner of a managed profile.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3485:     * @throws SecurityException if {@code userHandle} is not a managed profile.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3514:     * @throws SecurityException if the calling application does not own an active administrator
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3583:     * @throws SecurityException if {@code admin} is not an active administrator or does not use
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3678:     * throw {@link SecurityException}. Please use the new API {@link #resetPasswordWithToken}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3711:     * @throws SecurityException if the calling application does not own an active administrator
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3758:     * @throws SecurityException if admin is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3783:     * @throws SecurityException if admin is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3806:     * @throws SecurityException if admin is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3850:     * @throws SecurityException if admin is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3882:     * @throws SecurityException if {@code admin} is not an active administrator or it does not use
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3939:     * a {@link SecurityException} will be thrown.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:3960:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4041:     * @throws SecurityException if the calling application does not own an active administrator
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4059:     * @throws SecurityException if the calling application does not own an active administrator
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4091:     * other admins a {@link SecurityException} will be thrown.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4117:     * @throws SecurityException if the calling application does not own an active administrator
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4142:     * @throws SecurityException if the calling application does not own an active administrator
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4260:     * @throws SecurityException if {@code admin} is not the device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4474:     * @throws SecurityException if {@code admin} is not an active administrator or does not use
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4603:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4630:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4657:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4687:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4708:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4749:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4785:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4829:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4870:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:4919:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5014:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5068:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5075:            installerPackage) throws SecurityException {
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5094:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5101:            throws SecurityException {
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5131:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5155:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5179:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5222:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5252:     * @throws SecurityException if {@code admin} is not a device or a profile
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5288:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5311:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5336:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5363:     * @throws SecurityException if {@code admin} is not an active administrator or does not use
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5405:     * Otherwise a {@link SecurityException} will be thrown. See {@link #isAffiliatedUser}.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5411:     * @throws SecurityException if {@code admin} is not a device owner, or there is at least one
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5452:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5500:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5539:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5556:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5614:     * @throws SecurityException if {@code admin} is not an active administrator or does not user
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:5992:     * @throws SecurityException if the caller is not in {@code packageName} or {@code packageName}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6031:     * @throws SecurityException if the caller is not the device owner, does not hold the
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6127:     * a SecurityException will be thrown. This method is not available to managed profile owners.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6134:     * @throws SecurityException if {@code admin} is not an active profile owner, or the method is
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6215:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6263:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6291:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6317:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6339:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6500:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6523:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6545:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6573:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6602:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6678:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6728:     * @throws SecurityException if {@code admin} is not an active administrator or does not use
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6795:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6816:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6856:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6878:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6949:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:6972:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7016:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7042:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7072:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7095:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7176:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7200:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7286:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7380:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7517:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7543:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7560:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7583:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7606:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7629:     * @throws SecurityException if {@code admin} is not a profile owner affiliated with the device.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7649:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7695:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7723:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7745:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7767:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7821:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7848:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7872:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7897:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7924:     * @throws SecurityException if {@code admin} is not the device owner, or the profile owner of
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:7962:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8020:     * @throws SecurityException if {@code admin} is not the device owner, the profile owner of an
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8029:            throws SecurityException {
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8043:     * @throws SecurityException if {@code admin} is not the device owner, the profile owner of an
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8092:     * @throws SecurityException if {@code admin} is not the device owner, the profile owner of an
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8112:     * @throws SecurityException if {@code admin} is not the device owner, the profile owner of an
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8165:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8205:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8227:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8251:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8297:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8320:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8340:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8358:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8381:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8411:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8437:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8464:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8489:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8511:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8541:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8610:     * @throws SecurityException if {@code admin} is not the device owner, or a profile owner of
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8641:     * @throws SecurityException if {@code admin} is not the device owner, or a profile owner of
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8716:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8744:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8807:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8855:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8951:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8967:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:8994:     * @throws SecurityException if {@code admin} is not an active administrator.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9014:     * @throws SecurityException if {@code admin} is not an active administrator.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9040:     * @throws SecurityException if {@code admin} is not an active administrator.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9060:     * @throws SecurityException if {@code admin} is not an active administrator.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9122:     * throw a SecurityException when called on the parent instance:
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9162:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9168:                throw new SecurityException("The current user does not have a parent profile.");
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9190:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9206:     * <p>Can only be called by the device owner, otherwise a {@link SecurityException} will be
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9211:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9230:     * device. Otherwise a {@link SecurityException} will be thrown. See {@link #isAffiliatedUser}.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9235:     * @throws SecurityException if {@code admin} is not a device owner, or there is at least one
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9297:            throw new SecurityException("The user " + uInfo.id
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9309:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9330:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9352:     * @throws SecurityException if the caller doesn't run with {@link Process#SYSTEM_UID}
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9377:     * device. Otherwise a {@link SecurityException} will be thrown. See {@link #isAffiliatedUser}.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9382:     * @throws SecurityException if {@code admin} is not a device owner, or there is at least one
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9412:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9452:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9488:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9505:     * @throws SecurityException if {@code admin} is not a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9520:     * @throws SecurityException if the caller is not the device owner, does not hold the
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9684:     * @throws SecurityException if the caller is not shell / root or the admin package
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9756:     * @throws {@link SecurityException} if the caller has no
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9771:            throw new SecurityException(functionName + " cannot be called on the parent instance");
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9791:     * @throws SecurityException if {@code admin} is not a device owner or a profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9866:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9886:     * @throws SecurityException if {@code admin} is not a device owner and caller has
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9914:     * {@link SecurityException} until all users become affiliated again. It will also no longer be
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9925:     * @throws SecurityException if {@code admin} is not a device owner, or there is at least one
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:9959:     *        {@link #getBindDeviceAdminTargetUsers}, otherwise a {@link SecurityException} will
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10010:     * @throws SecurityException if the caller is not the device owner, does not hold the
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10029:     * @throws SecurityException if the caller is not the device owner, does not hold the
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10049:     * @throws SecurityException if the caller is not the device owner, does not hold the
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10069:     * @throws SecurityException if the caller is not the device owner/profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10091:     * @throws SecurityException if the caller does not have permission to retrieve information
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10117:     * @throws SecurityException if the caller is not the device owner/profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10144:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10234:     * @throws SecurityException if {@code admin} is not a device owner nor a profile owner
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10261:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10286:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10302:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10317:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10354:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10384:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10411:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10432:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10456:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10474:     * @throws SecurityException if {@code admin} is not a device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10505:     * @throws SecurityException if the caller is not a device or profile owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10529:     * @throws SecurityException if the caller is not the device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10569:     * @throws SecurityException if the caller is not the device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10657:     * @throws SecurityException if the caller is not the device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10677:     * @throws SecurityException if the caller is not the device owner.
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10732:     * @throws SecurityException if {@code admin} is not a profile owner
android10-security-release/core/java/android/app/admin/DevicePolicyManager.java:10758:     * @throws SecurityException if {@code admin} is not a profile owner
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:169:            long startTime, long endTime) throws SecurityException, RemoteException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:202:            long startTime, long endTime) throws SecurityException, RemoteException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:235:            long endTime) throws SecurityException, RemoteException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:272:            long endTime) throws SecurityException, RemoteException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:286:            long endTime) throws SecurityException, RemoteException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:300:            long startTime, long endTime, int uid) throws SecurityException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:307:            long startTime, long endTime, int uid) throws SecurityException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:318:            long startTime, long endTime, int uid, int tag) throws SecurityException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:349:     * @throws SecurityException if permissions are insufficient to read network statistics.
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:352:            long startTime, long endTime, int uid, int tag, int state) throws SecurityException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:361:            long startTime, long endTime, int uid, int tag, int state) throws SecurityException {
android10-security-release/core/java/android/app/usage/NetworkStatsManager.java:402:            long endTime) throws SecurityException, RemoteException {
android10-security-release/core/java/android/app/usage/NetworkStats.java:106:            throws RemoteException, SecurityException {
android10-security-release/core/java/android/app/usage/UsageStatsManager.java:554:     * @param packageName the package name of the app to set the bucket for. A SecurityException
android10-security-release/core/java/android/app/usage/UsageStatsManager.java:558:     *               STANDBY_BUCKET_NEVER will result in a SecurityException.
android10-security-release/core/java/android/app/usage/UsageStatsManager.java:642:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and
android10-security-release/core/java/android/app/usage/UsageStatsManager.java:663:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and is
android10-security-release/core/java/android/app/usage/UsageStatsManager.java:709:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and
android10-security-release/core/java/android/app/usage/UsageStatsManager.java:736:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and
android10-security-release/core/java/android/app/usage/UsageStatsManager.java:788:     * @throws SecurityException if the caller doesn't have both SUSPEND_APPS and OBSERVE_APP_USAGE
android10-security-release/core/java/android/app/usage/UsageStatsManager.java:814:     * @throws SecurityException if the caller doesn't have both SUSPEND_APPS and OBSERVE_APP_USAGE
android10-security-release/core/java/android/app/usage/UsageStatsManager.java:903:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and
android10-security-release/core/java/android/app/SearchableInfo.java:267:        } catch (java.lang.SecurityException e) {
android10-security-release/core/java/android/app/SearchableInfo.java:294:            } catch (java.lang.SecurityException e) {
android10-security-release/core/java/android/app/RecoverableSecurityException.java:28: * Specialization of {@link SecurityException} that contains additional
android10-security-release/core/java/android/app/RecoverableSecurityException.java:39: * {@link SecurityException}, and thus there is no guarantee that the messages
android10-security-release/core/java/android/app/RecoverableSecurityException.java:42:public final class RecoverableSecurityException extends SecurityException implements Parcelable {
android10-security-release/core/java/android/app/RecoverableSecurityException.java:43:    private static final String TAG = "RecoverableSecurityException";
android10-security-release/core/java/android/app/RecoverableSecurityException.java:49:    public RecoverableSecurityException(Parcel in) {
android10-security-release/core/java/android/app/RecoverableSecurityException.java:50:        this(new SecurityException(in.readString()), in.readCharSequence(),
android10-security-release/core/java/android/app/RecoverableSecurityException.java:72:    public RecoverableSecurityException(@NonNull Throwable cause, @NonNull CharSequence userMessage,
android10-security-release/core/java/android/app/RecoverableSecurityException.java:159:     * {@link RecoverableSecurityException#showAsDialog(Activity)}; needs to
android10-security-release/core/java/android/app/RecoverableSecurityException.java:167:            final RecoverableSecurityException e = getArguments().getParcelable(TAG);
android10-security-release/core/java/android/app/RecoverableSecurityException.java:193:    public static final @android.annotation.NonNull Creator<RecoverableSecurityException> CREATOR =
android10-security-release/core/java/android/app/RecoverableSecurityException.java:194:            new Creator<RecoverableSecurityException>() {
android10-security-release/core/java/android/app/RecoverableSecurityException.java:196:        public RecoverableSecurityException createFromParcel(Parcel source) {
android10-security-release/core/java/android/app/RecoverableSecurityException.java:197:            return new RecoverableSecurityException(source);
android10-security-release/core/java/android/app/RecoverableSecurityException.java:201:        public RecoverableSecurityException[] newArray(int size) {
android10-security-release/core/java/android/app/RecoverableSecurityException.java:202:            return new RecoverableSecurityException[size];
android10-security-release/core/java/android/app/AuthenticationRequiredException.java:27: * Specialization of {@link SecurityException} that is thrown when authentication is needed from the
android10-security-release/core/java/android/app/AuthenticationRequiredException.java:35: * {@link SecurityException}, and thus there is no guarantee that the action contained will be
android10-security-release/core/java/android/app/AuthenticationRequiredException.java:39:public final class AuthenticationRequiredException extends SecurityException implements Parcelable {
android10-security-release/core/java/android/app/AuthenticationRequiredException.java:46:        this(new SecurityException(in.readString()), PendingIntent.CREATOR.createFromParcel(in));
android10-security-release/core/java/android/app/role/RoleControllerService.java:136:                    throw new SecurityException("Only the system process can call " + methodName
android10-security-release/core/java/android/app/ActivityTaskManager.java:169:            throws SecurityException {
android10-security-release/core/java/android/app/ActivityTaskManager.java:195:            boolean animate, Rect initialBounds, boolean showRecents) throws SecurityException {
android10-security-release/core/java/android/app/ActivityTaskManager.java:210:    public void resizeStack(int stackId, Rect bounds) throws SecurityException {
android10-security-release/core/java/android/app/ActivityTaskManager.java:224:    public void removeStacksInWindowingModes(int[] windowingModes) throws SecurityException {
android10-security-release/core/java/android/app/ActivityTaskManager.java:234:    public void removeStacksWithActivityTypes(int[] activityTypes) throws SecurityException {
android10-security-release/core/java/android/app/ContextImpl.java:1607:                    throw new SecurityException(
android10-security-release/core/java/android/app/ContextImpl.java:1611:                    throw new SecurityException(
android10-security-release/core/java/android/app/ContextImpl.java:1638:                throw new SecurityException(
android10-security-release/core/java/android/app/ContextImpl.java:1740:                throw new SecurityException(
android10-security-release/core/java/android/app/ContextImpl.java:1892:            throw new SecurityException(
android10-security-release/core/java/android/app/ContextImpl.java:2060:            throw new SecurityException(
android10-security-release/core/java/android/app/ContextImpl.java:2622:                throw new SecurityException("MODE_WORLD_READABLE no longer supported");
android10-security-release/core/java/android/app/ContextImpl.java:2625:                throw new SecurityException("MODE_WORLD_WRITEABLE no longer supported");
android10-security-release/core/java/android/app/ActivityOptions.java:1164:     * {@code false} for the package of the target activity, a {@link SecurityException} will be
android10-security-release/core/java/android/app/AppOpsManager.java:98:     * MODE_ERRORED (throw a SecurityException back to the caller; the normal operation calls
android10-security-release/core/java/android/app/AppOpsManager.java:182:     * cause it to have a fatal error, typically a {@link SecurityException}.
android10-security-release/core/java/android/app/AppOpsManager.java:4907:    private String buildSecurityExceptionMsg(int op, int uid, String packageName) {
android10-security-release/core/java/android/app/AppOpsManager.java:4948:     * @throws SecurityException If the app has been configured to crash on this op.
android10-security-release/core/java/android/app/AppOpsManager.java:4963:     * Like {@link #checkOp} but instead of throwing a {@link SecurityException} it
android10-security-release/core/java/android/app/AppOpsManager.java:5015:     * @throws SecurityException If the app has been configured to crash on this op.
android10-security-release/core/java/android/app/AppOpsManager.java:5022:     * Like {@link #noteOp} but instead of throwing a {@link SecurityException} it
android10-security-release/core/java/android/app/AppOpsManager.java:5042:     * @throws SecurityException If the app has been configured to crash on this op.
android10-security-release/core/java/android/app/AppOpsManager.java:5050:     * of throwing a {@link SecurityException} it returns {@link #MODE_ERRORED}.
android10-security-release/core/java/android/app/AppOpsManager.java:5089:     * @throws SecurityException If the app has been configured to crash on this op.
android10-security-release/core/java/android/app/AppOpsManager.java:5096:     * Like {@link #startOp} but instead of throwing a {@link SecurityException} it
android10-security-release/core/java/android/app/AppOpsManager.java:5138:     * @throws SecurityException If the app has been configured to crash on this op.
android10-security-release/core/java/android/app/AppOpsManager.java:5146:                throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
android10-security-release/core/java/android/app/AppOpsManager.java:5155:     * Like {@link #checkOp} but instead of throwing a {@link SecurityException} it
android10-security-release/core/java/android/app/AppOpsManager.java:5172:     * @throws SecurityException if the package name doesn't belong to the given
android10-security-release/core/java/android/app/AppOpsManager.java:5178:                throw new SecurityException(
android10-security-release/core/java/android/app/AppOpsManager.java:5194:                throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
android10-security-release/core/java/android/app/AppOpsManager.java:5203:     * Like {@link #checkAudioOp} but instead of throwing a {@link SecurityException} it
android10-security-release/core/java/android/app/AppOpsManager.java:5227:     * @throws SecurityException If the app has been configured to crash on this op.
android10-security-release/core/java/android/app/AppOpsManager.java:5234:            throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
android10-security-release/core/java/android/app/AppOpsManager.java:5252:     * @throws SecurityException If the proxy or proxied app has been configured to
android10-security-release/core/java/android/app/AppOpsManager.java:5261:            throw new SecurityException("Proxy package " + mContext.getOpPackageName()
android10-security-release/core/java/android/app/AppOpsManager.java:5271:     * of throwing a {@link SecurityException} it returns {@link #MODE_ERRORED}.
android10-security-release/core/java/android/app/AppOpsManager.java:5285:     * of throwing a {@link SecurityException} it returns {@link #MODE_ERRORED}.
android10-security-release/core/java/android/app/AppOpsManager.java:5297:     * Like {@link #noteOp} but instead of throwing a {@link SecurityException} it
android10-security-release/core/java/android/app/AppOpsManager.java:5352:     * @throws SecurityException If the app has been configured to crash on this op.
android10-security-release/core/java/android/app/AppOpsManager.java:5373:     * @throws SecurityException If the app has been configured to crash on this op or
android10-security-release/core/java/android/app/AppOpsManager.java:5381:            throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
android10-security-release/core/java/android/app/AppOpsManager.java:5387:     * Like {@link #startOp} but instead of throwing a {@link SecurityException} it
android10-security-release/core/java/android/app/AppOpsManager.java:5397:     * {@link SecurityException} it returns {@link #MODE_ERRORED}.
android10-security-release/core/java/android/app/WallpaperManager.java:419:                } catch (SecurityException e) {
android10-security-release/core/java/android/app/WallpaperManager.java:987:            } catch (SecurityException e) {
android10-security-release/core/java/android/app/UiAutomationConnection.java:520:            throw new SecurityException("Calling from not trusted UID!");
android10-security-release/core/java/android/app/slice/SliceManager.java:124:     * or the default voice interaction service. Otherwise will throw {@link SecurityException}.
android10-security-release/core/java/android/app/slice/SliceManager.java:156:     * or the default voice interaction service. Otherwise will throw {@link SecurityException}.
android10-security-release/core/java/android/app/slice/SliceManager.java:489:                throw new SecurityException("No pkg specified");
android10-security-release/core/java/android/app/slice/SliceManager.java:494:                throw new SecurityException("User " + uid + " does not have slice permission for "
android10-security-release/core/java/android/app/slice/SliceProvider.java:391:                throw new SecurityException("Only the system can pin/unpin slices");
android10-security-release/core/java/android/app/slice/SliceProvider.java:398:                throw new SecurityException("Only the system can pin/unpin slices");
android10-security-release/core/java/android/app/slice/SliceProvider.java:410:                throw new SecurityException("Only the system can get permissions");
android10-security-release/core/java/android/app/slice/SliceProvider.java:457:        } catch (SecurityException e) {
android10-security-release/core/java/android/app/backup/BackupManager.java:501:     * {@link SecurityException} will be thrown.
android10-security-release/core/java/android/app/backup/BackupManager.java:517:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android10-security-release/core/java/android/app/backup/BackupManager.java:547:     * {@link SecurityException} will be thrown.
android10-security-release/core/java/android/app/backup/BackupManager.java:563:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android10-security-release/core/java/android/app/backup/IBackupManager.aidl:339:     * {@link SecurityException} will be thrown.
android10-security-release/core/java/android/app/backup/IBackupManager.aidl:359:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android10-security-release/core/java/android/app/DownloadManager.java:1276:            throw new SecurityException(displayName + " is not a valid filename");
android10-security-release/core/java/android/app/DownloadManager.java:1635:                        throw new SecurityException(
android10-security-release/core/java/android/app/UiAutomation.java:1003:     * @throws SecurityException if unable to grant the permission.
android10-security-release/core/java/android/app/UiAutomation.java:1026:     * @throws SecurityException if unable to grant the permission.
android10-security-release/core/java/android/app/UiAutomation.java:1041:            throw new SecurityException("Error granting runtime permission", e);
android10-security-release/core/java/android/app/UiAutomation.java:1049:     * @throws SecurityException if unable to revoke the permission.
android10-security-release/core/java/android/app/UiAutomation.java:1072:     * @throws SecurityException if unable to revoke the permission.
android10-security-release/core/java/android/app/UiAutomation.java:1087:            throw new SecurityException("Error granting runtime permission", e);
android10-security-release/core/java/android/permission/PermissionControllerManager.java:274:            throw new SecurityException(Manifest.permission.REVOKE_RUNTIME_PERMISSIONS
android10-security-release/core/java/android/service/notification/NotificationAssistantService.java:414:                        } catch (SecurityException e) {
android10-security-release/core/java/android/service/oemlock/OemLockManager.java:75:     * @throws SecurityException if the wrong signature was provided.
android10-security-release/core/java/android/service/oemlock/OemLockManager.java:109:     * @throws SecurityException if the user is not allowed to unlock the device.
android10-security-release/core/java/android/service/autofill/AutofillServiceInfo.java:102:                throw new SecurityException("Service does not require permission "
android10-security-release/core/java/android/service/contentcapture/ContentCaptureServiceInfo.java:94:            throw new SecurityException("Service does not require permission "
android10-security-release/core/java/android/os/HardwarePropertiesManager.java:120:     * @throws SecurityException if something other than the device owner or the current VR service
android10-security-release/core/java/android/os/HardwarePropertiesManager.java:158:     * @throws SecurityException if something other than the device owner or the current VR service
android10-security-release/core/java/android/os/HardwarePropertiesManager.java:175:     * @throws SecurityException if something other than the device owner or the current VR service
android10-security-release/core/java/android/os/DropBoxManager.java:379:        } catch (SecurityException e) {
android10-security-release/core/java/android/os/UserManager.java:2646:     * @throws SecurityException if the caller is invalid
android10-security-release/core/java/android/os/SystemUpdateManager.java:100:     * @throws SecurityException if the caller is not allowed to read the info.
android10-security-release/core/java/android/os/SystemUpdateManager.java:126:     * @throws SecurityException if the caller is not allowed to update the info.
android10-security-release/core/java/android/os/storage/StorageManager.java:1654:                throw new SecurityException(
android10-security-release/core/java/android/os/storage/StorageManager.java:1668:            } catch (SecurityException e) {
android10-security-release/core/java/android/os/storage/StorageManager.java:1684:                    throw new SecurityException("Op " + AppOpsManager.opToName(op) + " "
android10-security-release/core/java/android/os/storage/StorageManager.java:1716:                    throw new SecurityException("Op " + AppOpsManager.opToName(op) + " "
android10-security-release/core/java/android/os/SystemClock.java:164:        } catch (SecurityException e) {
android10-security-release/core/java/android/os/RecoverySystem.java:51:import java.security.GeneralSecurityException;
android10-security-release/core/java/android/os/RecoverySystem.java:156:        throws IOException, GeneralSecurityException {
android10-security-release/core/java/android/os/RecoverySystem.java:191:     * SecurityException being thrown (and the thread's interrupt flag
android10-security-release/core/java/android/os/RecoverySystem.java:205:     * @throws GeneralSecurityException if verification failed
android10-security-release/core/java/android/os/RecoverySystem.java:210:        throws IOException, GeneralSecurityException {
android10-security-release/core/java/android/os/RecoverySystem.java:686:     * @throws SecurityException if the current user is not allowed to wipe data.
android10-security-release/core/java/android/os/RecoverySystem.java:730:     * @throws SecurityException if the current user is not allowed to wipe data.
android10-security-release/core/java/android/os/RecoverySystem.java:738:            throw new SecurityException("Wiping data is not allowed for this user.");
android10-security-release/core/java/android/os/Build.java:149:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/core/java/android/os/Build.java:896:         * will throw a SecurityException if the caller does not have permission to access
android10-security-release/core/java/android/os/Debug.java:2466:     * throw a SecurityException.
android10-security-release/core/java/android/os/Debug.java:2473:     * @throws SecurityException if the app is not debuggable.
android10-security-release/core/java/android/os/GraphicsEnvironment.java:493:            } catch (SecurityException e) {
android10-security-release/core/java/android/os/GraphicsEnvironment.java:642:        } catch (Settings.SettingNotFoundException | SecurityException e) {
android10-security-release/core/java/android/os/Binder.java:819:            } catch (SecurityException e) {
android10-security-release/core/java/android/os/HwParcel.java:308:     * @throws SecurityException interface doesn't match
android10-security-release/core/java/android/os/Process.java:739:     * @throws SecurityException Throws SecurityException if your process does
android10-security-release/core/java/android/os/Process.java:744:            throws IllegalArgumentException, SecurityException;
android10-security-release/core/java/android/os/Process.java:763:     * @throws SecurityException Throws SecurityException if your process does
android10-security-release/core/java/android/os/Process.java:773:            throws IllegalArgumentException, SecurityException;
android10-security-release/core/java/android/os/Process.java:783:     * @throws SecurityException Throws SecurityException if your process does
android10-security-release/core/java/android/os/Process.java:788:            throws IllegalArgumentException, SecurityException;
android10-security-release/core/java/android/os/Process.java:798:     * @throws SecurityException Throws SecurityException if your process does
android10-security-release/core/java/android/os/Process.java:812:            throws IllegalArgumentException, SecurityException;
android10-security-release/core/java/android/os/Process.java:820:            throws IllegalArgumentException, SecurityException;
android10-security-release/core/java/android/os/Process.java:856:     * @throws SecurityException Throws SecurityException if your process does
android10-security-release/core/java/android/os/Process.java:863:            throws IllegalArgumentException, SecurityException;
android10-security-release/core/java/android/os/Process.java:888:     * @throws SecurityException Throws SecurityException if your process does
android10-security-release/core/java/android/os/Process.java:908:     * @throws SecurityException Throws SecurityException if your process does
android10-security-release/core/java/android/os/Parcel.java:1858:     * <li>{@link SecurityException}
android10-security-release/core/java/android/os/Parcel.java:1875:        } else if (e instanceof SecurityException) {
android10-security-release/core/java/android/os/Parcel.java:2071:                return new SecurityException(msg);
android10-security-release/core/java/android/os/ShellCommand.java:106:        } catch (SecurityException e) {
android10-security-release/core/java/android/os/UserManagerInternal.java:199:     * @throws SecurityException if the calling user and {@code targetUser} are not in the same
android10-security-release/core/java/android/os/UserManagerInternal.java:200:     * group and {@code throwSecurityException} is true, otherwise if will simply return false.
android10-security-release/core/java/android/os/UserManagerInternal.java:203:            String debugMsg, boolean throwSecurityException);
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:105:     * @throws SecurityException if a APK Signature Scheme v2 signature of this APK does not verify.
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:109:            throws SignatureNotFoundException, SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:124:            throws SignatureNotFoundException, SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:130:            throws SignatureNotFoundException, SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:141:     * @throws SecurityException if an APK Signature Scheme v2 signature of this APK does not
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:146:            throws SignatureNotFoundException, SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:173:            boolean doVerifyIntegrity) throws SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:187:            throw new SecurityException("Failed to read list of signers", e);
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:195:            } catch (IOException | BufferUnderflowException | SecurityException e) {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:196:                throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:203:            throw new SecurityException("No signers found");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:207:            throw new SecurityException("No content digests found");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:229:            CertificateFactory certFactory) throws SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:243:                    throw new SecurityException("Signature record too short");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:256:                throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:263:                throw new SecurityException("No signatures found");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:265:                throw new SecurityException("No supported signatures found");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:288:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:292:            throw new SecurityException(jcaSignatureAlgorithm + " signature did not verify");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:320:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:327:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:343:                throw new SecurityException("Failed to decode certificate #" + certificateCount, e);
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:351:            throw new SecurityException("No certificates listed");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:356:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:370:            throws SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:387:                        throw new SecurityException("V2 signature indicates APK is signed using APK"
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:400:            throws IOException, SignatureNotFoundException, SecurityException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:409:            throws IOException, SignatureNotFoundException, SecurityException, DigestException,
android10-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:40:import java.security.GeneralSecurityException;
android10-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:228:        } catch (GeneralSecurityException e) {
android10-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:396:    public static byte[] getVerityRootHash(String apkPath) throws IOException, SecurityException {
android10-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:417:            throws IOException, SignatureNotFoundException, SecurityException, DigestException,
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:90:            SignatureInfo signatureInfo) throws SecurityException {
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:92:            throw new SecurityException("No digests provided");
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:112:                throw new SecurityException("Cannot get FD", e);
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:123:            throw new SecurityException("No known digest exists for integrity check");
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:130:            SignatureInfo signatureInfo) throws SecurityException {
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:169:            throw new SecurityException("Failed to compute digest(s) of contents", e);
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:176:                throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:304:            byte[] data, long fileSize, SignatureInfo signatureInfo) throws SecurityException {
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:313:            throw new SecurityException("Verity digest size is wrong: " + data.length);
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:322:            throw new SecurityException("APK content size did not verify");
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:331:            SignatureInfo signatureInfo) throws SecurityException {
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:343:                throw new SecurityException("APK verity digest of contents did not verify");
android10-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:346:            throw new SecurityException("Error during verification", e);
android10-security-release/core/java/android/util/apk/VerityBuilder.java:82:            throws IOException, SecurityException, NoSuchAlgorithmException, DigestException {
android10-security-release/core/java/android/util/apk/VerityBuilder.java:99:            throws IOException, SecurityException, NoSuchAlgorithmException, DigestException {
android10-security-release/core/java/android/util/apk/VerityBuilder.java:108:            throws IOException, SecurityException, NoSuchAlgorithmException, DigestException {
android10-security-release/core/java/android/util/apk/VerityBuilder.java:173:            throws IOException, SignatureNotFoundException, SecurityException, DigestException,
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:102:     * @throws SecurityException if the APK Signature Scheme v3 signature of this APK does not
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:107:            throws SignatureNotFoundException, SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:121:            throws SignatureNotFoundException, SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:126:            throws SignatureNotFoundException, SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:137:     * @throws SecurityException if an APK Signature Scheme v3 signature of this APK does not
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:142:            throws SignatureNotFoundException, SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:169:            boolean doVerifyIntegrity) throws SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:183:            throw new SecurityException("Failed to read list of signers", e);
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:193:            } catch (IOException | BufferUnderflowException | SecurityException e) {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:194:                throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:201:            throw new SecurityException("No signers found");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:205:            throw new SecurityException("APK Signature Scheme V3 only supports one signer: "
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:210:            throw new SecurityException("No content digests found");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:230:            throws SecurityException, IOException, PlatformNotSupportedException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:256:                    throw new SecurityException("Signature record too short");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:269:                throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:276:                throw new SecurityException("No signatures found");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:278:                throw new SecurityException("No supported signatures found");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:301:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:305:            throw new SecurityException(jcaSignatureAlgorithm + " signature did not verify");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:333:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:340:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:356:                throw new SecurityException("Failed to decode certificate #" + certificateCount, e);
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:364:            throw new SecurityException("No certificates listed");
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:369:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:375:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:381:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:406:                        throw new SecurityException("Encountered multiple Proof-of-rotation records"
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:416:                            throw new SecurityException("Terminal certificate in Proof-of-rotation"
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:420:                        throw new SecurityException("Failed to encode certificate when comparing"
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:436:            throws SecurityException, IOException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:482:                        throw new SecurityException("Unable to verify signature of certificate #"
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:492:                    throw new SecurityException("Signing algorithm ID mismatch for certificate #"
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:501:                    throw new SecurityException("Encountered duplicate entries in "
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:513:            throw new SecurityException(
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:517:            throw new SecurityException("Failed to decode certificate #" + levelCount
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:524:            throws IOException, SignatureNotFoundException, SecurityException {
android10-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:533:            throws IOException, SignatureNotFoundException, SecurityException, DigestException,
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:26:import java.security.GeneralSecurityException;
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:143:         * @throws SecurityException
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:157:    private static SecurityException invalidDigest(String signatureFile, String name,
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:159:        throw new SecurityException(signatureFile + " has invalid digest for " + name +
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:163:    private static SecurityException failedVerification(String jarName, String signatureFile) {
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:164:        throw new SecurityException(jarName + " failed verification of " + signatureFile);
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:167:    private static SecurityException failedVerification(String jarName, String signatureFile,
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:169:        throw new SecurityException(jarName + " failed verification of " + signatureFile, e);
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:286:     * @throws SecurityException
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:310:     * certificates listed in the PKCS7 block. Throws a {@code GeneralSecurityException}
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:314:        throws GeneralSecurityException {
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:323:                throw new GeneralSecurityException(
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:335:                throw new GeneralSecurityException(
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:339:                throw new GeneralSecurityException(
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:345:            throw new GeneralSecurityException("IO exception verifying jar cert", e);
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:374:        } catch (GeneralSecurityException e) {
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:426:                    throw new SecurityException(signatureFile + " indicates " + jarName
android10-security-release/core/java/android/util/jar/StrictJarVerifier.java:431:                    throw new SecurityException(signatureFile + " indicates " + jarName
android10-security-release/core/java/android/util/jar/StrictJarFile.java:65:            throws IOException, SecurityException {
android10-security-release/core/java/android/util/jar/StrictJarFile.java:70:            throws IOException, SecurityException {
android10-security-release/core/java/android/util/jar/StrictJarFile.java:77:                    throws IOException, SecurityException {
android10-security-release/core/java/android/util/jar/StrictJarFile.java:85:                    throws IOException, SecurityException {
android10-security-release/core/java/android/util/jar/StrictJarFile.java:104:                    throws IOException, SecurityException {
android10-security-release/core/java/android/util/jar/StrictJarFile.java:124:                        throw new SecurityException("File " + file + " in manifest does not exist");
android10-security-release/core/java/android/util/jar/StrictJarFile.java:134:        } catch (IOException | SecurityException e) {
android10-security-release/core/java/android/hardware/location/GeofenceHardwareService.java:62:            throw new SecurityException("Insufficient permissions to access hardware geofence for"
android10-security-release/core/java/android/hardware/usb/UsbDevice.java:138:     * @throws SecurityException if the app targets SDK >= {@value android.os.Build.VERSION_CODES#Q}
android10-security-release/core/java/android/hardware/usb/UsbAccessory.java:169:     * @throws SecurityException if the app targets SDK >= {@value android.os.Build.VERSION_CODES#Q}
android10-security-release/core/java/android/hardware/display/DisplayManager.java:630:     * @throws SecurityException if the caller does not have permission to create
android10-security-release/core/java/android/hardware/camera2/marshal/impl/MarshalQueryableEnum.java:125:                    } catch (SecurityException e) {
android10-security-release/core/java/android/hardware/camera2/CameraManager.java:352:     * @throws SecurityException if the application does not have permission to
android10-security-release/core/java/android/hardware/camera2/CameraManager.java:505:     * @throws SecurityException if the application does not have permission to
android10-security-release/core/java/android/hardware/camera2/CameraManager.java:542:     * @throws SecurityException if the application does not have permission to
android10-security-release/core/java/android/hardware/camera2/CameraManager.java:793:                    throw new SecurityException(e.getMessage(), e);
android10-security-release/core/java/android/content/Context.java:138:     * mode throws a {@link SecurityException}.
android10-security-release/core/java/android/content/Context.java:158:     * mode will throw a {@link SecurityException}.
android10-security-release/core/java/android/content/Context.java:2575:     * permission, {@link SecurityException} will be thrown.
android10-security-release/core/java/android/content/Context.java:2823:     * <p>This function will throw {@link SecurityException} if you do not
android10-security-release/core/java/android/content/Context.java:2844:     * @throws SecurityException If the caller does not have permission to access the service
android10-security-release/core/java/android/content/Context.java:2875:     * @throws SecurityException If the caller does not have permission to access the service
android10-security-release/core/java/android/content/Context.java:2903:     * <p>This function will throw {@link SecurityException} if you do not
android10-security-release/core/java/android/content/Context.java:2913:     * @throws SecurityException If the caller does not have permission to access the service
android10-security-release/core/java/android/content/Context.java:2952:     * <p>This method will throw {@link SecurityException} if the calling app does not
android10-security-release/core/java/android/content/Context.java:2984:     * @throws SecurityException If the caller does not have permission to access the service
android10-security-release/core/java/android/content/Context.java:3037:     * @throws SecurityException If the caller does not have permission to access the service
android10-security-release/core/java/android/content/Context.java:4767:     * and user ID running in the system, throw a {@link SecurityException}.
android10-security-release/core/java/android/content/Context.java:4783:     * SecurityException}.  This is basically the same as calling
android10-security-release/core/java/android/content/Context.java:4788:     * this function will always throw the SecurityException.  This is
android10-security-release/core/java/android/content/Context.java:4804:     * {@link SecurityException}.  This is the same as {@link
android10-security-release/core/java/android/content/Context.java:4861:     * function and a {@link SecurityException} would be thrown.  As of
android10-security-release/core/java/android/content/Context.java:5004:     * SecurityException}.  This only checks for permissions that have
android10-security-release/core/java/android/content/Context.java:5024:     * SecurityException}.  This is basically the same as calling
android10-security-release/core/java/android/content/Context.java:5030:     * will always throw a SecurityException.
android10-security-release/core/java/android/content/Context.java:5044:     * SecurityException}.  This is the same as {@link
android10-security-release/core/java/android/content/Context.java:5101:     * java.lang.SecurityException will be thrown.  If this flag is not set,
android10-security-release/core/java/android/content/Context.java:5157:     * <p>Throws {@link java.lang.SecurityException} if the Context requested
android10-security-release/core/java/android/content/Context.java:5166:     * @throws SecurityException &nbsp;
android10-security-release/core/java/android/content/rollback/RollbackManager.java:79:     * @throws SecurityException if the caller does not have appropriate permissions.
android10-security-release/core/java/android/content/rollback/RollbackManager.java:109:     * @throws SecurityException if the caller does not have appropriate permissions.
android10-security-release/core/java/android/content/rollback/RollbackManager.java:197:     * @throws SecurityException if the caller does not have appropriate permissions.
android10-security-release/core/java/android/content/rollback/RollbackManager.java:219:     * @throws SecurityException if the caller does not have appropriate permissions.
android10-security-release/core/java/android/content/rollback/RollbackManager.java:240:     * @throws SecurityException if the caller does not have appropriate permissions.
android10-security-release/core/java/android/content/ContentProvider.java:586:                IBinder callerToken) throws FileNotFoundException, SecurityException {
android10-security-release/core/java/android/content/ContentProvider.java:601:                throws SecurityException {
android10-security-release/core/java/android/content/ContentProvider.java:611:                throws SecurityException {
android10-security-release/core/java/android/content/ContentProvider.java:653:            throws SecurityException {
android10-security-release/core/java/android/content/ContentProvider.java:728:        throw new SecurityException("Permission Denial: reading "
android10-security-release/core/java/android/content/ContentProvider.java:735:            throws SecurityException {
android10-security-release/core/java/android/content/ContentProvider.java:802:        throw new SecurityException("Permission Denial: writing "
android10-security-release/core/java/android/content/ContentProvider.java:838:     * @throws SecurityException if the calling package doesn't belong to the
android10-security-release/core/java/android/content/ContentProvider.java:1575:     * @throws SecurityException Throws SecurityException if the caller does
android10-security-release/core/java/android/content/ContentProvider.java:1645:     * @throws SecurityException Throws SecurityException if the caller does
android10-security-release/core/java/android/content/ContentProvider.java:1703:     * @throws SecurityException Throws SecurityException if the caller does
android10-security-release/core/java/android/content/ContentProvider.java:1766:     * @throws SecurityException Throws SecurityException if the caller does
android10-security-release/core/java/android/content/ContentProvider.java:1881:     * @throws SecurityException Throws SecurityException if the caller does
android10-security-release/core/java/android/content/ContentProvider.java:1948:     * @throws SecurityException Throws SecurityException if the caller does
android10-security-release/core/java/android/content/ContentProvider.java:2200:    private void validateIncomingAuthority(String authority) throws SecurityException {
android10-security-release/core/java/android/content/ContentProvider.java:2209:            throw new SecurityException(message);
android10-security-release/core/java/android/content/ContentProvider.java:2215:    public Uri validateIncomingUri(Uri uri) throws SecurityException {
android10-security-release/core/java/android/content/ContentProvider.java:2220:                throw new SecurityException("trying to query a ContentProvider in user "
android10-security-release/core/java/android/content/Intent.java:1115:     * result in a {@link java.lang.SecurityException}.
android10-security-release/core/java/android/content/ClipData.java:365:                    } catch (SecurityException e) {
android10-security-release/core/java/android/content/ClipData.java:507:                } catch (SecurityException e) {
android10-security-release/core/java/android/content/ClipData.java:567:                    } catch (SecurityException e) {
android10-security-release/core/java/android/content/AbstractThreadedSyncAdapter.java:344:            } catch (SecurityException e) {
android10-security-release/core/java/android/content/AbstractThreadedSyncAdapter.java:346:                    Log.d(TAG, "SecurityException", e);
android10-security-release/core/java/android/content/AbstractThreadedSyncAdapter.java:348:                AbstractThreadedSyncAdapter.this.onSecurityException(mAccount, mExtras,
android10-security-release/core/java/android/content/AbstractThreadedSyncAdapter.java:462:    public void onSecurityException(Account account, Bundle extras,
android10-security-release/core/java/android/content/pm/LauncherApps.java:664:     * @throws SecurityException if {@link #hasShortcutHostPermission()} is false.
android10-security-release/core/java/android/content/pm/LauncherApps.java:785:     * @throws SecurityException when the caller is not the recents app.
android10-security-release/core/java/android/content/pm/LauncherApps.java:803:     * throw a {@link SecurityException} unless the caller has the same UID as the target app's.
android10-security-release/core/java/android/content/pm/PackageInstaller.java:356:     * @throws SecurityException when installation services are unavailable,
android10-security-release/core/java/android/content/pm/PackageInstaller.java:387:     * @throws SecurityException when the caller does not own the session, or
android10-security-release/core/java/android/content/pm/PackageInstaller.java:408:     * @throws SecurityException when the caller does not own the session, or
android10-security-release/core/java/android/content/pm/PackageInstaller.java:423:     * @throws SecurityException when the caller does not own the session, or
android10-security-release/core/java/android/content/pm/PackageInstaller.java:441:     * @throws SecurityException when the caller does not own the session, or
android10-security-release/core/java/android/content/pm/PackageInstaller.java:925:         * @throws SecurityException if called after the session has been
android10-security-release/core/java/android/content/pm/PackageInstaller.java:991:         * @throws SecurityException if called after the session has been
android10-security-release/core/java/android/content/pm/PackageInstaller.java:1013:         * @throws SecurityException if called after the session has been
android10-security-release/core/java/android/content/pm/PackageInstaller.java:1065:         * @throws SecurityException if streams opened through
android10-security-release/core/java/android/content/pm/PackageInstaller.java:1113:         * will cause {@link SecurityException}s.
android10-security-release/core/java/android/content/pm/PackageInstaller.java:1122:         * @throws SecurityException if called after the session has been committed or abandoned.
android10-security-release/core/java/android/content/pm/PackageInstaller.java:1123:         * @throws SecurityException if the session does not update the original installer
android10-security-release/core/java/android/content/pm/PackageInstaller.java:1124:         * @throws SecurityException if streams opened through
android10-security-release/core/java/android/content/pm/ActivityInfo.java:488:     * this activity is launched into such a container a SecurityException will be
android10-security-release/core/java/android/content/pm/CrossProfileApps.java:58:     *        {@link android.content.Intent#CATEGORY_LAUNCHER}. Otherwise, SecurityException will
android10-security-release/core/java/android/content/pm/CrossProfileApps.java:61:     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will
android10-security-release/core/java/android/content/pm/CrossProfileApps.java:87:     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will
android10-security-release/core/java/android/content/pm/CrossProfileApps.java:130:     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will
android10-security-release/core/java/android/content/pm/CrossProfileApps.java:152:     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will
android10-security-release/core/java/android/content/pm/CrossProfileApps.java:174:            throw new SecurityException("Not allowed to access " + userHandle);
android10-security-release/core/java/android/content/pm/PackageManager.java:3929:     * @throws SecurityException if you are not allowed to add the
android10-security-release/core/java/android/content/pm/PackageManager.java:3953:     * @throws SecurityException if you are not allowed to remove the
android10-security-release/core/java/android/content/pm/PackageManager.java:3991:     * java.lang.SecurityException} is thrown. If the package or permission is
android10-security-release/core/java/android/content/pm/PackageManager.java:4018:     * java.lang.SecurityException} is thrown. If the package or permission is
android10-security-release/core/java/android/content/pm/PackageManager.java:4123:     * @throws SecurityException if you try to access a whitelist that you have no access to.
android10-security-release/core/java/android/content/pm/PackageManager.java:4177:     * @throws SecurityException if you try to modify a whitelist that you have no access to.
android10-security-release/core/java/android/content/pm/PackageManager.java:4231:     * @throws SecurityException if you try to modify a whitelist that you have no access to.
android10-security-release/core/java/android/content/pm/PackageManager.java:5650:     * @throws SecurityException if the caller does not have the
android10-security-release/core/java/android/content/pm/PackageManager.java:5684:     * @throws SecurityException if the caller does not have the
android10-security-release/core/java/android/content/pm/PackageManager.java:5704:     * @throws SecurityException if the caller does not have the
android10-security-release/core/java/android/content/pm/PackageManager.java:5835:     * <li> A SecurityException will be thrown if <var>installerPackageName</var>
android10-security-release/core/java/android/content/pm/PackageManager.java:5837:     * <li> A SecurityException will be thrown if <var>targetPackage</var> already
android10-security-release/core/java/android/content/pm/PackageManagerInternal.java:916:     * @throws SecurityException if the caller does not have the
android10-security-release/core/java/android/content/AutofillOptions.java:98:            throw new SecurityException("Thou shall not pass!");
android10-security-release/core/java/android/content/ContentCaptureOptions.java:136:            throw new SecurityException("Thou shall not pass!");
android10-security-release/core/java/android/net/VpnService.java:887:         * @throws SecurityException if the service is not properly declared
android10-security-release/core/java/android/net/NetworkStack.java:50:     * {@link SecurityException}.
android10-security-release/core/java/android/net/NetworkStack.java:62:     * for a particular process, throw a {@link SecurityException}.
android10-security-release/core/java/android/net/NetworkStack.java:80:            throw new SecurityException("Requires one of the following permissions: "
android10-security-release/core/java/android/net/ConnectivityManager.java:2297:            // AppOpsService throws SecurityException.
android10-security-release/core/java/android/net/ConnectivityManager.java:2488:        } catch (SecurityException e) {
android10-security-release/core/java/android/net/ConnectivityManager.java:3617:     * @throws SecurityException if missing the appropriate permissions.
android10-security-release/core/java/android/net/ConnectivityManager.java:3654:     * @throws SecurityException if missing the appropriate permissions.
android10-security-release/core/java/android/net/ConnectivityManager.java:3692:     * @throws SecurityException if missing the appropriate permissions.
android10-security-release/core/java/android/net/ConnectivityManager.java:3729:     * @throws SecurityException if missing the appropriate permissions.
android10-security-release/core/java/android/net/ConnectivityManager.java:3802:     * @throws SecurityException if missing the appropriate permissions.
android10-security-release/core/java/android/net/ConnectivityManager.java:4307:            } catch (SecurityException e) {
android10-security-release/core/java/android/net/ConnectivityManager.java:4492:     * Throws {@link SecurityException} if the caller is not the active VPN for the current user.
android10-security-release/core/java/android/net/NetworkScoreManager.java:229:     * @throws SecurityException if the caller doesn't hold either {@link permission#SCORE_NETWORKS}
android10-security-release/core/java/android/net/NetworkScoreManager.java:245:     * @throws SecurityException if the caller does not hold the
android10-security-release/core/java/android/net/NetworkScoreManager.java:263:     * @throws SecurityException if the caller does not hold the
android10-security-release/core/java/android/net/NetworkScoreManager.java:285:     * @throws SecurityException if the caller is not the active scorer.
android10-security-release/core/java/android/net/NetworkScoreManager.java:288:    public boolean updateScores(ScoredNetwork[] networks) throws SecurityException {
android10-security-release/core/java/android/net/NetworkScoreManager.java:306:     * @throws SecurityException if the caller is not the active scorer or if the caller doesn't
android10-security-release/core/java/android/net/NetworkScoreManager.java:311:    public boolean clearScores() throws SecurityException {
android10-security-release/core/java/android/net/NetworkScoreManager.java:326:     * @throws SecurityException if the caller doesn't hold either {@link permission#SCORE_NETWORKS}
android10-security-release/core/java/android/net/NetworkScoreManager.java:333:    public boolean setActiveScorer(String packageName) throws SecurityException {
android10-security-release/core/java/android/net/NetworkScoreManager.java:346:     * @throws SecurityException if the caller is not the active scorer or if the caller doesn't
android10-security-release/core/java/android/net/NetworkScoreManager.java:351:    public void disableScoring() throws SecurityException {
android10-security-release/core/java/android/net/NetworkScoreManager.java:363:     * @throws SecurityException if the caller does not hold the
android10-security-release/core/java/android/net/NetworkScoreManager.java:368:    public boolean requestScores(NetworkKey[] networks) throws SecurityException {
android10-security-release/core/java/android/net/NetworkScoreManager.java:381:     * @throws SecurityException if the caller does not hold the
android10-security-release/core/java/android/net/NetworkScoreManager.java:399:     * @throws SecurityException if the caller does not hold the
android10-security-release/core/java/android/net/NetworkScoreManager.java:419:     * @throws SecurityException if the caller does not hold the
android10-security-release/core/java/android/net/NetworkScoreManager.java:438:     * @throws SecurityException if the caller does not hold the
android10-security-release/core/java/android/net/INetworkScoreCache.aidl:28: * <p>A proper implementation should throw SecurityException whenever the caller is not privileged.
android10-security-release/core/java/android/net/NetworkSpecifier.java:42:     * should throw a SecurityException.
android10-security-release/core/java/android/net/INetworkScoreService.aidl:33:     * @throws SecurityException if the caller is not the current active scorer.
android10-security-release/core/java/android/net/INetworkScoreService.aidl:40:     * @throws SecurityException if the caller is neither the current active scorer nor the system.
android10-security-release/core/java/android/net/INetworkScoreService.aidl:48:     * @throws SecurityException if the caller is not the system or a network scorer.
android10-security-release/core/java/android/net/INetworkScoreService.aidl:54:     * @throws SecurityException if the caller is not the current scorer or the system.
android10-security-release/core/java/android/net/INetworkScoreService.aidl:64:     * @throws SecurityException if the caller is not the system
android10-security-release/core/java/android/net/INetworkScoreService.aidl:75:     * @throws SecurityException if the caller is not the system.
android10-security-release/core/java/android/net/INetworkScoreService.aidl:88:     * @throws SecurityException if the caller is not the system
android10-security-release/core/java/com/android/server/net/NetworkPinner.java:124:                } catch (SecurityException e) {
android10-security-release/core/java/com/android/server/net/NetworkPinner.java:138:                } catch (SecurityException e) {
android10-security-release/core/java/com/android/internal/widget/MessagingImageMessage.java:104:        } catch (IOException | SecurityException e) {
android10-security-release/core/java/com/android/internal/widget/LockPatternUtils.java:1743:            throw new SecurityException("Only available to system server itself");
android10-security-release/core/java/com/android/internal/app/ResolverActivity.java:860:        } catch (SecurityException e) {
android10-security-release/core/java/com/android/internal/app/ConfirmUserCreationActivity.java:87:            throw new SecurityException(
android10-security-release/core/java/com/android/internal/app/ConfirmUserCreationActivity.java:94:            throw new SecurityException(
android10-security-release/core/java/com/android/internal/app/ChooserActivity.java:970:        } catch (SecurityException | NullPointerException e) {
android10-security-release/core/java/com/android/internal/app/ChooserActivity.java:1895:        } catch (IOException | NullPointerException | SecurityException ex) {
android10-security-release/core/java/com/android/internal/os/ZygoteConnection.java:208:            throw new ZygoteSecurityException("Client may not specify capabilities: "
android10-security-release/core/java/com/android/internal/os/Zygote.java:682:            throw new ZygoteSecurityException("Client may not specify capabilities: "
android10-security-release/core/java/com/android/internal/os/Zygote.java:727:     * @throws ZygoteSecurityException
android10-security-release/core/java/com/android/internal/os/Zygote.java:730:            throws ZygoteSecurityException {
android10-security-release/core/java/com/android/internal/os/Zygote.java:739:                throw new ZygoteSecurityException(
android10-security-release/core/java/com/android/internal/os/Zygote.java:782:     * @throws ZygoteSecurityException
android10-security-release/core/java/com/android/internal/os/Zygote.java:785:            throws ZygoteSecurityException {
android10-security-release/core/java/com/android/internal/os/Zygote.java:790:            throw new ZygoteSecurityException("Peer is permitted to specify an "
android10-security-release/core/java/com/android/internal/os/ZygoteSecurityException.java:24:class ZygoteSecurityException extends RuntimeException {
android10-security-release/core/java/com/android/internal/os/ZygoteSecurityException.java:26:    ZygoteSecurityException(String message) {
android10-security-release/core/java/com/android/internal/os/RuntimeInit.java:302:        } catch (SecurityException ex) {
android10-security-release/core/java/com/android/internal/util/MessageUtils.java:61:            } catch (SecurityException e) {
android10-security-release/core/java/com/android/internal/util/MessageUtils.java:106:                    } catch (SecurityException | IllegalAccessException e) {
android10-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:28:import androidx.test.espresso.InjectEventSecurityException;
android10-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:97:        } catch (InjectEventSecurityException e) {
android10-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:107:        } catch (InjectEventSecurityException e) {
android10-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:136:            } catch (InjectEventSecurityException e) {
android10-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:155:        } catch (InjectEventSecurityException e) {
android10-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:170:        } catch (InjectEventSecurityException e) {
android10-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:27:import androidx.test.espresso.InjectEventSecurityException;
android10-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:63:    public boolean injectKeyEvent(KeyEvent event) throws InjectEventSecurityException {
android10-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:68:    public boolean injectMotionEvent(MotionEvent event) throws InjectEventSecurityException {
android10-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:84:            throws InjectEventSecurityException {
android10-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:104:    public boolean injectString(String str) throws InjectEventSecurityException {
android10-security-release/core/tests/coretests/src/android/provider/DocumentsProviderTest.java:90:            fail("Expected a SecurityException to be throw");
android10-security-release/core/tests/coretests/src/android/provider/DocumentsProviderTest.java:91:        } catch (SecurityException expected) { }
android10-security-release/core/tests/coretests/src/android/app/DownloadManagerFunctionalTest.java:237:                fail("Failed to throw SecurityException when trying to write to /system.");
android10-security-release/core/tests/coretests/src/android/app/DownloadManagerFunctionalTest.java:238:            } catch (SecurityException s) {
android10-security-release/core/tests/coretests/src/android/app/activity/ServiceTest.java:226:        } catch (SecurityException e) {
android10-security-release/core/tests/coretests/src/android/app/activity/ServiceTest.java:367:        } catch (SecurityException e) {
android10-security-release/core/tests/coretests/src/android/app/activity/SetTimeZonePermissionsTest.java:59:            } catch (SecurityException se) {
android10-security-release/core/tests/coretests/src/android/os/storage/StorageManagerBaseTest.java:172:        } catch (SecurityException e) {
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:197:        public void voidSecurityException() {
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:198:            throw new SecurityException("gotcha!");
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:201:        public int intSecurityException() {
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:202:            throw new SecurityException("gotcha!");
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:400:    public void testVoidSecurityException() throws Exception {
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:403:            mRemote.voidSecurityException();
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:404:        } catch (SecurityException e) {
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:411:    public void testIntSecurityException() throws Exception {
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:414:            mRemote.intSecurityException();
android10-security-release/core/tests/coretests/src/android/os/AidlTest.java:415:        } catch (SecurityException e) {
android10-security-release/core/tests/coretests/src/android/os/IAidlTest.aidl:45:    void voidSecurityException();
android10-security-release/core/tests/coretests/src/android/os/IAidlTest.aidl:46:    int intSecurityException();
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:253:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:280:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:316:                getActivity().getPackageName(), BAD_APP_ID, mUserId), SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:337:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:363:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:386:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:423:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:441:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:455:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:458:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:475:                                mUserId), SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:478:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:494:                mUserId), SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:514:                listener, mUserId), SecurityException.class);
android10-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:531:                SecurityException.class);
android10-security-release/core/tests/coretests/src/android/content/pm/CrossProfileAppsTest.java:112:    @Test(expected = SecurityException.class)
android10-security-release/core/tests/coretests/src/android/content/pm/CrossProfileAppsTest.java:113:    public void getProfileSwitchingLabel_securityException() {
android10-security-release/core/tests/coretests/src/android/content/pm/CrossProfileAppsTest.java:133:    @Test(expected = SecurityException.class)
android10-security-release/core/tests/coretests/src/android/content/pm/CrossProfileAppsTest.java:134:    public void getProfileSwitchingIcon_securityException() {
android10-security-release/core/tests/coretests/src/android/content/pm/PackageManagerTests.java:2243:        } catch (SecurityException e) {
android10-security-release/core/tests/coretests/src/android/net/NetworkRecommendationProviderTest.java:95:        Mockito.doThrow(new SecurityException())
android10-security-release/core/tests/coretests/src/android/net/NetworkRecommendationProviderTest.java:101:            fail("SecurityException expected.");
android10-security-release/core/tests/coretests/src/android/net/NetworkRecommendationProviderTest.java:102:        } catch (SecurityException e) {
android10-security-release/core/tests/coretests/src/com/android/internal/app/ChooserWrapperActivity.java:112:            throw new SecurityException("Test exception handling");
android10-security-release/core/tests/coretests/src/com/android/internal/app/ChooserActivityTest.java:721:    public void contentProviderThrowSecurityException() throws InterruptedException {
android10-security-release/core/tests/bugreports/src/android/server/bugreports/BugreportManagerTest.java:183:            fail("Expected cancelBugreport to throw SecurityException without DUMP permission");
android10-security-release/core/tests/bugreports/src/android/server/bugreports/BugreportManagerTest.java:184:        } catch (SecurityException expected) {
android10-security-release/core/tests/bugreports/src/android/server/bugreports/BugreportManagerTest.java:203:            fail("Expected startBugreport to throw SecurityException without DUMP permission");
android10-security-release/core/tests/bugreports/src/android/server/bugreports/BugreportManagerTest.java:204:        } catch (SecurityException expected) {
android10-security-release/core/tests/hosttests/test-apps/MultiDexLegacyTestServices/src/com/android/framework/multidexlegacytestservices/ReflectIntermediateClass.java:29:            SecurityException, NoSuchMethodException, IllegalArgumentException,
android10-security-release/services/core/java/com/android/server/TelephonyRegistry.java:143:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/TelephonyRegistry.java:635:            // Checks permission and throws SecurityException for disallowed operations. For pre-M
android10-security-release/services/core/java/com/android/server/TelephonyRegistry.java:1197:            throw new SecurityException("notifyCarrierNetworkChange without carrier privilege");
android10-security-release/services/core/java/com/android/server/TelephonyRegistry.java:2239:                    throw new SecurityException("Unable to listen for events " + events + " due to "
android10-security-release/services/core/java/com/android/server/IpSecService.java:464:                throw new SecurityException("Attempted access of unowned resources");
android10-security-release/services/core/java/com/android/server/IpSecService.java:1568:                throw new SecurityException("Request to ignore AppOps for non-legacy API");
android10-security-release/services/core/java/com/android/server/IpSecService.java:1696:            throw new SecurityException("Only the owner of an IpSec Transform may apply it!");
android10-security-release/services/core/java/com/android/server/wm/ActivityStackSupervisor.java:1043:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wm/LockTaskController.java:384:     * @throws SecurityException if the caller is not authorized to stop the lock task mode, i.e. if
android10-security-release/services/core/java/com/android/server/wm/LockTaskController.java:415:                throw new SecurityException("Invalid uid, expected " + task.mLockTaskUid
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:1203:            if (!(e instanceof SecurityException)) {
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:1682:                    throw new SecurityException("Package " + packageName + " not in UID "
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:1754:            throw new SecurityException("Only system can call refreshScreenCaptureDisabled.");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2444:            throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2474:            throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2516:            throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2543:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2568:            throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2808:            throw new SecurityException("Requires FREEZE_SCREEN permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2830:            throw new SecurityException("Requires FREEZE_SCREEN permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2853:            throw new SecurityException("Requires DISABLE_KEYGUARD permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2870:            throw new SecurityException("Requires DISABLE_KEYGUARD permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2889:            throw new SecurityException("Requires DISABLE_KEYGUARD permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2922:            throw new SecurityException("Requires INTERACT_ACROSS_USERS permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2943:            throw new SecurityException("Requires CONTROL_KEYGUARD permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2960:            throw new SecurityException("Requires INTERACT_ACROSS_USERS_FULL permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2989:            throw new SecurityException("Requires SET_ANIMATION_SCALE permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3007:            throw new SecurityException("Requires SET_ANIMATION_SCALE permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3550:            throw new SecurityException("Requires READ_FRAME_BUFFER permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3572:            throw new SecurityException("Requires READ_FRAME_BUFFER permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3647:            throw new SecurityException("Requires SET_ORIENTATION permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3684:            throw new SecurityException("Requires SET_ORIENTATION permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3921:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:4368:            throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5026:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5046:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5113:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5156:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5179:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5246:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5658:            throw new SecurityException("Caller does not hold permission "
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5681:            throw new SecurityException("Caller does not hold permission "
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5699:            throw new SecurityException("Caller does not hold permission "
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5711:            throw new SecurityException("Caller does not hold permission "
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5783:            throw new SecurityException("getCurrentImeTouchRegion is restricted to VR services");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5830:            throw new SecurityException("Requires FRAME_STATS permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5849:            throw new SecurityException("Requires FRAME_STATS permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6653:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6762:            throw new SecurityException("The caller doesn't own the display.");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6854:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6871:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6908:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6925:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6945:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6963:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6984:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7004:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7015:                throw new SecurityException("Attempted to set system decors flag to an untrusted "
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7028:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7049:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7060:                throw new SecurityException("Attempted to set IME flag to an untrusted "
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7074:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7084:            throw new SecurityException("Requires USER_ACTIVITY permission");
android10-security-release/services/core/java/com/android/server/wm/Session.java:137:            if (!(e instanceof SecurityException)) {
android10-security-release/services/core/java/com/android/server/wm/AppTaskImpl.java:52:            throw new SecurityException("Caller " + mCallingUid
android10-security-release/services/core/java/com/android/server/wm/AppTaskImpl.java:104:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:100:    ActivityOptions getOptions(ActivityRecord r) throws SecurityException {
android10-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:108:    ActivityOptions getOptions(ActivityStackSupervisor supervisor) throws SecurityException {
android10-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:121:            ActivityStackSupervisor supervisor) throws SecurityException {
android10-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:203:                throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:217:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:228:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:240:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wm/ViewServer.java:132:                } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1265:            throw new SecurityException("Only the system process can request a permission token, "
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1303:                throw new SecurityException("Must be called from an activity");
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1318:                        throw new SecurityException("Called with expired permission token: "
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1321:                        throw new SecurityException("Called with invalid permission token: "
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1332:                throw new SecurityException("Called with bad activity token: " + sourceToken);
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1335:                throw new SecurityException("Called without a process attached to activity");
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1341:                throw new SecurityException("Must be called from an activity that is "
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1349:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1357:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1361:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1392:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1394:            // A SecurityException here is generally actually a fault of the original
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1505:     *         no {@link SecurityException} will be thrown, {@code false} otherwise.
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:2363:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:3171:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:3298:            throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:4356:                throw new SecurityException("Only focused activity can call startVoiceInteraction");
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:4728:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:5097:            throw new SecurityException("Isolated process not allowed to call " + caller);
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:6877:                    throw new SecurityException("Only privileged app can call notifyLockedProfile");
android10-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:6880:                throw new SecurityException("Fail to check is caller a privileged app", ex);
android10-security-release/services/core/java/com/android/server/notification/NotificationRecord.java:1241:     * {@link SecurityException} depending on target SDK of enqueuing app.
android10-security-release/services/core/java/com/android/server/notification/NotificationRecord.java:1252:            // This will throw SecurityException if caller can't grant
android10-security-release/services/core/java/com/android/server/notification/NotificationRecord.java:1262:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2021:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2059:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2466:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2558:                throw new SecurityException("Only available for notification listeners");
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2725:            throw new SecurityException("Pkg " + callingPkg
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2746:                throw new SecurityException("Not allowed to delete channel " + channelId
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2899:            throw new SecurityException("Pkg " + callingPkg
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2962:                    throw new SecurityException("Not currently an assistant");
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3168:                                throw new SecurityException("Disallowed call from listener: "
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3236:                            throw new SecurityException("Disallowed call from listener: "
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3667:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3690:                throw new SecurityException("Notification policy access denied");
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3702:                throw new SecurityException("Notification policy access denied");
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4150:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4164:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4197:                        throw new SecurityException(info + " does not have access");
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4202:                throw new SecurityException(info + " does not have access");
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4748:        // Can throw a SecurityException if the calling uid doesn't have permission to post
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:5053:        throw new SecurityException("Caller " + callingPkg + ":" + callingUid
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:5080:                    throw new SecurityException("Instant app " + pkg
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7201:        throw new SecurityException("Disallowed call for uid " + Binder.getCallingUid());
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7228:     * if so throw SecurityException
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7260:                throw new SecurityException("Unknown uid " + callingUid);
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7267:                throw new SecurityException("Unknown package " + pkg);
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7271:            throw new SecurityException("Unknown uid " + callingUid, re);
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7284:                throw new SecurityException("Unknown package " + pkg);
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7287:                throw new SecurityException("Calling uid " + uid + " gave package "
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7291:            throw new SecurityException("Unknown package " + pkg + "\n" + re);
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7299:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7308:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7393:        } catch (SecurityException se) {
android10-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7424:            throw new SecurityException("Could not talk to package manager service");
android10-security-release/services/core/java/com/android/server/notification/ManagedServices.java:663:        throw new SecurityException("Disallowed call from unknown " + getCaption() + ": "
android10-security-release/services/core/java/com/android/server/notification/ManagedServices.java:1177:        } catch (SecurityException ex) {
android10-security-release/services/core/java/com/android/server/notification/ZenModeHelper.java:350:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/notification/ZenModeHelper.java:370:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/notification/ZenModeHelper.java:856:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/SystemUpdateManagerService.java:119:            throw new SecurityException("Can't read system update info. Requiring "
android10-security-release/services/core/java/com/android/server/am/ProcessStatsService.java:117:            if (!(e instanceof SecurityException)) {
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:459:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:799:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:890:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:1299:                        throw new SecurityException("Instant app " + r.appInfo.packageName
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:1358:                        throw new SecurityException("Foreground not allowed as per app op");
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:1606:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:1648:            throw new SecurityException("Non-system caller (pid=" + Binder.getCallingPid()
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:1653:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:1659:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:2166:                            throw new SecurityException("BIND_EXTERNAL_SERVICE failed, "
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:2170:                            throw new SecurityException("BIND_EXTERNAL_SERVICE failed, "
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:2177:                            throw new SecurityException("BIND_EXTERNAL_SERVICE failed, " +
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:2190:                        throw new SecurityException("BIND_EXTERNAL_SERVICE required for " +
android10-security-release/services/core/java/com/android/server/am/ActiveServices.java:2194:                    throw new SecurityException("BIND_EXTERNAL_SERVICE failed, " + name +
android10-security-release/services/core/java/com/android/server/am/BroadcastQueue.java:1439:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/am/OomAdjuster.java:1812:                            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:2745:            if (!(e instanceof SecurityException
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:3133:            throw new SecurityException("Isolated process not allowed to call " + caller);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:3179:            throw new SecurityException("Only shell can call it");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:3568:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:3583:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4018:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4035:                    throw new SecurityException("PID " + pid + " does not have permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4145:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4185:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4220:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4242:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4336:            throw new SecurityException(callerUid + " cannot kill pkg: " +
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4504:            throw new SecurityException(callerUid + " cannot kill app process: " +
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5182:            throw new SecurityException("Invalid application interface");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5196:            throw new SecurityException();
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5415:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5427:            throw new SecurityException(e);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5922:        throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5936:        throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6159:                throw new SecurityException("Unable to find app for caller "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6191:                throw new SecurityException("Unable to find app for caller "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6378:            throw new SecurityException("updateDeviceOwner called from non-system process");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6729:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6786:                        throw new SecurityException("Content provider lookup "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6794:                        throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6820:                    throw new SecurityException("Content provider lookup "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6828:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6925:                    throw new SecurityException("Content provider lookup " + name
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6931:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7239:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7246:            throw new SecurityException("Given calling package " + callingPackage
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7355:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7756:            throw new SecurityException("Only the OS may call backgroundWhitelistUid()");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7903:            throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7999:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8030:                    throw new SecurityException("Process not debuggable: " + app.packageName);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8043:                    throw new SecurityException("Process not debuggable, "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8066:                throw new SecurityException("Process not debuggable: " + app.packageName);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8103:                    throw new SecurityException("Unknown process: " + callingPid);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8107:                    throw new SecurityException("Only an instrumentation process "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8131:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8337:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8361:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8448:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8665:            throw new SecurityException("killPids only available to the system");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8732:            throw new SecurityException("killProcessesBelowForeground() only available to system");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8740:            throw new SecurityException("killProcessesBelowAdj() only available to system");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8765:            throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8804:            throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8840:            throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8915:            throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:14010:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:14419:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:14427:                    throw new SecurityException("Given caller package " + callerPackage
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:14878:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:14902:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:14943:                throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:14955:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:14966:                        throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:15006:                        throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:15229:                throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:15237:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:15626:                throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:15753:                throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:15973:        throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16968:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17286:            throw new SecurityException("Only SIGNAL_USR1 is allowed");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17292:                throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17343:                    throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17454:                    throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17470:                        throw new SecurityException("Process not debuggable: " + proc);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17500:                    throw new SecurityException("No process found for calling pid "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17505:                    throw new SecurityException("Not running a debuggable build");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17510:                    throw new SecurityException("Package " + reportPackage + " is not running in "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17618:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17632:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17691:                throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17718:                    throw new SecurityException("Requires permission "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18539:            throw new SecurityException("Requires permission " + FILTER_EVENTS);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18565:            throw new SecurityException("Requires permission " + FILTER_EVENTS);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18798:                        throw new SecurityException("Process not debuggable: " + proc);
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18857:            throw new SecurityException("Only the shell can delegate its permissions");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18876:                    throw new SecurityException("Shell can delegate permissions only "
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18891:                    throw new SecurityException("Shell can delegate its permissions" +
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18909:            throw new SecurityException("Only the shell can delegate its permissions");
android10-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:19056:            throw new SecurityException("Only shell can call it");
android10-security-release/services/core/java/com/android/server/am/PendingIntentController.java:225:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/PendingIntentController.java:228:                throw new SecurityException(e);
android10-security-release/services/core/java/com/android/server/am/UserController.java:617:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/UserController.java:1022:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/UserController.java:1238:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/UserController.java:1647:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/UserController.java:1657:                throw new SecurityException("Shell does not have permission to access user "
android10-security-release/services/core/java/com/android/server/am/UserController.java:1685:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/UserController.java:1856:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/am/UserController.java:1936:                throw new SecurityException("Shell does not have permission to access user "
android10-security-release/services/core/java/com/android/server/LocationManagerService.java:1896:            throw new SecurityException("Geofence usage requires ACCESS_FINE_LOCATION permission");
android10-security-release/services/core/java/com/android/server/LocationManagerService.java:1937:                    throw new SecurityException("\"" + providerName + "\" location provider " +
android10-security-release/services/core/java/com/android/server/LocationManagerService.java:1940:                    throw new SecurityException("\"" + providerName + "\" location provider " +
android10-security-release/services/core/java/com/android/server/LocationManagerService.java:1943:                    throw new SecurityException("Insufficient permission for \"" + providerName +
android10-security-release/services/core/java/com/android/server/LocationManagerService.java:2480:            throw new SecurityException("invalid package name: " + null);
android10-security-release/services/core/java/com/android/server/LocationManagerService.java:2485:            throw new SecurityException("invalid UID " + uid);
android10-security-release/services/core/java/com/android/server/LocationManagerService.java:2490:        throw new SecurityException("invalid package name: " + packageName);
android10-security-release/services/core/java/com/android/server/LocationManagerService.java:3117:                throw new SecurityException("Requires ACCESS_LOCATION_EXTRA_COMMANDS permission");
android10-security-release/services/core/java/com/android/server/LocationManagerService.java:3137:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/NetworkScoreService.java:449:            throw new SecurityException("Caller with UID " + getCallingUid() +
android10-security-release/services/core/java/com/android/server/NetworkScoreService.java:736:    private void enforceSystemOnly() throws SecurityException {
android10-security-release/services/core/java/com/android/server/NetworkScoreService.java:742:    private void enforceSystemOrHasScoreNetworks() throws SecurityException {
android10-security-release/services/core/java/com/android/server/NetworkScoreService.java:747:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/NetworkScoreService.java:752:    private void enforceSystemOrIsActiveScorer(int callingUid) throws SecurityException {
android10-security-release/services/core/java/com/android/server/NetworkScoreService.java:756:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/DeviceIdleController.java:2378:                    throw new SecurityException("Calling app " + UserHandle.formatUid(callingUid)
android10-security-release/services/core/java/com/android/server/rollback/RollbackManagerServiceImpl.java:1055:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/rollback/RollbackManagerServiceImpl.java:1135:            throw new SecurityException("notifyStagedSession may only be called by the system.");
android10-security-release/services/core/java/com/android/server/rollback/RollbackManagerServiceImpl.java:1195:            throw new SecurityException("notifyStagedApkSession may only be called by the system.");
android10-security-release/services/core/java/com/android/server/rollback/RollbackManagerServiceImpl.java:1520:            throw new SecurityException(message + " requires "
android10-security-release/services/core/java/com/android/server/NetworkManagementService.java:1933:            throw new SecurityException("Only available to AID_SYSTEM");
android10-security-release/services/core/java/com/android/server/incident/PendingReports.java:458:        } catch (SecurityException ex) {
android10-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:355:         * Throw a SecurityException if the incoming binder call is not from pkg.
android10-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:357:        private void enforceCallerIsSameApp(String pkg) throws SecurityException {
android10-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:364:                    throw new SecurityException("Unknown package " + pkg);
android10-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:367:                    throw new SecurityException("Calling uid " + uid + " gave package "
android10-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:371:                throw new SecurityException("Unknown package " + pkg + "\n" + re);
android10-security-release/services/core/java/com/android/server/locksettings/recoverablekeystore/KeySyncTask.java:41:import java.security.GeneralSecurityException;
android10-security-release/services/core/java/com/android/server/locksettings/recoverablekeystore/KeySyncTask.java:266:        } catch (GeneralSecurityException e) {
android10-security-release/services/core/java/com/android/server/locksettings/recoverablekeystore/PlatformKeyManager.java:96:     * @throws SecurityException if the caller does not have permission to write to /data/system.
android10-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:939:                throw new SecurityException("uid=" + callingUid
android10-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:949:                throw new SecurityException("uid=" + callingUid
android10-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:2132:            throw new SecurityException("Caller must be shell");
android10-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:2784:                    throw new SecurityException("Escrow token is disabled on the current user");
android10-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:2843:                throw new SecurityException("Escrow token is disabled on the current user");
android10-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:2898:                throw new SecurityException("Escrow token is disabled on the current user");
android10-security-release/services/core/java/com/android/server/power/ShutdownThread.java:376:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/power/ShutdownThread.java:389:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/power/PowerManagerService.java:4366:                // request instead of throwing a SecurityException so we don't break old apps.
android10-security-release/services/core/java/com/android/server/MasterClearReceiver.java:79:                } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/ConsumerIrService.java:74:            throw new SecurityException("Requires TRANSMIT_IR permission");
android10-security-release/services/core/java/com/android/server/ConsumerIrService.java:106:            throw new SecurityException("Requires TRANSMIT_IR permission");
android10-security-release/services/core/java/com/android/server/security/VerityUtils.java:106:            throw new SecurityException("fs-verity measurement mismatch: "
android10-security-release/services/core/java/com/android/server/security/VerityUtils.java:163:        } catch (IOException | SecurityException | DigestException | NoSuchAlgorithmException |
android10-security-release/services/core/java/com/android/server/security/VerityUtils.java:297:            throw new SecurityException("verity hash mismatch: "
android10-security-release/services/core/java/com/android/server/security/VerityUtils.java:307:            throw new SecurityException("Failed to set up shared memory correctly");
android10-security-release/services/core/java/com/android/server/security/VerityUtils.java:381:                    throw new SecurityException("Failed to set protection");
android10-security-release/services/core/java/com/android/server/security/VerityUtils.java:386:                throw new SecurityException("Failed to set protection", e);
android10-security-release/services/core/java/com/android/server/security/KeyAttestationApplicationIdProviderService.java:50:            throw new SecurityException("This service can only be used by Keystore");
android10-security-release/services/core/java/com/android/server/adb/AdbService.java:222:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/adb/AdbDebuggingManager.java:626:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:533:            throw new SecurityException("Illegal access to the session with token " + sessionToken
android10-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:940:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:960:                throw new SecurityException("The caller: " + getCallingPackageName()
android10-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:1152:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:1241:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:1768:                throw new SecurityException("Requires DVB_DEVICE permission");
android10-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:1823:                throw new SecurityException("Requires DVB_DEVICE permission");
android10-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:1976:                throw new SecurityException("Requires CAPTURE_TV_INPUT permission");
android10-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:2372:                throw new SecurityException("The caller does not have hardware permission");
android10-security-release/services/core/java/com/android/server/tv/TvRemoteProviderProxy.java:155:            } catch (SecurityException ex) {
android10-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2615:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2656:                        throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2672:                        throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2782:            throw new SecurityException("Access denied to process: " + Binder.getCallingPid()
android10-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2816:            throw new SecurityException("Only the system may call isWallpaperBackupEligible");
android10-security-release/services/core/java/com/android/server/trust/TrustAgentWrapper.java:306:                throw  new SecurityException("Escrow token API is not allowed.");
android10-security-release/services/core/java/com/android/server/trust/TrustAgentWrapper.java:320:                throw new SecurityException("Escrow token API is not allowed.");
android10-security-release/services/core/java/com/android/server/trust/TrustAgentWrapper.java:334:                throw new SecurityException("Escrow token API is not allowed.");
android10-security-release/services/core/java/com/android/server/trust/TrustAgentWrapper.java:348:                throw new SecurityException("Escrow token API is not allowed.");
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:162:import java.security.GeneralSecurityException;
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:1490:            throw new SecurityException("Only admin users can adopt sd cards");
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:1801:            throw new SecurityException("Mounting " + volId + " restricted by policy");
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:2529:            throw new SecurityException("no permission to access the crypt keeper");
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:2642:            throw new SecurityException("no permission to check filesystem checkpoint support");
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:2659:            throw new SecurityException("no permission to start filesystem checkpoint");
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:2672:            throw new SecurityException("no permission to commit checkpoint changes");
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:2694:            throw new SecurityException("no permission to commit checkpoint changes");
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:3009:        throw new SecurityException("Invalid mkdirs path: " + appFile);
android10-security-release/services/core/java/com/android/server/StorageManagerService.java:3490:                } catch (GeneralSecurityException e) {
android10-security-release/services/core/java/com/android/server/VibratorService.java:558:                throw new SecurityException("Requires VIBRATE permission");
android10-security-release/services/core/java/com/android/server/VibratorService.java:743:                    // want to throw a SecurityException here.
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:198:                    throw new SecurityException("nice try");
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:226:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:230:            throw new SecurityException("Failed to verify package name ownership");
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:327:                throw new SecurityException("No persistable permission grants found for UID "
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:386:                throw new SecurityException("No permission grants found for UID " + uid
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:989:            throw new SecurityException("Isolated process not allowed to call " + caller);
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:1145:                throw new SecurityException("Provider " + pi.packageName
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:1161:                    throw new SecurityException("Provider " + pi.packageName
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:1174:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:1179:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/signedconfig/GlobalSettingsConfigApplicator.java:28:import java.security.GeneralSecurityException;
android10-security-release/services/core/java/com/android/server/signedconfig/GlobalSettingsConfigApplicator.java:83:        } catch (GeneralSecurityException e) {
android10-security-release/services/core/java/com/android/server/MmsServiceBroker.java:244:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/vr/VrManagerService.java:687:     * Throws SecurityException if none of the specified permissions are held.
android10-security-release/services/core/java/com/android/server/vr/VrManagerService.java:698:        throw new SecurityException("Caller does not hold at least one of the permissions: "
android10-security-release/services/core/java/com/android/server/policy/PhoneWindowManager.java:2157:        // check if user has enabled this operation. SecurityException will be thrown if this app
android10-security-release/services/core/java/com/android/server/utils/ManagedApplicationService.java:402:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:116:import java.security.GeneralSecurityException;
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:471:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:500:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:555:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:604:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:769:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1077:            if (!(e instanceof SecurityException)) {
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1462:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1543:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1572:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1624:            throw new SecurityException("Calling copyAccountToUser requires "
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1694:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1976:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2131:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2150:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2215:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2503:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2536:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2562:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2628:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2656:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2740:            throw new SecurityException("can only call from system");
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2848:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3222:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3468:                } catch (GeneralSecurityException e) {
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3508:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3559:        } catch (GeneralSecurityException e) {
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3665:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3903:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3930:            throw new SecurityException("Can be called only by system UID");
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:4005:            throw new SecurityException("Can be called only by system UID");
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:4072:            throw new SecurityException("Only system can check for accounts across users");
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:4300:            throw new SecurityException("User " + UserHandle.getCallingUserId()
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:4453:            throw new SecurityException("getAccountsForPackage() called from unauthorized uid "
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:5600:            throw new SecurityException("You need MANAGE_USERS permission to: " + message);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:5609:            throw new SecurityException("You need MANAGE_USERS or CREATE_USERS permission to: "
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:5686:            throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:5734:            throw new SecurityException();
android10-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:11:import java.security.GeneralSecurityException;
android10-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:56:    /* default */ Bundle encryptBundle(@NonNull Bundle bundle) throws GeneralSecurityException {
android10-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:78:    /* default */ Bundle decryptBundle(@NonNull Bundle bundle) throws GeneralSecurityException {
android10-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:103:            throws GeneralSecurityException {
android10-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:115:    private byte[] createMac(@NonNull byte[] cipher, @NonNull byte[] iv) throws GeneralSecurityException {
android10-security-release/services/core/java/com/android/server/broadcastradio/BroadcastRadioService.java:71:                throw new SecurityException("ACCESS_BROADCAST_RADIO permission not granted");
android10-security-release/services/core/java/com/android/server/dreams/DreamManagerService.java:426:            throw new SecurityException("Access denied to process: " + Binder.getCallingPid()
android10-security-release/services/core/java/com/android/server/dreams/DreamController.java:162:            } catch (SecurityException ex) {
android10-security-release/services/core/java/com/android/server/oemlock/VendorLock.java:99:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/oemlock/OemLockService.java:168:                    throw new SecurityException("Admin does not allow OEM unlock");
android10-security-release/services/core/java/com/android/server/oemlock/OemLockService.java:172:                    throw new SecurityException("Carrier does not allow OEM unlock");
android10-security-release/services/core/java/com/android/server/oemlock/OemLockService.java:264:            throw new SecurityException("Can't access OEM unlock state. Requires "
android10-security-release/services/core/java/com/android/server/oemlock/OemLockService.java:274:                throw new SecurityException("Must be an admin user");
android10-security-release/services/core/java/com/android/server/timezone/PermissionHelper.java:26:    void enforceCallerHasPermission(String requiredPermission) throws SecurityException;
android10-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:73:            throws SecurityException {
android10-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:83:    public CpuUsageInfo[] getCpuUsages(String callingPackage) throws SecurityException {
android10-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:93:    public float[] getFanSpeeds(String callingPackage) throws SecurityException {
android10-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:152:     * Throws SecurityException if the calling package is not allowed to retrieve information
android10-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:157:     * @throws SecurityException if something other than the device owner, the current VR service,
android10-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:162:            throws SecurityException {
android10-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:171:            throw new SecurityException("The caller is neither a device owner"
android10-security-release/services/core/java/com/android/server/SensorPrivacyService.java:130:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/DynamicSystemService.java:109:            throw new SecurityException("Requires MANAGE_DYNAMIC_SYSTEM permission");
android10-security-release/services/core/java/com/android/server/ConnectivityService.java:1648:        // TODO: start throwing a SecurityException when GnssLocationProvider stops calling
android10-security-release/services/core/java/com/android/server/ConnectivityService.java:1923:            throw new SecurityException("Requires one of the following permissions: "
android10-security-release/services/core/java/com/android/server/ConnectivityService.java:2007:        } catch (SecurityException e) { /* fallback to ConnectivityInternalPermission */ }
android10-security-release/services/core/java/com/android/server/ConnectivityService.java:3554:            throw new SecurityException("avoidBadWifi requires NETWORK_STACK permission");
android10-security-release/services/core/java/com/android/server/ConnectivityService.java:5050:            throw new SecurityException("Insufficient permissions to request a specific SSID");
android10-security-release/services/core/java/com/android/server/ConnectivityService.java:5055:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/ConnectivityService.java:5259:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/ConnectivityService.java:7103:        throw new SecurityException("App must either be an active VPN or have the NETWORK_STACK "
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:583:            throw new SecurityException(cookie + " not allowed after sealing");
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:591:            throw new SecurityException(cookie + " not allowed after commit");
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:601:            throw new SecurityException(cookie + " not allowed after destruction");
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:782:                        throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:858:     * {@link SecurityException}.
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:864:            throw new SecurityException("Session does not belong to uid " + callingUid);
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:869:     * If anybody is reading or writing data of the session, throw an {@link SecurityException}.
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:876:                throw new SecurityException("Files still open");
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:881:                throw new SecurityException("Files still open");
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1236:            throw new SecurityException("Destination package " + packageName + " does not have "
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1243:            throw new SecurityException("Can only transfer sessions that use public options");
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1265:                throw new SecurityException("Can only transfer sessions that update the original "
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:2023:            throw new SecurityException("Must be sealed to accept permissions");
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:2129:     * {@link SecurityException}.
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:2136:            throw new SecurityException("Session does not belong to uid " + callingUid);
android10-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:295:         * @throws SecurityException if the calling user and {@code targetUser} are not in the same
android10-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:334:                throw new SecurityException("Calling package name mismatch");
android10-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:641:                throw new SecurityException("Caller is not the recents app");
android10-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:657:                throw new SecurityException("Caller can't access shortcut information");
android10-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:766:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:768:                    Slog.d(TAG, "SecurityException while launching intent", e);
android10-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:859:                            throw new SecurityException("Cannot launch non-exported components "
android10-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:872:                    throw new SecurityException("Attempt to launch activity without "
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:524:            throw new SecurityException("User restriction prevents installing");
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:581:                throw new SecurityException("You need the "
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:689:                throw new SecurityException("Caller has no access to session " + sessionId);
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:715:                throw new SecurityException("Caller has no access to session " + sessionId);
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:727:                throw new SecurityException("Caller has no access to session " + sessionId);
android10-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:746:                throw new SecurityException("Caller has no access to session " + sessionId);
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:891:            throw new SecurityException("MANAGE_USERS permission is required to start intent "
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:910:        throw new SecurityException("Can't modify quiet mode, caller is neither foreground "
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1149:            throw new SecurityException("You need MANAGE_USERS or GET_ACCOUNTS_PRIVILEGED "
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1190:            throw new SecurityException("You need INTERACT_ACROSS_USERS or MANAGE_USERS permission "
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1199:            throw new SecurityException("You need MANAGE_USERS permission to query if u=" + userId
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1346:            throw new SecurityException("You need MANAGE_USERS or GET_ACCOUNTS_PRIVILEGED "
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1875:     * @param message used as message if SecurityException is thrown
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1876:     * @throws SecurityException if the caller does not have enough privilege.
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1892:        throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1907:     * @param message used as message if SecurityException is thrown
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1908:     * @throws SecurityException if the caller is not system or root
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1913:            throw new SecurityException("You need MANAGE_USERS permission to: " + message);
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1923:     * @param message used as message if SecurityException is thrown
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1924:     * @throws SecurityException if the caller is not system or root
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1929:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1943:                throw new SecurityException("You either need MANAGE_USERS or CREATE_USERS "
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1947:            throw new SecurityException("You need MANAGE_USERS permission to create an user "
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1988:     * @param message used as message if SecurityException is thrown
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1989:     * @throws SecurityException if the caller is not system or root
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1994:            throw new SecurityException("Only system may: " + message);
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:3415:            throw new SecurityException("userHandle can only be the calling user or a managed "
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4051:                boolean throwSecurityException) {
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4058:                    if (throwSecurityException) {
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4059:                        throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4069:                    if (throwSecurityException) {
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4078:                    if (throwSecurityException) {
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4079:                        throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4204:     * {@link SecurityException} if not.
android10-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4209:            throw new SecurityException("Specified package " + callingPackage
android10-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:106:            throw new SecurityException(callingPackage + " cannot access unrelated user " + userId);
android10-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:111:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:136:                    throw new SecurityException("Attempt to launch activity without required "
android10-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:217:            throw new SecurityException("Attempt to launch activity without "
android10-security-release/services/core/java/com/android/server/pm/Settings.java:4284:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionSettings.java:242:     * @throws SecurityException If the calling UID is not allowed to add permissions to the
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:640:                } catch (IllegalStateException | SecurityException e) {
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:933:            throw new SecurityException("Instant apps can't add permissions");
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:936:            throw new SecurityException("Label must be specified in permission");
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:950:                throw new SecurityException("Not allowed to modify non-dynamic permission "
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:967:            throw new SecurityException("Instant applications don't have access to this method");
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:976:                // TODO: switch this back to SecurityException
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:2298:            throw new SecurityException("Cannot grant non-ephemeral permission"
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:2399:            throw new SecurityException("Non-System UID cannot revoke system fixed permission "
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:2403:            throw new SecurityException("Cannot revoke policy fixed permission "
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:2928:            throw new SecurityException("updatePermissionFlags requires "
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:3021:            throw new SecurityException(message + " requires "
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:3034:            throw new SecurityException(message + " requires "
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:3066:                } catch (SecurityException se) {
android10-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:3090:                throw new SecurityException("Permission tree size cap exceeded");
android10-security-release/services/core/java/com/android/server/pm/permission/BasePermission.java:431:                throw new SecurityException("Calling uid " + callingUid
android10-security-release/services/core/java/com/android/server/pm/permission/BasePermission.java:436:        throw new SecurityException("No permission tree found for " + permName);
android10-security-release/services/core/java/com/android/server/pm/permission/BasePermission.java:444:            throw new SecurityException("Package " + pkg.packageName
android10-security-release/services/core/java/com/android/server/pm/permission/BasePermission.java:448:            throw new SecurityException("Permission " + name
android10-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1522:            throw new SecurityException("Caller must be system or shell");
android10-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1528:            throw new SecurityException("Caller must be shell");
android10-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1534:            throw new SecurityException("Caller must be system");
android10-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1575:            throw new SecurityException("Invalid user-ID");
android10-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1578:            throw new SecurityException("Calling package name mismatch");
android10-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1590:            throw new SecurityException("Shortcut package name mismatch");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4006:            if (!(e instanceof SecurityException) && !(e instanceof IllegalArgumentException)) {
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4141:            throw new SecurityException("Instant applications don't have access to this method");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4147:                throw new SecurityException("Package " + packageName + " was not found!");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4151:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4156:                throw new SecurityException("Package " + packageName + " not a system app!");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4160:                throw new SecurityException("Package " + packageName + " is currently frozen!");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4164:                throw new SecurityException("Package " + packageName + " is not encryption aware!");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:5882:                throw new SecurityException("Querying system whitelist requires "
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:5889:                    throw new SecurityException("Querying upgrade or installer whitelist"
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:5946:                throw new SecurityException("Cannot modify whitelisting of an immutably "
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:6011:                throw new SecurityException("Modifying system whitelist requires "
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:6017:                    throw new SecurityException("Modifying upgrade whitelist requires"
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:6034:                            throw new SecurityException("Adding to upgrade whitelist requires"
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:6043:                    throw new SecurityException("Modifying installer whitelist requires"
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:6121:            throw new SecurityException("Instant applications don't have access to this method");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:6610:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9562:     * @param message used as message if SecurityException is thrown
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9563:     * @throws SecurityException if the caller is not system or root
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9568:            throw new SecurityException(message);
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9576:     * @param message used as message if SecurityException is thrown
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9577:     * @throws SecurityException if the caller is not system or shell
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9582:            throw new SecurityException(message);
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:10242:            throw new SecurityException("dumpProfiles");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13521:            throw new SecurityException("Neither user " + callingUid + " nor current process has "
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13660:            throw new SecurityException("Calling uid " + callingUid + " cannot call for user "
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13734:            throw new SecurityException("Calling package " + callingPackage + " in user "
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13804:            throw new SecurityException("Calling package " + packageName
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13935:            throw new SecurityException("Calling uid " + callingUid
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14300:                    } catch (SecurityException ignore) { }
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14531:                    throw new SecurityException("Bad object " + obj + " for uid " + callingUid);
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14534:                throw new SecurityException("Unknown calling UID: " + callingUid);
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14543:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14560:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14572:                    throw new SecurityException("Neither user " + callingUid
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14593:            throw new SecurityException("Instant applications don't have access to this method");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:18038:                            | SecurityException e) {
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:18591:            throw new SecurityException(android.Manifest.permission.MANAGE_USERS
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:19784:            throw new SecurityException("Cannot clear data for a protected package: "
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20581:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20606:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20691:            throw new SecurityException("Only the system may call getPreferredActivityBackup()");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20721:            throw new SecurityException("Only the system may call restorePreferredActivities()");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20749:            throw new SecurityException("Only the system may call getDefaultAppsBackup()");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20779:            throw new SecurityException("Only the system may call restoreDefaultApps()");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20810:            throw new SecurityException("Only the system may call getIntentFilterVerificationBackup()");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20840:            throw new SecurityException("Only the system may call restorePreferredActivities()");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20928:            throw new SecurityException("Calling uid " + callingUid
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:21358:                    // throw SecurityException to prevent leaking package information
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:21359:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:21375:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:21385:                throw new SecurityException("Cannot disable a protected package: " + packageName);
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:21392:            throw new SecurityException("Cannot disable a system-generated component");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:21412:                    throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:23954:                throw new SecurityException("May not access signing KeySet of other apps.");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25080:                throw new SecurityException("Not allowed to uninstall apexes");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25310:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25401:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25418:                throw new SecurityException("Need to declare " + appOpPermission
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25545:            throw new SecurityException("Caller must have the "
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25566:            throw new SecurityException("Caller must have the "
android10-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25585:            throw new SecurityException("Caller must have the "
android10-security-release/services/core/java/com/android/server/pm/ShortcutRequestPinProcessor.java:110:                throw new SecurityException("Calling uid mismatch");
android10-security-release/services/core/java/com/android/server/pm/PackageManagerServiceUtils.java:382:                throw new SecurityException("Shell does not have permission to access user "
android10-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:606:                throw new SecurityException("The calling process has already "
android10-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:1940:                throw new SecurityException("packageName must match the calling uid");
android10-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:1972:                        throw new SecurityException("Invalid media projection");
android10-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:1976:                    throw new SecurityException("unable to validate media projection or flags");
android10-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:1983:                    throw new SecurityException("Requires CAPTURE_VIDEO_OUTPUT or "
android10-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:1991:                    throw new SecurityException("Requires CAPTURE_SECURE_VIDEO_OUTPUT "
android10-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:2005:                    throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android10-security-release/services/core/java/com/android/server/display/color/ColorDisplayService.java:1393:                throw new SecurityException("Permission required to set display saturation level");
android10-security-release/services/core/java/com/android/server/webkit/WebViewUpdateService.java:210:                throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/webkit/WebViewUpdateService.java:258:                throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/audio/AudioService.java:2066:            throw new SecurityException("Missing MODIFY_AUDIO_ROUTING permission");
android10-security-release/services/core/java/com/android/server/audio/AudioService.java:2303:            throw new SecurityException("Not allowed to change Do Not Disturb state");
android10-security-release/services/core/java/com/android/server/audio/AudioService.java:2903:            throw new SecurityException("Not allowed to change Do Not Disturb state");
android10-security-release/services/core/java/com/android/server/audio/AudioService.java:3983:            throw new SecurityException("Not allowed to change Do Not Disturb state");
android10-security-release/services/core/java/com/android/server/audio/AudioService.java:7524:            throw new SecurityException("Not allowed to monitor audioserver state");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:516:            throw new SecurityException("Requires MONITOR_INPUT permission");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:641:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:685:            throw new SecurityException("Requires DISABLE_INPUT_DEVICE permission");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:695:            throw new SecurityException("Requires DISABLE_INPUT_DEVICE permission");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:735:                throw new SecurityException("The calling process has already "
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:939:            throw new SecurityException("Requires SET_INPUT_CALIBRATION permission");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:967:            throw new SecurityException("Requires TABLET_MODE permission");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:976:            throw new SecurityException("Requires TABLET_MODE_LISTENER permission");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:1351:            throw new SecurityException("Requires SET_KEYBOARD_LAYOUT permission");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:1390:            throw new SecurityException("Requires SET_KEYBOARD_LAYOUT permission");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:1419:            throw new SecurityException("Requires SET_KEYBOARD_LAYOUT permission");
android10-security-release/services/core/java/com/android/server/input/InputManagerService.java:1540:            throw new SecurityException("Requires SET_POINTER_SPEED permission");
android10-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:833:         * @param message message for any SecurityException
android10-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:844:         * @param message used as message if SecurityException is thrown
android10-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:845:         * @throws SecurityException if the permission check fails
android10-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:855:         * @param message used as message if SecurityException is thrown
android10-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:856:         * @throws SecurityException if the permission check fails
android10-security-release/services/core/java/com/android/server/TestNetworkService.java:344:            throw new SecurityException("Attempted to modify other user's test networks");
android10-security-release/services/core/java/com/android/server/job/JobSchedulerShellCommand.java:89:            throw new SecurityException("Uid " + uid
android10-security-release/services/core/java/com/android/server/job/JobSchedulerService.java:1043:            // This may throw a SecurityException.
android10-security-release/services/core/java/com/android/server/job/JobSchedulerService.java:1812:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/job/JobSchedulerService.java:1820:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/job/JobSchedulerService.java:2709:                    throw new SecurityException("Job has invalid flags");
android10-security-release/services/core/java/com/android/server/job/JobSchedulerService.java:2791:                throw new SecurityException("Caller uid " + callerUid
android10-security-release/services/core/java/com/android/server/job/JobSchedulerService.java:2922:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/job/JobSchedulerService.java:2951:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/job/JobServiceContext.java:256:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/job/JobServiceContext.java:258:                // android:singleUser, can result in a SecurityException being thrown from
android10-security-release/services/core/java/com/android/server/job/JobServiceContext.java:493:            throw new SecurityException(sb.toString());
android10-security-release/services/core/java/com/android/server/infra/AbstractPerUserSystemService.java:87:     * @throws SecurityException if the service does not have the proper permissions to be bound to.
android10-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:283:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android10-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:311:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android10-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:329:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android10-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:361:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android10-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:395:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android10-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:419:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android10-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:438:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android10-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:654:     * @throws SecurityException when it's not...
android10-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:665:        throw new SecurityException("UID " + uid + " does not own " + packageName);
android10-security-release/services/core/java/com/android/server/stats/StatsCompanionService.java:1606:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/stats/StatsCompanionService.java:1645:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodUtils.java:735:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:1596:            if (!(e instanceof SecurityException)) {
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:1897:                    throw new SecurityException("uid=" + callerUid + "/pid=" + callerPid
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:1909:            // a fake display ID. Unconditionally returning SecurityException just because the
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:3213:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:3480:            throw new SecurityException("The caller doesn't own the display.");
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:3496:                    throw new SecurityException("Only the owner client can clear"
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:3510:                    throw new SecurityException(cs + " cannot access to display #"
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:3603:                throw new SecurityException(
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:4524:            // content URI and/or contentUriOwnerUserId just results in a SecurityException thrown
android10-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:4669:            throw new SecurityException(errorMsg);
android10-security-release/services/core/java/com/android/server/os/BugreportManagerServiceImpl.java:93:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/biometrics/BiometricServiceBase.java:185:     * Checks if the caller has permission to use the biometric service - throws a SecurityException
android10-security-release/services/core/java/com/android/server/biometrics/BiometricService.java:833:            throw new SecurityException("Permission denied");
android10-security-release/services/core/java/com/android/server/biometrics/face/FaceService.java:465:            // unexpected SecurityException this method does not check whether its caller is
android10-security-release/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java:416:            // unexpected SecurityException this method does not check whether its caller is
android10-security-release/services/core/java/com/android/server/appop/AppOpsService.java:1919:            throw new SecurityException("Could not talk to package manager service");
android10-security-release/services/core/java/com/android/server/appop/AppOpsService.java:4312:                throw new SecurityException("Need INTERACT_ACROSS_USERS_FULL or"
android10-security-release/services/core/java/com/android/server/appop/AppOpsService.java:4451:            throw new SecurityException(function + " must by called by the system");
android10-security-release/services/core/java/com/android/server/slice/SliceManagerService.java:288:            throw new SecurityException("Caller must be system");
android10-security-release/services/core/java/com/android/server/slice/SliceManagerService.java:313:            throw new SecurityException("Caller must be system");
android10-security-release/services/core/java/com/android/server/slice/SliceManagerService.java:343:            throw new SecurityException("Caller must own " + uri);
android10-security-release/services/core/java/com/android/server/slice/SliceManagerService.java:422:                throw new SecurityException("Access to slice " + uri + " is required");
android10-security-release/services/core/java/com/android/server/connectivity/IpConnectivityMetrics.java:317:                throw new SecurityException(String.format("Uid %d has no permission to listen for"
android10-security-release/services/core/java/com/android/server/connectivity/KeepaliveTracker.java:182:                        throw new SecurityException(
android10-security-release/services/core/java/com/android/server/connectivity/KeepaliveTracker.java:630:        } catch (InvalidSocketException | IllegalArgumentException | SecurityException e) {
android10-security-release/services/core/java/com/android/server/connectivity/KeepaliveTracker.java:670:        } catch (InvalidSocketException | IllegalArgumentException | SecurityException e) {
android10-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1049:                throw new SecurityException("Restricted users cannot establish VPNs");
android10-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1055:                throw new SecurityException("Cannot find " + config.user);
android10-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1058:                throw new SecurityException(config.user + " does not require " + BIND_VPN_SERVICE);
android10-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1061:            throw new SecurityException("Cannot find " + config.user);
android10-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1738:            throw new SecurityException("Restricted users cannot establish VPNs");
android10-security-release/services/core/java/com/android/server/BluetoothManagerService.java:886:            throw new SecurityException("no permission to enable Bluetooth quietly");
android10-security-release/services/core/java/com/android/server/BluetoothManagerService.java:994:                throw new SecurityException("Package " + packageName
android10-security-release/services/core/java/com/android/server/BluetoothManagerService.java:1032:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/BluetoothManagerService.java:1034:            throw new SecurityException(e.getMessage());
android10-security-release/services/core/java/com/android/server/content/ContentService.java:344:                throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/content/ContentService.java:411:                throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/content/ContentService.java:1268:                    throw new SecurityException("No access to " + uri + ": neither user " + uid
android10-security-release/services/core/java/com/android/server/content/ContentService.java:1311:                    throw new SecurityException(msg);
android10-security-release/services/core/java/com/android/server/content/ContentService.java:1641:            throw new SecurityException("Non-shell user attempted to call " + method);
android10-security-release/services/core/java/com/android/server/net/watchlist/NetworkWatchlistService.java:247:            throw new SecurityException(String.format("Uid %d has no permission to change watchlist"
android10-security-release/services/core/java/com/android/server/net/NetworkStatsObservers.java:415:            } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/net/NetworkStatsService.java:678:                    throw new SecurityException("Calling package " + mCallingPackage
android10-security-release/services/core/java/com/android/server/net/NetworkStatsCollection.java:246:            throw new SecurityException("Network stats history of uid " + uid
android10-security-release/services/core/java/com/android/server/net/NetworkPolicyManagerService.java:2756:        } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/net/NetworkPolicyManagerService.java:3274:            throw new SecurityException();
android10-security-release/services/core/java/com/android/server/media/MediaRouterService.java:230:            throw new SecurityException("packageName must match the calling uid");
android10-security-release/services/core/java/com/android/server/media/MediaSessionService.java:368:            throw new SecurityException("Must hold the MODIFY_PHONE_STATE permission.");
android10-security-release/services/core/java/com/android/server/media/MediaSessionService.java:426:                } catch (SecurityException e) {
android10-security-release/services/core/java/com/android/server/media/MediaSessionService.java:507:            throw new SecurityException("Missing permission to control media.");
android10-security-release/services/core/java/com/android/server/media/MediaSessionService.java:518:            throw new SecurityException("Only System UI and Settings may " + action);
android10-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1031:                    throw new SecurityException("Unexpected Session2Token's UID, expected=" + uid
android10-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1314:                    throw new SecurityException("Only Bluetooth service processes can set"
android10-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1362:                    throw new SecurityException("Must hold the SET_VOLUME_KEY_LONG_PRESS_LISTENER"
android10-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1422:                    throw new SecurityException("Must hold the SET_MEDIA_KEY_LISTENER permission.");
android10-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1898:                        } catch (SecurityException | IllegalArgumentException e) {
android10-security-release/services/core/java/com/android/server/media/MediaSessionRecord.java:324:                    } catch (IllegalArgumentException | SecurityException e) {
android10-security-release/services/core/java/com/android/server/media/MediaSessionRecord.java:550:                } catch (IllegalArgumentException | SecurityException e) {
android10-security-release/services/core/java/com/android/server/media/RemoteDisplayProviderProxy.java:199:            } catch (SecurityException ex) {
android10-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:278:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to grant "
android10-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:319:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to add "
android10-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:334:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to add "
android10-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:352:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to add "
android10-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:367:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to remove "
android10-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:476:                    throw new SecurityException("Media projections require a foreground service"
android10-security-release/services/core/java/com/android/server/clipboard/ClipboardService.java:343:                if (!(e instanceof SecurityException)) {
android10-security-release/services/core/java/com/android/server/clipboard/ClipboardService.java:622:            // This will throw SecurityException if caller can't grant
android10-security-release/services/core/java/com/android/server/clipboard/ClipboardService.java:688:                throw new SecurityException("Calling uid " + uid
android10-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:207:            throw new SecurityException("Can't access OEM unlock state. Requires "
android10-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:220:            throw new SecurityException("uid " + callingUid + " not allowed to access PST");
android10-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:228:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:235:            throw new SecurityException(
android10-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:561:        public void setOemUnlockEnabled(boolean enabled) throws SecurityException {
android10-security-release/services/contentsuggestions/java/com/android/server/contentsuggestions/ContentSuggestionsManagerService.java:110:        throw new SecurityException(msg);
android10-security-release/services/contentsuggestions/java/com/android/server/contentsuggestions/ContentSuggestionsPerUserService.java:82:            throw new SecurityException("Service does not require permission "
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:979:                throw new SecurityException("Calling uid " + callingUid + " cannot query events"
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1197:                    throw new SecurityException(
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1272:                throw new SecurityException(
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1376:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1399:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1418:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1442:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1462:                throw new SecurityException("Caller doesn't have both SUSPEND_APPS and "
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1487:                throw new SecurityException("Caller doesn't have both SUSPEND_APPS and "
android10-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1569:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android10-security-release/services/usage/java/com/android/server/usage/StorageStatsService.java:153:                throw new SecurityException("Package " + callingPackage + " from UID " + callingUid
android10-security-release/services/midi/java/com/android/server/midi/MidiService.java:664:                throw new SecurityException("Attempt to open private device with wrong UID");
android10-security-release/services/midi/java/com/android/server/midi/MidiService.java:715:            throw new SecurityException("only system can create USB devices");
android10-security-release/services/midi/java/com/android/server/midi/MidiService.java:717:            throw new SecurityException("only MidiBluetoothService can create Bluetooth devices");
android10-security-release/services/midi/java/com/android/server/midi/MidiService.java:765:                throw new SecurityException("setDeviceStatus() caller UID " + Binder.getCallingUid()
android10-security-release/services/usb/java/com/android/server/usb/UsbHostManager.java:492:                throw new SecurityException("USB device is on a restricted bus");
android10-security-release/services/usb/java/com/android/server/usb/UsbUserSettingsManager.java:176:            throw new SecurityException("User has not given " + uid + "/" + packageName
android10-security-release/services/usb/java/com/android/server/usb/UsbUserSettingsManager.java:183:            throw new SecurityException("User has not given " + uid + " permission to accessory "
android10-security-release/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java:303:                throw new SecurityException(pkg + " doesn't belong to uid " + callingUid);
android10-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl.java:349:            throw new SecurityException("Calling uid " + callingUid
android10-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl.java:358:            throw new SecurityException("Calling uid " + callingUid
android10-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl.java:367:            throw new SecurityException("Calling uid " + callingUid
android10-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionSessionConnection.java:314:            // This will throw SecurityException for us.
android10-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionSessionConnection.java:324:        } catch (SecurityException e) {
android10-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerService.java:265:                if (!(e instanceof SecurityException)) {
android10-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerService.java:634:                    throw new SecurityException(
android10-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerService.java:1260:                throw new SecurityException("Caller does not hold the permission " + permission);
android10-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerService.java:1268:                    SecurityException("Caller is not the current voice interaction service");
android10-security-release/services/voiceinteraction/java/com/android/server/soundtrigger/SoundTriggerService.java:167:                if (!(e instanceof SecurityException)) {
android10-security-release/services/voiceinteraction/java/com/android/server/soundtrigger/SoundTriggerService.java:1287:            throw new SecurityException("Caller does not hold the permission " + permission);
android10-security-release/services/autofill/java/com/android/server/autofill/AutofillManagerServiceImpl.java:513:            throw new SecurityException("Could not verify UID for " + componentName);
android10-security-release/services/autofill/java/com/android/server/autofill/AutofillManagerServiceImpl.java:533:            throw new SecurityException("Invalid component: " + componentName);
android10-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:1287:                throw new SecurityException("The taget service not in the same package"
android10-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:2916:            throw new SecurityException("Only the system process can call this");
android10-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:3672:                    throw new SecurityException("Service " + componentName
android10-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:3676:                    throw new SecurityException("Service " + componentName
android10-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:3730:            } catch (SecurityException se) {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2698:            throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2708:     * @throws SecurityException if caller neither has an active admin nor {@code permission}
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2714:            @Nullable String permission) throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2735:                throw new SecurityException("Admin " + admin.info.getComponent()
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2739:                throw new SecurityException("Admin " + admin.info.getComponent()
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2743:                throw new SecurityException("Admin " + admin.info.getComponent()
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2747:            throw new SecurityException("Admin " + admin.info.getComponent()
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2751:            throw new SecurityException("No active admin owned by uid "
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2757:            throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2767:     * @throws SecurityException if caller neither has an active admin nor {@code permission}
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2774:            @Nullable String permission) throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2795:            throw new SecurityException("No active admin " + who + " for UID " + uid);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2798:            throw new SecurityException("Admin " + who + " is not owned by uid " + uid);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2822:                throw new SecurityException("No active admin " + who);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:2825:                throw new SecurityException("Admin " + who + " is not owned by uid " + uid);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3960:                throw new SecurityException("No active admin " + adminReceiver);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:4017:                    throw new SecurityException("Attempt to remove non-test admin "
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:4084:            throw new SecurityException("Non-shell user attempted to call " + method);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:4123:            throw new SecurityException("Caller must be system");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:5032:                    throw new SecurityException("resetPassword() is deprecated for DPC targeting O"
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:5053:                        throw new SecurityException("Cannot call with null password");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:5062:                        throw new SecurityException("Cannot change current password");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:5469:                            throw new SecurityException("Only profile owner admins can set "
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:5744:            ComponentName who, String callerPackage, int callerUid) throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:5761:            throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6051:            List<String> scopeList) throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6149:            String delegatePackage) throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6168:                    throw new SecurityException("Caller with uid " + callingUid + " is not "
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6189:            throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6311:     * @throws SecurityException if {@code who} is given and is not an owner for {@code reqPolicy};
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6340:                throw new SecurityException("Caller with uid " + mInjector.binderGetCallingUid()
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6390:            throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6400:    public String getCertInstallerPackage(ComponentName who) throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6409:     * @throws SecurityException if the caller is not a profile or device owner.
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6415:            throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6455:    public String getAlwaysOnVpnPackage(ComponentName admin) throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6468:    public boolean isAlwaysOnVpnLockdownEnabled(ComponentName admin) throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6482:            throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6506:        } catch (IOException | SecurityException e) {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6574:                throw new SecurityException("Cannot wipe data. " + restriction
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6580:                    throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6790:            } catch (SecurityException e) {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7113:            throw new SecurityException(e);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7342:            throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7349:    private void ensureAllUsersAffiliated() throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7352:                throw new SecurityException("Not all users are affiliated.");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7991:                throw new SecurityException("Invalid packageName");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7994:            throw new SecurityException(e);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8002:                throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8468:            throw new SecurityException(message);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8485:                throw new SecurityException(message);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8708:            throw new SecurityException("You can not " + message + " outside a managed profile.");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8714:            throw new SecurityException("You can not " + message + " for a managed profile.");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8782:            throw new SecurityException("User " + userId + " is not allowed to use lock task");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9103:                throw new SecurityException("Only the system can query the permission provider");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9370:            throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9533:            throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9593:            throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9642:            throw new SecurityException("createAndManageUser was called from non-system user");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9883:                throw new SecurityException("Admin " + who +
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10054:                    throw new SecurityException("Device owner cannot set user restriction " + key);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10058:                    throw new SecurityException("Profile owner cannot set user restriction " + key);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10330:                throw new SecurityException("Admin " + who +
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10654:            throws SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10762:            throw new SecurityException("notifyLockTaskModeChanged can only be called by system");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10804:            // SecurityException to avoid breaking apps.
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10812:                throw new SecurityException(String.format(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10843:                throw new SecurityException(String.format(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10890:                    throw new SecurityException(String.format(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10894:                throw new SecurityException(String.format(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11006:                throw new SecurityException("Admin " + who +
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11011:            throw new SecurityException("Managed profile cannot disable keyguard");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11045:                throw new SecurityException("Admin " + who +
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11049:                throw new SecurityException("Managed profile cannot disable status bar");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11799:            } catch (SecurityException e) {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12240:            throw new SecurityException("Only the system can query support message for user");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12258:            throw new SecurityException("Only the system can query support message for user");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12467:            throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12498:            throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12503:            throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12782:            throw new SecurityException("Caller has to be in user 0");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:13035:            throw new SecurityException("Not allowed to bind to target user id");
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:13433:     * @throws SecurityException if the intent is resolved to an invalid service.
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:13437:            @UserIdInt int targetUserId) throws RemoteException, SecurityException {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:13449:            throw new SecurityException("Only allow to bind service in " + expectedPackageName);
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:13453:            throw new SecurityException(
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:13612:        } catch (SecurityException se) {
android10-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:14404:            throw new SecurityException("Input package name doesn't align with actual "
android10-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:925:            throw new SecurityException("Caller does not hold permission "
android10-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:944:            throw new SecurityException("Caller does not hold permission "
android10-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:2386:            throw new SecurityException(
android10-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:2426:            throw new SecurityException(
android10-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:2489:                throw new SecurityException("Only SYSTEM can call sendFingerprintGesture");
android10-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:2510:                throw new SecurityException("Only SYSTEM can call getAccessibilityWindowId");
android10-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:3723:                throw new SecurityException("Call from user " + callingUserId + " as user "
android10-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:3819:                throw new SecurityException("You do not have " + permission
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationRecordTest.java:730:                anyInt(), anyInt())).thenThrow(new SecurityException());
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationRecordTest.java:743:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationRecordTest.java:753:                anyInt(), anyInt())).thenThrow(new SecurityException());
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationRecordTest.java:771:                anyInt(), anyInt())).thenThrow(new SecurityException());
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/RoleObserverTest.java:146:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:913:            } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:1890:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:1917:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:1953:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:1986:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2008:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2039:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2058:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:3978:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:4013:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:4281:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:4300:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:5037:        } catch (SecurityException e) {
android10-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:5054:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:229:        doThrow(new SecurityException()).when(mContext)
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:235:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:295:            fail("SecurityException expected");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:296:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:358:            fail("SecurityException expected");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:359:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:407:            fail("SecurityException expected");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:408:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:429:            fail("SecurityException expected");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:430:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:446:        doThrow(new SecurityException()).when(mContext)
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:451:            fail("SecurityException expected");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:452:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:467:        doThrow(new SecurityException()).when(mContext).enforceCallingOrSelfPermission(
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:473:            fail("SecurityException expected");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:474:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:481:        doThrow(new SecurityException()).when(mContext).enforceCallingOrSelfPermission(
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:487:            fail("SecurityException expected");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:488:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:559:            fail("SecurityException expected");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:560:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:574:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:575:            fail("Unexpected SecurityException");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:588:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:589:            fail("Unexpected SecurityException");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:840:        doThrow(new SecurityException()).when(mContext)
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:844:            fail("SecurityException expected.");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:845:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:865:        doThrow(new SecurityException()).when(mContext)
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:870:            fail("SecurityException expected.");
android10-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:871:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:78:import java.security.GeneralSecurityException;
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1372:            fail("SecurityException expected. But no exception was thrown.");
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1373:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1374:            // SecurityException is expected.
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1618:            fail("SecurityException expected. But no exception was thrown.");
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1619:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1620:            // SecurityException is expected.
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:2361:            fail("SecurityException expected. But no exception was thrown.");
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:2362:        } catch (SecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:2363:            // SecurityException is expected.
android10-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:3119:        } catch (GeneralSecurityException e) {
android10-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:101:    @Test(expected = SecurityException.class)
android10-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:107:    @Test(expected = SecurityException.class)
android10-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:113:    @Test(expected = SecurityException.class)
android10-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:119:    @Test(expected = SecurityException.class)
android10-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:938:        doThrow(new SecurityException("Simulated permission failure"))
android10-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:944:        doThrow(new SecurityException("Simulated permission failure"))
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:343:    public void testSetActiveAdmin_SecurityException() {
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:347:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:353:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:541:    public void testRemoveActiveAdmin_SecurityException() {
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:553:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:563:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:750:        // Calling from a non-shell uid should fail with a SecurityException
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:752:        assertExpectException(SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1020:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1022:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1024:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1026:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1035:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1037:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1039:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1041:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1175:        assertExpectException(SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1488:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1495:        // DPMS executes without a SecurityException
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1498:        } catch (SecurityException unexpected) {
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1499:            fail("Threw SecurityException on authorized access");
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1511:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1519:        } catch (SecurityException expected) {
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1520:            fail("Threw SecurityException on authorized access");
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1542:        assertExpectException(SecurityException.class, nonDelegateExceptionMessageRegex,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1574:        assertExpectException(SecurityException.class, nonDelegateExceptionMessageRegex,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1591:        assertExpectException(SecurityException.class, nonDelegateExceptionMessageRegex,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1733:    public void testDaDisallowedPolicies_SecurityException() throws Exception {
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1741:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1746:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1752:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1757:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1982:        assertExpectException(SecurityException.class, /* messageRegex= */ "No active admin",
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1990:        assertExpectException(SecurityException.class, /* messageRegex= */ NOT_DEVICE_OWNER_MSG,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1995:        assertExpectException(SecurityException.class, /* messageRegex= */ NOT_DEVICE_OWNER_MSG,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2030:        assertExpectException(SecurityException.class, /* messageRegex= */ NOT_DEVICE_OWNER_MSG,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2035:        assertExpectException(SecurityException.class, /* messageRegex= */ NOT_DEVICE_OWNER_MSG,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2081:            assertExpectException(SecurityException.class, /* messageRegex= */ "message for user",
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2084:            assertExpectException(SecurityException.class, /* messageRegex= */ "message for user",
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2092:            assertExpectException(SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2182:        assertExpectException(SecurityException.class,  /* messageRegex= */ NOT_PROFILE_OWNER_MSG,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2184:        assertExpectException(SecurityException.class,  /* messageRegex= */ NOT_PROFILE_OWNER_MSG,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2219:        assertExpectException(SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2226:        assertExpectException(SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2402:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3303:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3310:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3318:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3453:        assertExpectException(SecurityException.class, null, () ->
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3481:        assertExpectException(SecurityException.class, null, () -> dpm.setTime(admin1, 0));
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3501:        assertExpectException(SecurityException.class, null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3749:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3751:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3754:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3962:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4006:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4148:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4541:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4775:        assertExpectException(SecurityException.class, null, () ->
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4777:        assertExpectException(SecurityException.class, null, () ->
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4779:        assertExpectException(SecurityException.class, null, () ->
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4781:        assertExpectException(SecurityException.class, null, () ->
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4783:        assertExpectException(SecurityException.class, null, () ->
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4785:        assertExpectException(SecurityException.class, null, () ->
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5036:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5044:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5092:        assertExpectException(SecurityException.class, null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5097:        assertExpectException(SecurityException.class, null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5107:        assertExpectException(SecurityException.class, null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5119:        assertExpectException(SecurityException.class, null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5123:        assertExpectException(SecurityException.class, null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5175:        assertExpectException(SecurityException.class, null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5181:            assertExpectException(SecurityException.class, /* messageRegex= */ null,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5189:    public void testGetPasswordComplexity_securityExceptionIfParentInstance() {
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5190:        assertThrows(SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5204:    public void testGetPasswordComplexity_securityExceptionWithoutPermissions() {
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5207:        assertThrows(SecurityException.class, () -> dpm.getPasswordComplexity());
android10-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DpmMockContext.java:250:            throw new SecurityException("Caller doesn't have " + permission + " : " + message);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest7.java:84:        assertExpectException(SecurityException.class, "must be shell",
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest7.java:88:        assertExpectException(SecurityException.class, "must be shell",
android10-security-release/services/tests/servicestests/src/com/android/server/pm/BaseShortcutManagerTest.java:456:                throw new SecurityException("Missing permission: " + permission);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/BaseShortcutManagerTest.java:849:                    throw new SecurityException(inv.getArguments()[2] + " for unrelated profile "
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest8.java:1567:            assertExpectException(SecurityException.class, "Calling uid mismatch", request::accept);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:141:            throw new SecurityException("Not matching");
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:201:    @Test(expected = SecurityException.class)
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:209:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:230:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:253:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:276:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:297:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:318:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:341:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:364:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:385:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:406:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:427:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:448:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2321:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2323:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2325:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2327:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2329:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2331:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2369:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2371:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2373:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2375:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2377:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2379:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2417:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2419:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2421:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2423:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2425:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2427:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2497:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2499:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2501:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2503:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2505:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2507:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2546:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2548:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2550:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2552:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2554:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2556:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2596:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2598:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2600:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2602:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2604:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2606:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2623:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2625:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2627:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2630:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2632:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2634:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2690:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2692:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2694:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2696:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2698:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2700:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2739:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2741:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2743:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2745:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2747:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2749:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2789:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2791:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2793:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2795:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2797:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2799:                    SecurityException.class);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6145:                    SecurityException.class, "", () -> {
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6224:                    SecurityException.class, "unrelated profile", () -> {
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6240:                    SecurityException.class, "unrelated profile", () -> {
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6245:                    SecurityException.class, "unrelated profile", () -> {
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6279:        assertExpectException(SecurityException.class, "Missing permission", () ->
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6290:        assertExpectException(SecurityException.class, "Missing permission", () ->
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6299:        assertExpectException(SecurityException.class, "Missing permission", () ->
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest10.java:137:            assertExpectException(SecurityException.class, "Calling uid mismatch",
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest10.java:146:            assertExpectException(SecurityException.class, "Calling uid mismatch",
android10-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest10.java:179:            assertExpectException(SecurityException.class, null, () ->
android10-security-release/services/tests/servicestests/src/com/android/server/pm/UserManagerTest.java:422:            fail("SecurityException should be thrown for nonexistent user");
android10-security-release/services/tests/servicestests/src/com/android/server/pm/UserManagerTest.java:424:            assertTrue("SecurityException should be thrown for nonexistent user, but was: " + e,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/UserManagerTest.java:425:                    e instanceof SecurityException);
android10-security-release/services/tests/servicestests/src/com/android/server/pm/UserManagerTest.java:434:            fail("SecurityException should be thrown for other user");
android10-security-release/services/tests/servicestests/src/com/android/server/pm/UserManagerTest.java:436:            assertTrue("SecurityException should be thrown for other user, but was: " + e,
android10-security-release/services/tests/servicestests/src/com/android/server/pm/UserManagerTest.java:437:                    e instanceof SecurityException);
android10-security-release/services/tests/servicestests/src/com/android/server/timedetector/TimeDetectorServiceTest.java:66:    @Test(expected=SecurityException.class)
android10-security-release/services/tests/servicestests/src/com/android/server/timedetector/TimeDetectorServiceTest.java:68:        doThrow(new SecurityException("Mock"))
android10-security-release/services/tests/servicestests/src/com/android/server/backup/TrampolineTest.java:298:        } catch (SecurityException expected) {
android10-security-release/services/tests/servicestests/src/com/android/server/backup/TrampolineTest.java:333:        } catch (SecurityException expected) {
android10-security-release/services/tests/servicestests/src/com/android/server/backup/TrampolineTest.java:339:        doThrow(new SecurityException())
android10-security-release/services/tests/servicestests/src/com/android/server/backup/TrampolineTest.java:347:        } catch (SecurityException expected) {
android10-security-release/services/tests/servicestests/src/com/android/server/backup/TrampolineTest.java:353:        doThrow(new SecurityException())
android10-security-release/services/tests/servicestests/src/com/android/server/backup/TrampolineTest.java:362:        } catch (SecurityException expected) {
android10-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:80:    public void hasBackupPassword_throwsSecurityExceptionIfLacksPermission() {
android10-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:84:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:135:    public void backupPasswordMatches_throwsSecurityExceptionIfLacksPermission() {
android10-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:139:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:170:    public void setBackupPassword_throwsSecurityExceptionIfLacksPermission() {
android10-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:174:                SecurityException.class,
android10-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:189:        doThrow(new SecurityException()).when(mContext)
android10-security-release/services/tests/servicestests/src/com/android/server/DynamicSystemServiceTest.java:40:            fail("DynamicSystemService did not throw SecurityException as expected");
android10-security-release/services/tests/servicestests/src/com/android/server/DynamicSystemServiceTest.java:41:        } catch (SecurityException e) {
android10-security-release/services/tests/wmtests/src/com/android/server/wm/LockTaskControllerTest.java:308:    @Test(expected = SecurityException.class)
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:945:        doTestRecentTasksApis(false /* expectNoSecurityException */);
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:948:        testGetTasksApis(false /* expectNoSecurityException */);
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:958:        doTestRecentTasksApis(true /* expectNoSecurityException */);
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:959:        testGetTasksApis(true /* expectNoSecurityException */);
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:963:        assertSecurityException(expectCallable, () -> mTestService.removeStack(INVALID_STACK_ID));
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:964:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:967:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:970:        assertSecurityException(expectCallable, () -> mTestService.removeTask(0));
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:971:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:973:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:975:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:978:        assertSecurityException(expectCallable, () -> mTestService.dismissSplitScreenMode(true));
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:979:        assertSecurityException(expectCallable, () -> mTestService.dismissPip(true, 0));
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:980:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:982:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:984:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:987:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:989:        assertSecurityException(expectCallable, () -> mTestService.getAllStackInfos());
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:990:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:992:        assertSecurityException(expectCallable, () -> {
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:999:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1001:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1003:        assertSecurityException(expectCallable, () -> mTestService.getTaskSnapshot(0, true));
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1004:        assertSecurityException(expectCallable, () -> mTestService.registerTaskStackListener(null));
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1005:        assertSecurityException(expectCallable,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1007:        assertSecurityException(expectCallable, () -> mTestService.getTaskDescription(0));
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1008:        assertSecurityException(expectCallable, () -> mTestService.cancelTaskWindowTransition(0));
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1009:        assertSecurityException(expectCallable, () -> mTestService.startRecentsActivity(null, null,
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1011:        assertSecurityException(expectCallable, () -> mTestService.cancelRecentsAnimation(true));
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1012:        assertSecurityException(expectCallable, () -> mTestService.stopAppSwitches());
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1013:        assertSecurityException(expectCallable, () -> mTestService.resumeAppSwitches());
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1086:    private void assertSecurityException(boolean expectCallable, Runnable runnable) {
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1087:        boolean noSecurityException = true;
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1090:        } catch (SecurityException se) {
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1091:            noSecurityException = false;
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1093:            // We only care about SecurityExceptions, fall through here.
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1095:        if (noSecurityException != expectCallable) {
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1097:                    + noSecurityException);
android10-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1262:                        throw new SecurityException();
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:224:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:228:    public void testGetServiceForUser_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:234:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:241:     * Test that the backup services does not throw a {@link SecurityException} if the caller has
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:256:     * Test that the backup services does not throw a {@link SecurityException} if the caller does
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:743:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:747:    public void testSetBackupEnabled_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:753:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:758:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:903:     * SecurityException} if the caller does not have INTERACT_ACROSS_USERS_FULL permission.
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:906:    public void testBackupNow_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:911:        expectThrows(SecurityException.class, () -> backupManagerService.backupNow(mUserTwoId));
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:915:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:955:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:959:    public void testRequestBackup_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:968:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:975:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1025:     * SecurityException} if the caller does not have INTERACT_ACROSS_USERS_FULL permission.
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1028:    public void testCancelBackups_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1033:        expectThrows(SecurityException.class, () -> backupManagerService.cancelBackups(mUserTwoId));
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1037:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1270:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1274:    public void testAdbBackup_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1280:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1297:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1406:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1410:    public void testAdbRestore_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1416:                SecurityException.class, () -> backupManagerService.adbRestore(mUserTwoId, null));
android10-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceTest.java:1420:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android10-security-release/services/robotests/backup/src/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunkerTest.java:36:import java.security.GeneralSecurityException;
android10-security-release/services/robotests/backup/src/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunkerTest.java:203:                GeneralSecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunkerTest.java:208:                                    throw new GeneralSecurityException();
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:185:     * {@link SecurityException} if the caller does not have backup permission.
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:195:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:236:     * {@link SecurityException} if the caller does not have backup permission.
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:247:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:292:     * throws a {@link SecurityException} if the caller does not have backup permission.
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:302:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:350:     * {@link SecurityException} if the caller does not have backup permission.
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:359:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:432:     * ISelectBackupTransportCallback)} throws a {@link SecurityException} if the caller does not
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:443:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:503:     * {@link SecurityException} if the caller does not have backup permission.
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:510:        expectThrows(SecurityException.class, backupManagerService::getCurrentTransportComponent);
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:570:     * ComponentName, String, Intent, String, Intent, String)} throws a {@link SecurityException} if
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:581:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:741:     * ComponentName, String, Intent, String, Intent, String)} throws a {@link SecurityException} if
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:745:    public void testUpdateTransportAttributes_whenPermissionDenied_throwsSecurityException()
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:752:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:783:     * int)} throws a {@link SecurityException} if the caller does not have backup permission.
android10-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:791:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/restore/ActiveRestoreSessionTest.java:161:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/restore/ActiveRestoreSessionTest.java:518:                SecurityException.class,
android10-security-release/services/robotests/backup/src/com/android/server/backup/keyvalue/KeyValueBackupTaskTest.java:781:    public void testRunTask_whenBindToAgentThrowsSecurityException() throws Exception {
android10-security-release/services/robotests/backup/src/com/android/server/backup/keyvalue/KeyValueBackupTaskTest.java:784:        doThrow(SecurityException.class)
android10-security-release/services/robotests/backup/src/com/android/server/backup/keyvalue/KeyValueBackupTaskTest.java:798:    public void testRunTask_whenNonIncrementalAndBindToAgentThrowsSecurityException() throws Exception {
android10-security-release/services/robotests/backup/src/com/android/server/backup/keyvalue/KeyValueBackupTaskTest.java:801:        doThrow(SecurityException.class)
android10-security-release/services/restrictions/java/com/android/server/restrictions/RestrictionsManagerService.java:170:                        throw new SecurityException("No restrictions provider registered for user");
android10-security-release/services/restrictions/java/com/android/server/restrictions/RestrictionsManagerService.java:193:                        throw new SecurityException(message + callingUid);
android10-security-release/services/print/java/com/android/server/print/PrintManagerService.java:345:                    throw new SecurityException("Only system and print spooler can call this");
android10-security-release/services/print/java/com/android/server/print/PrintManagerService.java:738:                throw new SecurityException("Can only be called by uid " + SHELL_UID
android10-security-release/services/print/java/com/android/server/print/PrintManagerService.java:758:                throw new SecurityException("Can only be called by uid " + SHELL_UID
android10-security-release/services/print/java/com/android/server/print/PrintManagerService.java:1052:                throw new SecurityException("Call from app " + callingAppId + " as app "
android10-security-release/services/backup/java/com/android/server/backup/UserBackupManagerService.java:2930:     * {@link SecurityException} will be thrown.
android10-security-release/services/backup/java/com/android/server/backup/UserBackupManagerService.java:2947:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android10-security-release/services/backup/java/com/android/server/backup/UserBackupManagerService.java:2992:                throw new SecurityException("Only the transport can change its description");
android10-security-release/services/backup/java/com/android/server/backup/UserBackupManagerService.java:2995:            throw new SecurityException("Transport package not found", e);
android10-security-release/services/backup/java/com/android/server/backup/BackupManagerService.java:218:     * @throws SecurityException if {@code userId} is different from the calling user id and the
android10-security-release/services/backup/java/com/android/server/backup/BackupManagerService.java:389:     * {@link SecurityException} will be thrown.
android10-security-release/services/backup/java/com/android/server/backup/BackupManagerService.java:405:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android10-security-release/services/backup/java/com/android/server/backup/KeyValueAdbBackupEngine.java:150:        } catch (SecurityException e) {
android10-security-release/services/backup/java/com/android/server/backup/BackupPasswordManager.java:81:     * @throws SecurityException If caller does not have {@link android.Manifest.permission#BACKUP}
android10-security-release/services/backup/java/com/android/server/backup/BackupPasswordManager.java:93:     * @throws SecurityException If caller does not have {@link android.Manifest.permission#BACKUP}
android10-security-release/services/backup/java/com/android/server/backup/BackupPasswordManager.java:107:     * @throws SecurityException If caller does not have {@link android.Manifest.permission#BACKUP}
android10-security-release/services/backup/java/com/android/server/backup/encryption/chunking/Chunker.java:21:import java.security.GeneralSecurityException;
android10-security-release/services/backup/java/com/android/server/backup/encryption/chunking/Chunker.java:31:     * @throws GeneralSecurityException if the consumer function throws an error.
android10-security-release/services/backup/java/com/android/server/backup/encryption/chunking/Chunker.java:34:            throws IOException, GeneralSecurityException;
android10-security-release/services/backup/java/com/android/server/backup/encryption/chunking/Chunker.java:42:         * @throws GeneralSecurityException if there is an issue encrypting the chunk.
android10-security-release/services/backup/java/com/android/server/backup/encryption/chunking/Chunker.java:44:        void accept(byte[] chunk) throws GeneralSecurityException;
android10-security-release/services/backup/java/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunker.java:25:import java.security.GeneralSecurityException;
android10-security-release/services/backup/java/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunker.java:76:     * @throws GeneralSecurityException Thrown if the {@link ChunkConsumer} throws it.
android10-security-release/services/backup/java/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunker.java:80:            throws IOException, GeneralSecurityException {
android10-security-release/services/backup/java/com/android/server/backup/restore/ActiveRestoreSession.java:330:            throw new SecurityException("No permission to restore other packages");
android10-security-release/services/backup/java/com/android/server/backup/keyvalue/KeyValueBackupReporter.java:163:    void onBindAgentError(String packageName, SecurityException e) {
android10-security-release/services/backup/java/com/android/server/backup/keyvalue/KeyValueBackupTask.java:518:        } catch (SecurityException e) {
android10-security-release/services/backup/java/com/android/server/backup/Trampoline.java:301:    private void enforcePermissionsOnUser(int userId) throws SecurityException {
android10-security-release/services/backup/java/com/android/server/backup/Trampoline.java:309:                throw new SecurityException("No permission to configure backup activity");
android10-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCapturePerUserService.java:400:            throw new SecurityException("Could not verify UID for " + packageName);
android10-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCapturePerUserService.java:409:            throw new SecurityException("Invalid package: " + packageName);
android10-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:459:            throw new SecurityException("caller is not user's ContentCapture service");
android10-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:500:     * Executes the given {@code runnable} and if it throws a {@link SecurityException},
android10-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:505:    private boolean throwsSecurityException(@NonNull IResultReceiver result,
android10-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:510:        } catch (SecurityException e) {
android10-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:604:                if (throwsSecurityException(result,
android10-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:621:            if (throwsSecurityException(result, () -> enforceCallingPermissionForManagement())) {
android10-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:642:            if (throwsSecurityException(result, () -> assertCalledByPackageOwner(packageName))) {
android10-security-release/services/appprediction/java/com/android/server/appprediction/AppPredictionManagerService.java:166:                throw new SecurityException(msg);
android10-security-release/services/net/java/android/net/NetworkStackClient.java:320:            throw new SecurityException("Invalid network stack UID: " + uid);
android10-security-release/services/net/java/android/net/NetworkStackClient.java:335:            throw new SecurityException(
android10-security-release/services/net/java/android/net/NetworkStackClient.java:492:            throw new SecurityException(
android10-security-release/graphics/java/android/graphics/pdf/PdfEditor.java:63:     * @throws java.lang.SecurityException If the file requires a password or
android10-security-release/graphics/java/android/graphics/pdf/PdfRenderer.java:151:     * @throws java.lang.SecurityException If the file requires a password or
android10-security-release/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java:125:            throw new SecurityException(
android10-security-release/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java:132:            throws SecurityException {
android10-security-release/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java:139:            throws SecurityException {
android10-security-release/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java:541:        throw new SecurityException("The app is not given any access to the document under path " +
android10-security-release/packages/services/PacProcessor/src/com/android/pacprocessor/PacService.java:98:                throw new SecurityException();
android10-security-release/packages/services/PacProcessor/src/com/android/pacprocessor/PacService.java:107:                throw new SecurityException();
android10-security-release/packages/services/PacProcessor/src/com/android/pacprocessor/PacService.java:116:                throw new SecurityException();
android10-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:2014:            throw new SecurityException("Permission denial: writing to settings requires:"
android10-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:2165:                    throw new SecurityException("Only system, shell/root on a "
android10-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:2172:                    throw new SecurityException("Only system, shell/root on a "
android10-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:2179:                    throw new SecurityException("Only system, shell/root on a "
android10-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:3225:                        } catch (SecurityException e) {
android10-security-release/packages/PackageInstaller/src/com/android/packageinstaller/InstallSuccess.java:103:                    } catch (ActivityNotFoundException | SecurityException e) {
android10-security-release/packages/PackageInstaller/src/com/android/packageinstaller/InstallStaging.java:192:            } catch (IOException | SecurityException | IllegalStateException e) {
android10-security-release/packages/PackageInstaller/src/com/android/packageinstaller/InstallInstalling.java:378:            } catch (IOException | SecurityException e) {
android10-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/WearPackageIconProvider.java:141:     * @throws SecurityException if the caller has insufficient permissions.
android10-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/WearPackageIconProvider.java:166:        throw new SecurityException("Permission Denial: reading "
android10-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/PackageInstallerImpl.java:134:                } catch (SecurityException se) {
android10-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/PackageInstallerImpl.java:174:            } catch (SecurityException se) {
android10-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/PackageInstallerImpl.java:187:        } catch (SecurityException se) {
android10-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/PackageInstallerImpl.java:227:        } catch (SecurityException se) {
android10-security-release/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/RemoteInputViewTest.java:89:        // Avoid SecurityException RemoteInputView#sendRemoteInput().
android10-security-release/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogControllerImpl.java:180:        } catch (SecurityException e) {
android10-security-release/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogControllerImpl.java:208:        } catch (SecurityException e) {
android10-security-release/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardService.java:69:            throw new SecurityException("Access denied to process: " + Binder.getCallingPid()
android10-security-release/packages/SystemUI/src/com/android/systemui/qs/external/TileServices.java:152:                throw new SecurityException("Component outside caller's uid");
android10-security-release/packages/SystemUI/src/com/android/systemui/qs/external/TileServices.java:155:            throw new SecurityException(e);
android10-security-release/packages/SystemUI/src/com/android/systemui/qs/external/TileLifecycleManager.java:164:            } catch (SecurityException e) {
android10-security-release/packages/SystemUI/src/com/android/systemui/recents/OverviewProxyService.java:633:        } catch (SecurityException e) {
android10-security-release/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/NotificationInlineImageCache.java:90:            } catch (IOException | SecurityException ex) {
android10-security-release/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/NotificationInlineImageResolver.java:84:        } catch (IOException | SecurityException ex) {
android10-security-release/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java:444:                } catch (SecurityException e) {
android10-security-release/packages/SystemUI/src/com/android/systemui/media/RingtonePlayer.java:178:                throw new SecurityException("Async playback only available from system UID.");
android10-security-release/packages/SystemUI/src/com/android/systemui/media/RingtonePlayer.java:190:                throw new SecurityException("Async playback only available from system UID.");
android10-security-release/packages/SystemUI/src/com/android/systemui/media/RingtonePlayer.java:221:                                throw new SecurityException(e);
android10-security-release/packages/SystemUI/src/com/android/systemui/media/RingtonePlayer.java:227:            throw new SecurityException("Uri is not ringtone, alarm, or notification: " + uri);
android10-security-release/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java:153:                    } catch (SecurityException securityException) {
android10-security-release/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java:156:                            // finishes, potentially resulting in a SecurityException here.
android10-security-release/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java:163:                            throw securityException;
android10-security-release/packages/SettingsLib/src/com/android/settingslib/bluetooth/BluetoothUtils.java:152:                } catch (SecurityException e) {
android10-security-release/packages/SettingsLib/src/com/android/settingslib/license/LicenseHtmlGeneratorFromXml.java:135:        } catch (FileNotFoundException | SecurityException e) {
android10-security-release/packages/PrintSpooler/src/com/android/printspooler/renderer/PdfManipulationService.java:96:                } catch (SecurityException e) {
android10-security-release/packages/PrintSpooler/src/com/android/printspooler/ui/AddPrinterActivity.java:500:                } catch (ActivityNotFoundException|SecurityException e) {
android10-security-release/location/java/android/location/LocationRequest.java:592:     * will throw a SecurityException when requesting location updates if the caller
android10-security-release/location/java/android/location/LocationRequest.java:616:     * will throw a SecurityException when requesting location updates if the caller
android10-security-release/location/java/android/location/LocationManager.java:464:     * @throws SecurityException if the caller is not permitted to access the
android10-security-release/location/java/android/location/LocationManager.java:548:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:580:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:613:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:641:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:748:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:778:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:809:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:835:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:859:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:924:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:956:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:984:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:1114:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android10-security-release/location/java/android/location/LocationManager.java:1163:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android10-security-release/location/java/android/location/LocationManager.java:1196:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android10-security-release/location/java/android/location/LocationManager.java:1221:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android10-security-release/location/java/android/location/LocationManager.java:1244:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android10-security-release/location/java/android/location/LocationManager.java:1313:     * {@link SecurityException} if the location permissions were not sufficient to use the
android10-security-release/location/java/android/location/LocationManager.java:1331:     * {@link SecurityException} if the location permissions were not sufficient to use the
android10-security-release/location/java/android/location/LocationManager.java:1392:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:1421:     * @throws SecurityException if no suitable permission is present
android10-security-release/location/java/android/location/LocationManager.java:1444:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android10-security-release/location/java/android/location/LocationManager.java:1472:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android10-security-release/location/java/android/location/LocationManager.java:1495:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android10-security-release/location/java/android/location/LocationManager.java:1527:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android10-security-release/location/java/android/location/LocationManager.java:1544:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android10-security-release/location/java/android/location/LocationManager.java:1562:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android10-security-release/location/java/android/location/LocationManager.java:1582:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android10-security-release/location/java/android/location/LocationManager.java:1604:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android10-security-release/location/java/android/location/LocationManager.java:1789:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android10-security-release/location/java/android/location/LocationManager.java:1838:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android10-security-release/location/java/android/location/LocationManager.java:1853:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android10-security-release/location/java/android/location/LocationManager.java:1903:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android10-security-release/location/java/android/location/LocationManager.java:1930:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android10-security-release/location/java/android/location/LocationManager.java:1945:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android10-security-release/location/java/android/location/LocationManager.java:2047:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present.
android10-security-release/api/system-current.txt:4135:    method @RequiresPermission(anyOf={android.Manifest.permission.SCORE_NETWORKS, "android.permission.REQUEST_NETWORK_SCORES"}) public boolean clearScores() throws java.lang.SecurityException;
android10-security-release/api/system-current.txt:4136:    method @RequiresPermission(anyOf={android.Manifest.permission.SCORE_NETWORKS, "android.permission.REQUEST_NETWORK_SCORES"}) public void disableScoring() throws java.lang.SecurityException;
android10-security-release/api/system-current.txt:4138:    method @RequiresPermission(anyOf={android.Manifest.permission.SCORE_NETWORKS, "android.permission.REQUEST_NETWORK_SCORES"}) public boolean setActiveScorer(String) throws java.lang.SecurityException;
android10-security-release/api/system-current.txt:4139:    method @RequiresPermission(android.Manifest.permission.SCORE_NETWORKS) public boolean updateScores(android.net.ScoredNetwork[]) throws java.lang.SecurityException;
android10-security-release/api/system-current.txt:6111:  public class DecryptionFailedException extends java.security.GeneralSecurityException {
android10-security-release/api/system-current.txt:6115:  public class InternalRecoveryServiceException extends java.security.GeneralSecurityException {
android10-security-release/api/system-current.txt:6171:  public class LockScreenRequiredException extends java.security.GeneralSecurityException {
android10-security-release/api/system-current.txt:6206:  public class SessionExpiredException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:3941:    method @Deprecated public java.util.List<android.app.ActivityManager.RecentTaskInfo> getRecentTasks(int, int) throws java.lang.SecurityException;
android10-security-release/api/current.txt:3943:    method public android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName) throws java.lang.SecurityException;
android10-security-release/api/current.txt:3944:    method @Deprecated public java.util.List<android.app.ActivityManager.RunningServiceInfo> getRunningServices(int) throws java.lang.SecurityException;
android10-security-release/api/current.txt:3945:    method @Deprecated public java.util.List<android.app.ActivityManager.RunningTaskInfo> getRunningTasks(int) throws java.lang.SecurityException;
android10-security-release/api/current.txt:4439:  public final class AuthenticationRequiredException extends java.lang.SecurityException implements android.os.Parcelable {
android10-security-release/api/current.txt:6020:  public final class RecoverableSecurityException extends java.lang.SecurityException implements android.os.Parcelable {
android10-security-release/api/current.txt:6021:    ctor public RecoverableSecurityException(@NonNull Throwable, @NonNull CharSequence, @NonNull android.app.RemoteAction);
android10-security-release/api/current.txt:6026:    field @NonNull public static final android.os.Parcelable.Creator<android.app.RecoverableSecurityException> CREATOR;
android10-security-release/api/current.txt:6651:    method @Deprecated @Nullable public String getCertInstallerPackage(@NonNull android.content.ComponentName) throws java.lang.SecurityException;
android10-security-release/api/current.txt:6764:    method @Deprecated public void setCertInstallerPackage(@NonNull android.content.ComponentName, @Nullable String) throws java.lang.SecurityException;
android10-security-release/api/current.txt:6780:    method public void setLockTaskPackages(@NonNull android.content.ComponentName, @NonNull String[]) throws java.lang.SecurityException;
android10-security-release/api/current.txt:7692:    method public android.app.usage.NetworkStats queryDetails(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android10-security-release/api/current.txt:7693:    method public android.app.usage.NetworkStats queryDetailsForUid(int, String, long, long, int) throws java.lang.SecurityException;
android10-security-release/api/current.txt:7694:    method public android.app.usage.NetworkStats queryDetailsForUidTag(int, String, long, long, int, int) throws java.lang.SecurityException;
android10-security-release/api/current.txt:7695:    method public android.app.usage.NetworkStats queryDetailsForUidTagState(int, String, long, long, int, int, int) throws java.lang.SecurityException;
android10-security-release/api/current.txt:7696:    method public android.app.usage.NetworkStats querySummary(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android10-security-release/api/current.txt:7697:    method public android.app.usage.NetworkStats.Bucket querySummaryForDevice(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android10-security-release/api/current.txt:7698:    method public android.app.usage.NetworkStats.Bucket querySummaryForUser(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android10-security-release/api/current.txt:9175:    method public void onSecurityException(android.accounts.Account, android.os.Bundle, String, android.content.SyncResult);
android10-security-release/api/current.txt:25255:    method public void setDataSource(android.content.Context, android.net.Uri) throws java.lang.IllegalArgumentException, java.lang.SecurityException;
android10-security-release/api/current.txt:25376:    method public void setDataSource(@NonNull android.content.Context, @NonNull android.net.Uri) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
android10-security-release/api/current.txt:25378:    method public void setDataSource(@NonNull android.content.Context, @NonNull android.net.Uri, @Nullable java.util.Map<java.lang.String,java.lang.String>) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
android10-security-release/api/current.txt:25379:    method public void setDataSource(String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
android10-security-release/api/current.txt:35025:    method public static final void setThreadPriority(int, int) throws java.lang.IllegalArgumentException, java.lang.SecurityException;
android10-security-release/api/current.txt:35026:    method public static final void setThreadPriority(int) throws java.lang.IllegalArgumentException, java.lang.SecurityException;
android10-security-release/api/current.txt:35065:    method public static void verifyPackage(java.io.File, android.os.RecoverySystem.ProgressListener, java.io.File) throws java.security.GeneralSecurityException, java.io.IOException;
android10-security-release/api/current.txt:58604:    ctor protected ObjectInputStream() throws java.io.IOException, java.lang.SecurityException;
android10-security-release/api/current.txt:58606:    method protected boolean enableResolveObject(boolean) throws java.lang.SecurityException;
android10-security-release/api/current.txt:58662:    ctor protected ObjectOutputStream() throws java.io.IOException, java.lang.SecurityException;
android10-security-release/api/current.txt:58667:    method protected boolean enableReplaceObject(boolean) throws java.lang.SecurityException;
android10-security-release/api/current.txt:59736:    method @NonNull public java.lang.reflect.Constructor<T> getConstructor(@Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android10-security-release/api/current.txt:59737:    method @NonNull public java.lang.reflect.Constructor<?>[] getConstructors() throws java.lang.SecurityException;
android10-security-release/api/current.txt:59741:    method @NonNull public java.lang.reflect.Constructor<T> getDeclaredConstructor(@Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android10-security-release/api/current.txt:59742:    method @NonNull public java.lang.reflect.Constructor<?>[] getDeclaredConstructors() throws java.lang.SecurityException;
android10-security-release/api/current.txt:59745:    method @NonNull public java.lang.reflect.Method getDeclaredMethod(@NonNull String, @Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android10-security-release/api/current.txt:59746:    method @NonNull public java.lang.reflect.Method[] getDeclaredMethods() throws java.lang.SecurityException;
android10-security-release/api/current.txt:59753:    method @NonNull public java.lang.reflect.Field[] getFields() throws java.lang.SecurityException;
android10-security-release/api/current.txt:59757:    method @NonNull public java.lang.reflect.Method getMethod(@NonNull String, @Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android10-security-release/api/current.txt:59758:    method @NonNull public java.lang.reflect.Method[] getMethods() throws java.lang.SecurityException;
android10-security-release/api/current.txt:60459:  public class SecurityException extends java.lang.RuntimeException {
android10-security-release/api/current.txt:60460:    ctor public SecurityException();
android10-security-release/api/current.txt:60461:    ctor public SecurityException(String);
android10-security-release/api/current.txt:60462:    ctor public SecurityException(String, Throwable);
android10-security-release/api/current.txt:60463:    ctor public SecurityException(Throwable);
android10-security-release/api/current.txt:61315:    method public static void setAccessible(java.lang.reflect.AccessibleObject[], boolean) throws java.lang.SecurityException;
android10-security-release/api/current.txt:61316:    method public void setAccessible(boolean) throws java.lang.SecurityException;
android10-security-release/api/current.txt:64047:  public class AccessControlException extends java.lang.SecurityException {
android10-security-release/api/current.txt:64177:  public class DigestException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64211:  public class GeneralSecurityException extends java.lang.Exception {
android10-security-release/api/current.txt:64212:    ctor public GeneralSecurityException();
android10-security-release/api/current.txt:64213:    ctor public GeneralSecurityException(String);
android10-security-release/api/current.txt:64214:    ctor public GeneralSecurityException(String, Throwable);
android10-security-release/api/current.txt:64215:    ctor public GeneralSecurityException(Throwable);
android10-security-release/api/current.txt:64219:    method public void checkGuard(Object) throws java.lang.SecurityException;
android10-security-release/api/current.txt:64224:    method public Object getObject() throws java.lang.SecurityException;
android10-security-release/api/current.txt:64260:  public class InvalidAlgorithmParameterException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64286:  public class KeyException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64448:  public class KeyStoreException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64511:  public class NoSuchAlgorithmException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64518:  public class NoSuchProviderException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64533:    method public void checkGuard(Object) throws java.lang.SecurityException;
android10-security-release/api/current.txt:64750:  public class SignatureException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64799:  public class UnrecoverableEntryException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64886:  public class CRLException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64939:  public class CertPathBuilderException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:64979:  public class CertPathValidatorException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:65032:  public class CertStoreException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:65073:  public class CertificateException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:65596:  public class InvalidKeySpecException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:65603:  public class InvalidParameterSpecException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:72957:    ctor public FileHandler() throws java.io.IOException, java.lang.SecurityException;
android10-security-release/api/current.txt:72958:    ctor public FileHandler(String) throws java.io.IOException, java.lang.SecurityException;
android10-security-release/api/current.txt:72959:    ctor public FileHandler(String, boolean) throws java.io.IOException, java.lang.SecurityException;
android10-security-release/api/current.txt:72960:    ctor public FileHandler(String, int, int) throws java.io.IOException, java.lang.SecurityException;
android10-security-release/api/current.txt:72961:    ctor public FileHandler(String, int, int, boolean) throws java.io.IOException, java.lang.SecurityException;
android10-security-release/api/current.txt:72978:    method public abstract void close() throws java.lang.SecurityException;
android10-security-release/api/current.txt:72988:    method public void setEncoding(String) throws java.lang.SecurityException, java.io.UnsupportedEncodingException;
android10-security-release/api/current.txt:72990:    method public void setFilter(java.util.logging.Filter) throws java.lang.SecurityException;
android10-security-release/api/current.txt:72991:    method public void setFormatter(java.util.logging.Formatter) throws java.lang.SecurityException;
android10-security-release/api/current.txt:72992:    method public void setLevel(java.util.logging.Level) throws java.lang.SecurityException;
android10-security-release/api/current.txt:73018:    method @Deprecated public void addPropertyChangeListener(java.beans.PropertyChangeListener) throws java.lang.SecurityException;
android10-security-release/api/current.txt:73019:    method public void checkAccess() throws java.lang.SecurityException;
android10-security-release/api/current.txt:73025:    method public void readConfiguration() throws java.io.IOException, java.lang.SecurityException;
android10-security-release/api/current.txt:73026:    method public void readConfiguration(java.io.InputStream) throws java.io.IOException, java.lang.SecurityException;
android10-security-release/api/current.txt:73027:    method @Deprecated public void removePropertyChangeListener(java.beans.PropertyChangeListener) throws java.lang.SecurityException;
android10-security-release/api/current.txt:73028:    method public void reset() throws java.lang.SecurityException;
android10-security-release/api/current.txt:73062:    method public void addHandler(@NonNull java.util.logging.Handler) throws java.lang.SecurityException;
android10-security-release/api/current.txt:73111:    method public void removeHandler(@Nullable java.util.logging.Handler) throws java.lang.SecurityException;
android10-security-release/api/current.txt:73112:    method public void setFilter(@Nullable java.util.logging.Filter) throws java.lang.SecurityException;
android10-security-release/api/current.txt:73113:    method public void setLevel(@Nullable java.util.logging.Level) throws java.lang.SecurityException;
android10-security-release/api/current.txt:73140:    method public void close() throws java.lang.SecurityException;
android10-security-release/api/current.txt:73145:    method public void setPushLevel(java.util.logging.Level) throws java.lang.SecurityException;
android10-security-release/api/current.txt:73161:    method public void close() throws java.lang.SecurityException;
android10-security-release/api/current.txt:73164:    method protected void setOutputStream(java.io.OutputStream) throws java.lang.SecurityException;
android10-security-release/api/current.txt:74082:  public class BadPaddingException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:74200:  public class ExemptionMechanismException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:74215:  public class IllegalBlockSizeException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:74303:  public class NoSuchPaddingException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:74345:  public class ShortBufferException extends java.security.GeneralSecurityException {
android10-security-release/api/current.txt:75910:  public class LoginException extends java.security.GeneralSecurityException {
android10-security-release/api/test-current.txt:87:    method @RequiresPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS) public void removeStacksInWindowingModes(int[]) throws java.lang.SecurityException;
android10-security-release/api/test-current.txt:88:    method @RequiresPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS) public void removeStacksWithActivityTypes(int[]) throws java.lang.SecurityException;
android10-security-release/api/test-current.txt:90:    method @RequiresPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS) public void resizeStack(int, android.graphics.Rect) throws java.lang.SecurityException;
android10-security-release/api/test-current.txt:94:    method @RequiresPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS) public void setTaskWindowingMode(int, int, boolean) throws java.lang.SecurityException;
android10-security-release/api/test-current.txt:95:    method @RequiresPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS) public void setTaskWindowingModeSplitScreenPrimary(int, int, boolean, boolean, android.graphics.Rect, boolean) throws java.lang.SecurityException;
Binary file android10-security-release/.git/index matches
android10-security-release/proto/src/metrics_constants/metrics_constants.proto:3885:    // Value 2: A SecurityException was thrown
android10-security-release/keystore/java/android/security/keystore/AttestationUtils.java:241:     * @exception SecurityException if you are not permitted to obtain an attestation of the
android10-security-release/keystore/java/android/security/keystore/AndroidKeyStoreCipherSpiBase.java:34:import java.security.GeneralSecurityException;
android10-security-release/keystore/java/android/security/keystore/AndroidKeyStoreCipherSpiBase.java:265:        GeneralSecurityException e = KeyStoreCryptoOperationUtils.getExceptionForCipherInit(
android10-security-release/keystore/java/android/security/keystore/KeyStoreCryptoOperationUtils.java:24:import java.security.GeneralSecurityException;
android10-security-release/keystore/java/android/security/keystore/KeyStoreCryptoOperationUtils.java:74:    public static GeneralSecurityException getExceptionForCipherInit(
android10-security-release/nfc-extras/java/com/android/nfc_extras/NfcAdapterExtras.java:228:     * @throws java.lang.SecurityException if authentication failed
android10-security-release/config/preloaded-classes:5800:java.lang.SecurityException
android10-security-release/config/preloaded-classes:6153:java.security.GeneralSecurityException
android10-security-release/config/hiddenapi-greylist-max-o.txt:4074:Landroid/app/AppOpsManager;->buildSecurityExceptionMsg(IILjava/lang/String;)Ljava/lang/String;
android10-security-release/config/hiddenapi-greylist-max-o.txt:8879:Landroid/app/RecoverableSecurityException$LocalDialog;
android10-security-release/config/hiddenapi-greylist-max-o.txt:8880:Landroid/app/RecoverableSecurityException$LocalDialog;-><init>()V
android10-security-release/config/hiddenapi-greylist-max-o.txt:8881:Landroid/app/RecoverableSecurityException;
android10-security-release/config/hiddenapi-greylist-max-o.txt:8882:Landroid/app/RecoverableSecurityException;-><init>(Landroid/os/Parcel;)V
android10-security-release/config/hiddenapi-greylist-max-o.txt:8883:Landroid/app/RecoverableSecurityException;-><init>(Ljava/lang/Throwable;Ljava/lang/CharSequence;Landroid/app/RemoteAction;)V
android10-security-release/config/hiddenapi-greylist-max-o.txt:8884:Landroid/app/RecoverableSecurityException;-><init>(Ljava/lang/Throwable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/app/PendingIntent;)V
android10-security-release/config/hiddenapi-greylist-max-o.txt:8885:Landroid/app/RecoverableSecurityException;->CREATOR:Landroid/os/Parcelable$Creator;
android10-security-release/config/hiddenapi-greylist-max-o.txt:8886:Landroid/app/RecoverableSecurityException;->getUserAction()Landroid/app/RemoteAction;
android10-security-release/config/hiddenapi-greylist-max-o.txt:8887:Landroid/app/RecoverableSecurityException;->getUserMessage()Ljava/lang/CharSequence;
android10-security-release/config/hiddenapi-greylist-max-o.txt:8888:Landroid/app/RecoverableSecurityException;->mUserAction:Landroid/app/RemoteAction;
android10-security-release/config/hiddenapi-greylist-max-o.txt:8889:Landroid/app/RecoverableSecurityException;->mUserMessage:Ljava/lang/CharSequence;
android10-security-release/config/hiddenapi-greylist-max-o.txt:8890:Landroid/app/RecoverableSecurityException;->showAsDialog(Landroid/app/Activity;)V
android10-security-release/config/hiddenapi-greylist-max-o.txt:8891:Landroid/app/RecoverableSecurityException;->showAsNotification(Landroid/content/Context;)V
android10-security-release/config/hiddenapi-greylist-max-o.txt:8892:Landroid/app/RecoverableSecurityException;->showAsNotification(Landroid/content/Context;Ljava/lang/String;)V
android10-security-release/config/hiddenapi-greylist-max-o.txt:8893:Landroid/app/RecoverableSecurityException;->TAG:Ljava/lang/String;
android10-security-release/config/dirty-image-objects:349:java.lang.SecurityException
android10-security-release/config/boot-image-profile.txt:12995:HSPLandroid/security/keystore/KeyStoreCryptoOperationUtils;->getExceptionForCipherInit(Landroid/security/KeyStore;Landroid/security/keystore/AndroidKeyStoreKey;I)Ljava/security/GeneralSecurityException;
android10-security-release/config/boot-image-profile.txt:26638:HSPLjava/lang/SecurityException;-><init>(Ljava/lang/String;)V
android10-security-release/config/boot-image-profile.txt:38859:Ljava/lang/SecurityException;
android10-security-release/config/boot-image-profile.txt:39212:Ljava/security/GeneralSecurityException;
android10-security-release/config/boot-image-profile.txt:43504:HSPLjava/security/GeneralSecurityException;-><init>(Ljava/lang/Throwable;)V
android10-security-release/telephony/java/android/telephony/PhoneNumberUtils.java:2253:        } catch (SecurityException ex) {
android10-security-release/telephony/java/android/telephony/VisualVoicemailService.java:273:     * @throws SecurityException if the caller is not the current default dialer
android10-security-release/telephony/java/android/telephony/SmsManager.java:382:        //    an incorrect SecurityException.
android10-security-release/telephony/java/android/telephony/SmsManager.java:594:        //    an incorrect SecurityException.
android10-security-release/telephony/java/android/telephony/SmsManager.java:845:            //    SEND_SMS, it will throw an incorrect SecurityException.
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:1605:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:1646:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:1708:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:1775:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:1802:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:3314:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:3342:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:3585:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:3614:     *     higher, then a SecurityException is thrown.</li>
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:4219:     * @throws SecurityException if the caller is not the current default dialer
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:4672:     * @throws SecurityException if the caller does not have carrier privileges or is not the
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:5017:     * {@link SecurityException} will be thrown otherwise.
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:8472:        } catch (SecurityException e) {
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:8491:        } catch (SecurityException e) {
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:8511:        } catch (SecurityException e) {
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:8531:        } catch (SecurityException e) {
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:8550:        } catch (SecurityException e) {
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:8823:        } catch (SecurityException e) {
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:10558:     * or throw a SecurityException if the caller does not have the permission.
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:10611:     * or throw a SecurityException if the caller does not have the permission.
android10-security-release/telephony/java/android/telephony/TelephonyManager.java:10692:     * network; {@code false} if it is not; or throw an SecurityException if the caller does not
android10-security-release/telephony/java/android/telephony/mbms/vendor/MbmsGroupCallServiceBase.java:189:     * May throw an {@link IllegalArgumentException} or a {@link SecurityException}, which
android10-security-release/telephony/java/android/telephony/mbms/vendor/MbmsStreamingServiceBase.java:47:     * May throw an {@link IllegalArgumentException} or a {@link SecurityException}, which
android10-security-release/telephony/java/android/telephony/mbms/MbmsTempFileProvider.java:96:            throw new SecurityException("Provider must not be exported");
android10-security-release/telephony/java/android/telephony/mbms/MbmsTempFileProvider.java:99:            throw new SecurityException("Provider must grant uri permissions");
android10-security-release/telephony/java/android/telephony/mbms/MbmsTempFileProvider.java:167:            throw new SecurityException("Resolved path jumped beyond configured root");
android10-security-release/telephony/java/android/telephony/SubscriptionManager.java:2326:     * SecurityException if the caller hasn't got the right permission.
android10-security-release/telephony/java/android/telephony/SubscriptionManager.java:2363:     * @throws SecurityException if the caller doesn't meet the requirements
android10-security-release/telephony/java/android/telephony/SubscriptionManager.java:2394:     * @throws SecurityException if the caller doesn't meet the requirements
android10-security-release/telephony/java/android/telephony/SubscriptionManager.java:2435:     * @throws SecurityException if the caller doesn't meet the requirements
android10-security-release/telephony/java/android/telephony/SubscriptionManager.java:2470:     * @throws SecurityException if the caller doesn't meet the requirements
android10-security-release/telephony/java/android/telephony/SubscriptionManager.java:2793:     * @throws SecurityException if the caller doesn't meet the requirements
android10-security-release/telephony/java/android/telephony/SubscriptionManager.java:2841:     * @throws SecurityException if the caller doesn't meet the requirements
android10-security-release/telephony/java/android/telephony/SubscriptionManager.java:2894:     * @throws SecurityException if the caller doesn't meet the requirements
android10-security-release/telephony/java/android/telephony/SubscriptionManager.java:2941:     * @throws SecurityException if the caller doesn't meet the requirements
android10-security-release/telephony/java/com/android/internal/telephony/CallerInfo.java:484:        } catch (SecurityException se) {
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:78:     *   <li>throw SecurityException: if the caller didn't declare any of these permissions, or, for
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:103:    /** Identical to checkCallingOrSelfReadPhoneState but never throws SecurityException */
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:108:        } catch (SecurityException se) {
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:120:     *   <li>throw SecurityException: if the caller didn't declare any of these permissions, or, for
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:163:        } catch (SecurityException privilegedPhoneStateException) {
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:167:            } catch (SecurityException phoneStateException) {
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:190:     * of throwing a SecurityException. Therefore, the callers cannot tell the difference
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:193:     * category expect SecurityExceptions; apps in the latter don't. So this method is suitable for
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:215:        } catch (SecurityException privilegedPhoneStateException) {
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:219:            } catch (SecurityException phoneStateException) {
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:241:     *   <li>throw SecurityException: if the caller does not meet any of the requirements and is
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:245:     *       identifiers so false is returned instead of throwing a SecurityException to indicate
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:263:     *   <li>throw SecurityException: if the caller does not meet any of the requirements and is
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:268:     *       to the device identifiers so false is returned instead of throwing a SecurityException
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:286:     *   <li>throw SecurityException: if the caller does not meet any of the requirements and is
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:290:     *       identifiers so false is returned instead of throwing a SecurityException to indicate
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:358:     * @throws SecurityException if the caller does not meet any of the requirements for the
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:417:        throw new SecurityException(message + ": The user " + uid
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:486:        } catch (SecurityException readPhoneStateSecurityException) {
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:497:        } catch (SecurityException readSmsSecurityException) {
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:510:        } catch (SecurityException readPhoneNumberSecurityException) {
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:513:        throw new SecurityException(message + ": Neither user " + uid +
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:523:     * @throws SecurityException if the caller does not have the required permission/privileges
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:540:     * @throws SecurityException if the caller does not have the required permission/privileges
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:560:     * @throws SecurityException if the caller does not have the required permission/privileges
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:580:     * @throws SecurityException if the caller does not have the required privileges
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:599:            throw new SecurityException(message);
android10-security-release/telephony/java/com/android/internal/telephony/TelephonyPermissions.java:647:        throw new SecurityException(message + ": Only shell user can call it");
android10-security-release/apct-tests/perftests/core/src/android/os/ParcelPerfTest.java:203:            SecurityException e = new SecurityException("TestMessage");
android10-security-release/apct-tests/perftests/core/src/android/os/ParcelPerfTest.java:223:            p.writeException(new SecurityException(msg));
android10-security-release/apct-tests/perftests/core/src/android/os/ParcelPerfTest.java:228:            } catch (SecurityException e) {
android10-security-release/apct-tests/perftests/core/src/android/os/ParcelPerfTest.java:241:                } catch (SecurityException expected) {
android10-security-release/tests/testables/tests/src/android/testing/TestablePermissionsTest.java:70:    @Test(expected = SecurityException.class)
android10-security-release/tests/testables/tests/src/android/testing/TestablePermissionsTest.java:83:    @Test(expected = SecurityException.class)
android10-security-release/tests/testables/src/android/testing/TestablePermissions.java:71:            throw new SecurityException();
android10-security-release/tests/testables/src/android/testing/TestablePermissions.java:77:            throw new SecurityException();
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:556:        } catch (SecurityException se) {
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:633:            fail("expected SecurityException");
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:634:        } catch (SecurityException e) {
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:640:            fail("expected SecurityException");
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:641:        } catch (SecurityException e) {
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:649:            fail("expected SecurityException");
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:650:        } catch (SecurityException e) {
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:656:            fail("expected SecurityException");
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:657:        } catch (SecurityException e) {
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:663:            fail("expected SecurityException");
android10-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:664:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:44:            fail("IActivityManager.moveTaskToFront did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:46:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:57:            fail("IActivityManager.updateConfiguration did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:59:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:70:            fail("IActivityManager.setDebugApp did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:72:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:83:            fail("IActivityManager.setProcessLimit did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:85:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:96:            fail("IActivityManager.setAlwaysFinish did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:98:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:109:            fail("IActivityManager.signalPersistentProcesses did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:111:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:122:            fail("IActivityManager.unhandledBack did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:124:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:135:            fail("IActivityManager.setActivityController did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:137:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:148:            fail("IActivityManager.shutdown did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:150:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:161:            fail("IActivityManager.stopAppSwitches did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:163:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:171:            fail("IActivityManager.resumeAppSwitches did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:173:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:46:                    "did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:47:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:61:                    "did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:62:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:83:                   "did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:84:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:98:                    " did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:99:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:113:                    "did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:114:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:128:                   "did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:129:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:45:            fail("SmsManager.sendTextMessage did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:46:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:61:            fail("SmsManager.sendDataMessage did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:62:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:80:            fail("SmsManager.sendMultipartTextMessage did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:81:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/VibratorServicePermissionTest.java:56:            fail("vibrate did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/VibratorServicePermissionTest.java:57:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/VibratorServicePermissionTest.java:71:            fail("cancelVibrate did not throw SecurityException as expected");
android10-security-release/tests/permission/src/com/android/framework/permission/tests/VibratorServicePermissionTest.java:72:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:47:            fail("IWindowManager.setEventDispatching did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:49:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:57:            fail("IWindowManager.addWindowToken did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:59:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:67:            fail("IWindowManager.removeWindowToken did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:69:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:77:            fail("IWindowManager.prepareAppTransition did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:79:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:87:            fail("IWindowManager.executeAppTransition did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:89:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:101:            fail("IWindowManager.disableKeyguard did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:103:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:111:            fail("IWindowManager.reenableKeyguard did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:113:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:121:            fail("IWindowManager.exitKeyguardSecurely did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:123:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:134:            fail("IWindowManager.setAnimationScale did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:136:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:144:            fail("IWindowManager.setAnimationScales did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:146:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:157:            fail("IWindowManager.updateRotation did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:159:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:167:            fail("IWindowManager.freezeRotation did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:169:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:177:            fail("IWindowManager.thawRotation did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:179:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ServiceManagerPermissionTests.java:42:            fail("ServiceManager.addService did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ServiceManagerPermissionTests.java:44:        } catch (SecurityException e) {
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ServiceManagerPermissionTests.java:80:            fail("IServiceManager.setPermissionController did not throw SecurityException as"
android10-security-release/tests/permission/src/com/android/framework/permission/tests/ServiceManagerPermissionTests.java:82:        } catch (SecurityException e) {
android10-security-release/tests/net/java/android/net/NetworkStackTest.java:68:        } catch (SecurityException e) {
android10-security-release/tests/net/java/android/net/NetworkStackTest.java:69:            // Expect to get a SecurityException
android10-security-release/tests/net/java/com/android/server/IpSecServiceParameterizedTest.java:133:            throw new SecurityException("Unavailable permission requested");
android10-security-release/tests/net/java/com/android/server/IpSecServiceParameterizedTest.java:721:            fail("Expected a SecurityException for badPackage.");
android10-security-release/tests/net/java/com/android/server/IpSecServiceParameterizedTest.java:722:        } catch (SecurityException expected) {
android10-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3195:    public void testNetworkSpecifierUidSpoofSecurityException() {
android10-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3204:                throw new SecurityException("failure");
android10-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3222:            fail("Network request with spoofed UID did not throw a SecurityException");
android10-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3223:        } catch (SecurityException e) {
android10-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3236:        // permission should get SecurityException.
android10-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3239:            fail("Expected SecurityException filing a callback with signal strength");
android10-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3240:        } catch (SecurityException expected) {
android10-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3247:            fail("Expected SecurityException filing a callback with signal strength");
android10-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3248:        } catch (SecurityException expected) {
android10-security-release/tests/net/java/com/android/server/net/NetworkStatsCollectionTest.java:257:            fail("Should have thrown SecurityException for accessing different UID");
android10-security-release/tests/net/java/com/android/server/net/NetworkStatsCollectionTest.java:258:        } catch (SecurityException e) {
android10-security-release/cmds/statsd/tools/loadtest/src/com/android/statsd/loadtest/PerfDataRecorder.java:72:        } catch (IOException | SecurityException | NullPointerException e) {
android10-security-release/cmds/statsd/tools/loadtest/src/com/android/statsd/loadtest/PerfDataRecorder.java:73:            // SecurityException may occur when trying to dump multi-user info.
android10-security-release/test-runner/src/android/test/InstrumentationTestRunner.java:629:        } catch (SecurityException e) {
android10-security-release/telecomm/java/android/telecom/TelecomManager.java:989:     * A {@link SecurityException} will be thrown if a called is not the default dialer, or lacks
android10-security-release/telecomm/java/android/telecom/TelecomManager.java:1128:     * A {@link SecurityException} will be thrown if an app tries to register a
android10-security-release/telecomm/java/android/telecom/TelecomManager.java:1619:     * For a managed {@link ConnectionService}, a {@link SecurityException} will be thrown if either
android10-security-release/telecomm/java/android/telecom/TelecomManager.java:1623:     * For a self-managed {@link ConnectionService}, a {@link SecurityException} will be thrown if
android10-security-release/telecomm/java/android/telecom/TelecomManager.java:2013:     * For a managed {@link ConnectionService}, a {@link SecurityException} will be thrown if either
android10-security-release/telecomm/java/android/telecom/TelecomManager.java:2018:     * For a self-managed {@link ConnectionService}, a {@link SecurityException} will be thrown if
android10-security-release/media/jni/android_media_MediaPlayer2.cpp:269:            jniThrowException(env, "java/lang/SecurityException", NULL);
android10-security-release/media/jni/android_media_MediaPlayer.cpp:205:            jniThrowException(env, "java/lang/SecurityException", NULL);
android10-security-release/media/java/android/media/Ringtone.java:262:                } catch (SecurityException e) {
android10-security-release/media/java/android/media/Ringtone.java:342:        } catch (SecurityException | IOException e) {
android10-security-release/media/java/android/media/MediaExtractor.java:134:        } catch (SecurityException ex) {
android10-security-release/media/java/android/media/tv/TvContract.java:280:     * provider will be cleared. Once a package is blocked, {@link SecurityException} will be thrown
android10-security-release/media/java/android/media/tv/TvContract.java:299:     * the content provider will be cleared. Once a package is blocked, {@link SecurityException}
android10-security-release/media/java/android/media/tv/TvContract.java:325:     * the content provider will be cleared. Once a package is blocked, {@link SecurityException}
android10-security-release/media/java/android/media/MediaMetadataRetriever.java:152:     * @throws SecurityException if the Uri cannot be used due to lack of
android10-security-release/media/java/android/media/MediaMetadataRetriever.java:156:        throws IllegalArgumentException, SecurityException {
android10-security-release/media/java/android/media/MediaMetadataRetriever.java:191:        } catch (SecurityException ex) {
android10-security-release/media/java/android/media/RingtoneManager.java:934:        } catch (SecurityException | IOException e) {
android10-security-release/media/java/android/media/midi/MidiDeviceServer.java:190:                    throw new SecurityException("Can't access private device from different UID");
android10-security-release/media/java/android/media/midi/MidiDeviceServer.java:228:                    throw new SecurityException("Can't access private device from different UID");
android10-security-release/media/java/android/media/midi/MidiDeviceServer.java:325:                throw new SecurityException("setDeviceInfo should only be called by MidiService");
android10-security-release/media/java/android/media/AudioManager.java:839:     * @throws SecurityException if the adjustment triggers a Do Not Disturb change
android10-security-release/media/java/android/media/AudioManager.java:1161:     * @throws SecurityException if the volume change triggers a Do Not Disturb change
android10-security-release/media/java/android/media/MediaPlayer.java:920:        } catch (SecurityException ex) {
android10-security-release/media/java/android/media/MediaPlayer.java:985:        } catch (SecurityException ex) {
android10-security-release/media/java/android/media/MediaPlayer.java:1000:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android10-security-release/media/java/android/media/MediaPlayer.java:1096:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android10-security-release/media/java/android/media/MediaPlayer.java:1104:        } catch (NullPointerException | SecurityException | IOException ex) {
android10-security-release/media/java/android/media/MediaPlayer.java:1124:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android10-security-release/media/java/android/media/MediaPlayer.java:1138:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android10-security-release/media/java/android/media/MediaPlayer.java:1144:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException
android10-security-release/media/java/android/media/MediaPlayer.java:1166:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android10-security-release/media/java/android/media/MediaPlayer.java:1189:        throws IOException, IllegalArgumentException, SecurityException, IllegalStateException;
android10-security-release/media/java/android/media/MediaPlayer.java:2903:        } catch (SecurityException ex) {
android10-security-release/media/apex/java/android/media/MediaPlayer2.java:970:        } catch (NullPointerException | SecurityException | IOException ex) {
android10-security-release/media/apex/java/android/media/MediaPlayer2.java:998:        } catch (NullPointerException | SecurityException | IOException ex) {
android10-security-release/media/apex/java/android/media/MediaPlayer2.java:4624:            } catch (SecurityException e) {
android10-security-release/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/CameraTestHelper.java:141:        } catch (SecurityException e) {
android10-security-release/media/tests/EffectsTest/src/com/android/effectstest/SimplePlayer.java:134:                  } catch (SecurityException ex) {
