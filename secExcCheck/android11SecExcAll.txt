android11-security-release/wifi/java/android/net/wifi/WifiManager.java:1849:     * without the permission will trigger a {@link java.lang.SecurityException}.
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:1881:     * without the permission will trigger a {@link java.lang.SecurityException}.
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:1932:     * @throws {@link SecurityException} if the caller is missing required permissions.
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:2902:     * @throws  {@link java.lang.SecurityException} if the caller is missing required permissions.
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:3153:     * the permissions will trigger a {@link java.lang.SecurityException}.
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:3288:     * {@link java.lang.SecurityException}.
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:3761:     * without the permission will trigger a {@link java.lang.SecurityException}.
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:4157:        } catch (SecurityException e) {
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:4255:        } catch (SecurityException e) {
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:4292:        } catch (SecurityException e) {
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:5228:     * without the permission will trigger a {@link java.lang.SecurityException}.
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:5751:     * without the permission will trigger a {@link java.lang.SecurityException}.
android11-security-release/wifi/java/android/net/wifi/WifiManager.java:5849:     * Callers without the permission will trigger a {@link java.lang.SecurityException}.
android11-security-release/wifi/java/android/net/wifi/RttManager.java:1015:        } catch (SecurityException e) {
android11-security-release/wifi/java/android/net/wifi/hotspot2/ConfigParser.java:30:import java.security.GeneralSecurityException;
android11-security-release/wifi/java/android/net/wifi/hotspot2/ConfigParser.java:209:            } catch(GeneralSecurityException | IOException e) {
android11-security-release/wifi/java/android/net/wifi/hotspot2/ConfigParser.java:455:            throws GeneralSecurityException, IOException {
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:480:     * Verify a SecurityException is thrown for callers without proper permissions for
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:483:    @Test(expected = SecurityException.class)
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:484:    public void testStartLocalOnlyHotspotThrowsSecurityException() throws Exception {
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:486:        doThrow(new SecurityException()).when(mWifiService).startLocalOnlyHotspot(
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:704:     * Verify a SecurityException resulting from an application without necessary permissions will
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:707:    @Test(expected = SecurityException.class)
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:708:    public void testLocalOnlyHotspotCallbackFullOnSecurityException() throws Exception {
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:710:        doThrow(new SecurityException()).when(mWifiService).startLocalOnlyHotspot(
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:715:        } catch (SecurityException e) {
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:824:     * Verify a SecurityException is thrown for callers without proper permissions for
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:827:    @Test(expected = SecurityException.class)
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:828:    public void testStartWatchLocalOnlyHotspotThrowsSecurityException() throws Exception {
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:830:        doThrow(new SecurityException()).when(mWifiService)
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:1316:        doThrow(new SecurityException()).when(mWifiService).setWifiApConfiguration(any(), any());
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:1321:        } catch (SecurityException e) { }
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:1353:        doThrow(new SecurityException()).when(mWifiService).setSoftApConfiguration(any(), any());
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:1358:        } catch (SecurityException e) { }
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:2014:    public void testConnectWithListenerHandleSecurityException() throws Exception {
android11-security-release/wifi/tests/src/android/net/wifi/WifiManagerTest.java:2015:        doThrow(new SecurityException()).when(mWifiService)
android11-security-release/tools/powermodel/src/com/android/powermodel/RawBatteryStats.java:784:                    | ExceptionInInitializerError | SecurityException ex) {
Binary file android11-security-release/tools/aapt2/integration-tests/CommandTests/android-28.jar matches
Binary file android11-security-release/tools/preload/20100223.compiled matches
Binary file android11-security-release/tools/preload/20080522.compiled matches
Binary file android11-security-release/tools/preload/20090811.compiled matches
android11-security-release/test-base/src/android/test/InstrumentationTestCase.java:281:                    } catch (SecurityException e) {
android11-security-release/test-base/src/android/test/InstrumentationTestCase.java:312:            } catch (SecurityException e) {
android11-security-release/test-base/src/android/test/InstrumentationTestCase.java:344:                } catch (SecurityException e) {
android11-security-release/test-base/src/android/test/AndroidTestCase.java:89:     * attempting to start the activity and validating that a {@link SecurityException}
android11-security-release/test-base/src/android/test/AndroidTestCase.java:108:        } catch (SecurityException expected) {
android11-security-release/test-base/src/android/test/AndroidTestCase.java:118:     * uri and ensuring a {@link SecurityException} is thrown mentioning the particular permission.
android11-security-release/test-base/src/android/test/AndroidTestCase.java:126:            fail("expected SecurityException requiring " + permission);
android11-security-release/test-base/src/android/test/AndroidTestCase.java:127:        } catch (SecurityException expected) {
android11-security-release/test-base/src/android/test/AndroidTestCase.java:136:     * the uri and ensuring a {@link SecurityException} is thrown mentioning the particular
android11-security-release/test-base/src/android/test/AndroidTestCase.java:145:            fail("expected SecurityException requiring " + permission);
android11-security-release/test-base/src/android/test/AndroidTestCase.java:146:        } catch (SecurityException expected) {
android11-security-release/core/jni/android_os_HwParcel.cpp:102:            jniThrowException(env, "java/lang/SecurityException", NULL);
android11-security-release/core/jni/android_os_HwParcel.cpp:312:                    "java/lang/SecurityException",
android11-security-release/core/jni/android_util_Binder.cpp:841:            jniThrowException(env, "java/lang/SecurityException", NULL);
android11-security-release/core/jni/android_util_Process.cpp:99:            jniThrowExceptionFmt(env, "java/lang/SecurityException",
android11-security-release/core/jni/android_util_Process.cpp:111:            jniThrowExceptionFmt(env, "java/lang/SecurityException",
android11-security-release/core/jni/android_util_Process.cpp:124:            jniThrowExceptionFmt(env, "java/lang/SecurityException",
android11-security-release/core/jni/android_util_Process.cpp:570:                jniThrowException(env, "java/lang/SecurityException", "May not put this thread into background");
android11-security-release/core/jni/android_os_Parcel.cpp:685:    jniThrowException(env, "java/lang/SecurityException",
android11-security-release/core/java/android/view/ViewRootImpl.java:9191:                        throw new SecurityException("Insufficient permissions to invoke"
android11-security-release/core/java/android/view/autofill/AutofillManager.java:2074:                throw new SecurityException("caller is not user's Augmented Autofill Service");
android11-security-release/core/java/android/view/inputmethod/InputConnectionWrapper.java:55:     * @throws SecurityException when this wrapper has non-null target and is immutable.
android11-security-release/core/java/android/view/inputmethod/InputConnectionWrapper.java:59:            throw new SecurityException("not mutable");
android11-security-release/core/java/android/view/contentcapture/ContentCaptureManager.java:516:                throw new SecurityException(resultReceiver.getStringResult());
android11-security-release/core/java/android/view/contentcapture/ContentCaptureManager.java:641:     * @throws SecurityException if caller is not the app that owns the content capture service
android11-security-release/core/java/android/view/contentcapture/ContentCaptureManager.java:716:     * @throws SecurityException if caller is not allowed to execute the method.
android11-security-release/core/java/android/view/contentcapture/ContentCaptureManager.java:725:                throw new SecurityException(resultReceiver.getStringResult());
android11-security-release/core/java/android/se/omapi/Session.java:190:     * @throws SecurityException if the calling application cannot be granted
android11-security-release/core/java/android/se/omapi/Session.java:240:     * @throws SecurityException if the calling application cannot be granted
android11-security-release/core/java/android/se/omapi/Session.java:294:     * @throws SecurityException if the calling application cannot be granted
android11-security-release/core/java/android/se/omapi/Session.java:347:     * @throws SecurityException if the calling application cannot be granted
android11-security-release/core/java/android/se/omapi/Channel.java:159:     * @throws SecurityException if the command is filtered by the security policy.
android11-security-release/core/java/android/security/keystore/recovery/LockScreenRequiredException.java:21:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/security/keystore/recovery/LockScreenRequiredException.java:31:public class LockScreenRequiredException extends GeneralSecurityException {
android11-security-release/core/java/android/security/keystore/recovery/InternalRecoveryServiceException.java:21:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/security/keystore/recovery/InternalRecoveryServiceException.java:32:public class InternalRecoveryServiceException extends GeneralSecurityException {
android11-security-release/core/java/android/security/keystore/recovery/SessionExpiredException.java:21:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/security/keystore/recovery/SessionExpiredException.java:29:public class SessionExpiredException extends GeneralSecurityException {
android11-security-release/core/java/android/security/keystore/recovery/DecryptionFailedException.java:21:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/security/keystore/recovery/DecryptionFailedException.java:30:public class DecryptionFailedException extends GeneralSecurityException {
android11-security-release/core/java/android/security/net/config/NetworkSecurityTrustManager.java:26:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/security/net/config/NetworkSecurityTrustManager.java:61:        } catch (GeneralSecurityException | IOException e) {
android11-security-release/core/java/android/security/net/config/NetworkSecurityTrustManager.java:136:                    } catch (GeneralSecurityException e) {
android11-security-release/core/java/android/bluetooth/BluetoothProfileConnector.java:95:                } catch (SecurityException se) {
android11-security-release/core/java/android/bluetooth/BluetoothPbap.java:159:            } catch (SecurityException se) {
android11-security-release/core/java/android/accounts/AbstractAccountAuthenticator.java:515:            throw new SecurityException("caller uid " + uid + " lacks " + perm);
android11-security-release/core/java/android/widget/TextView.java:11350:                throw new SecurityException("INTERACT_ACROSS_USERS_FULL is required."
android11-security-release/core/java/android/provider/SearchIndexablesProvider.java:105:            throw new SecurityException("Provider must be exported");
android11-security-release/core/java/android/provider/SearchIndexablesProvider.java:108:            throw new SecurityException("Provider must grantUriPermissions");
android11-security-release/core/java/android/provider/SearchIndexablesProvider.java:111:            throw new SecurityException("Provider must be protected by READ_SEARCH_INDEXABLES");
android11-security-release/core/java/android/provider/DocumentsProvider.java:170:            throw new SecurityException("Provider must be exported");
android11-security-release/core/java/android/provider/DocumentsProvider.java:173:            throw new SecurityException("Provider must grantUriPermissions");
android11-security-release/core/java/android/provider/DocumentsProvider.java:177:            throw new SecurityException("Provider must be protected by MANAGE_DOCUMENTS");
android11-security-release/core/java/android/provider/DocumentsProvider.java:229:                throw new SecurityException(
android11-security-release/core/java/android/provider/DocumentsProvider.java:1098:            throw new SecurityException(
android11-security-release/core/java/android/provider/BlockedNumberContract.java:144: * {@code false}, all operations on the provider will fail with a {@link SecurityException}. The
android11-security-release/core/java/android/provider/BlockedNumberContract.java:322:     * context {@code context}, this method will throw a {@link SecurityException}.
android11-security-release/core/java/android/provider/BlockedNumberContract.java:356:     * context {@code context}, this method will throw a {@link SecurityException}.
android11-security-release/core/java/android/provider/ContactsContract.java:230:     * {@link SecurityException} will be thrown. Unlike {@link Context#grantUriPermission},
android11-security-release/core/java/android/provider/DeviceConfig.java:795:        } catch (SecurityException e) {
android11-security-release/core/java/android/provider/DeviceConfig.java:822:                throw new SecurityException("Permission denial: reading from settings requires:"
android11-security-release/core/java/android/provider/Settings.java:5431:                        throw new SecurityException("Settings.Secure." + name
android11-security-release/core/java/android/provider/Settings.java:6430:         *             {@link VERSION_CODES#M} or later throws a {@code SecurityException}.
android11-security-release/core/java/android/provider/Settings.java:6439:         *             {@link VERSION_CODES#M} or later throws a {@code SecurityException}.
android11-security-release/core/java/android/provider/Settings.java:6452:         *             {@link VERSION_CODES#M} or later throws a {@code SecurityException}.
android11-security-release/core/java/android/provider/Settings.java:15168:        // prepare string to throw SecurityException
android11-security-release/core/java/android/provider/Settings.java:15182:        throw new SecurityException(exceptionMessage.toString());
android11-security-release/core/java/android/webkit/WebSettings.java:959:     * a value of {@code false} will cause a {@link java.lang.SecurityException}
android11-security-release/core/java/android/app/Instrumentation.java:2070:                throw new SecurityException("Not allowed to start activity "
android11-security-release/core/java/android/app/Instrumentation.java:2079:                throw new SecurityException(
android11-security-release/core/java/android/app/NotificationManager.java:1066:     * Throws a SecurityException if policy access is not granted to this package.
android11-security-release/core/java/android/app/NotificationManager.java:1090:     * Throws a SecurityException if policy access is not granted to this package.
android11-security-release/core/java/android/app/NotificationManager.java:1110:     * Throws a SecurityException if policy access is not granted to this package.
android11-security-release/core/java/android/app/NotificationManager.java:1129:     * Throws a SecurityException if policy access is not granted to this package.
android11-security-release/core/java/android/app/NotificationManager.java:1171:     * Throws a SecurityException if policy access is not granted to this package.
android11-security-release/core/java/android/app/ActivityThread.java:2269:                    throw new SecurityException(
android11-security-release/core/java/android/app/ActivityThread.java:2306:                throw new SecurityException(msg);
android11-security-release/core/java/android/app/ActivityThread.java:7501:            } catch (SecurityException e) {
android11-security-release/core/java/android/app/ActivityThread.java:7518:            } catch (SecurityException e) {
android11-security-release/core/java/android/app/ActivityManager.java:1842:            throws SecurityException {
android11-security-release/core/java/android/app/ActivityManager.java:1933:     * @throws SecurityException
android11-security-release/core/java/android/app/ActivityManager.java:2070:            throws SecurityException {
android11-security-release/core/java/android/app/ActivityManager.java:2474:     * system, in which case an activity start may throw a {@link SecurityException}. Call this
android11-security-release/core/java/android/app/ActivityManager.java:2485:     * provided context and no {@link SecurityException} will be thrown, {@code false} otherwise.
android11-security-release/core/java/android/app/ActivityManager.java:2680:            throws SecurityException {
android11-security-release/core/java/android/app/ActivityManager.java:2695:            throws SecurityException {
android11-security-release/core/java/android/app/ActivityManager.java:3824:     * @throws SecurityException If the caller does not hold
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:132: * owns. Otherwise, a {@link SecurityException} will be thrown.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:2543:     * @throws SecurityException if the caller is not in the owner application of {@code admin}.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:2564:     * @throws SecurityException if {@code admin} is not an active administrator.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:2730:     * @throws SecurityException if {@code admin} is not an active administrator or if {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:2804:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:2879:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:2961:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3043:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3124:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3205:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3285:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3377:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3419:     * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3581:     * @throws SecurityException if the calling application isn't an active admin that uses
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3607:     * @throws SecurityException     if the calling application does not have the permission
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3632:     * @throws SecurityException if {@code admin} is not a profile owner of a managed profile.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3654:     * @throws SecurityException if {@code userHandle} is not a managed profile.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3705:     * @throws SecurityException if the calling application does not own an active administrator
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3779:     * @throws SecurityException if {@code admin} is not an active administrator or does not use
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3885:     * or above who attempt to call this API will receive {@link SecurityException}; they are
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3892:     * this API will receive {@link SecurityException} if they target SDK level
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3895:     * For legacy device admins, this API throws {@link SecurityException} if they target SDK level
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3900:     * {@link SecurityException}.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3922:     * @throws SecurityException if the calling application does not own an active administrator
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3971:     * @throws SecurityException if admin is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:3996:     * @throws SecurityException if admin is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4019:     * @throws SecurityException if admin is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4063:     * @throws SecurityException if admin is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4095:     * @throws SecurityException if {@code admin} is not an active administrator or it does not use
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4152:     * a {@link SecurityException} will be thrown.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4173:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4268:     * @throws SecurityException if the calling application does not own an active administrator
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4311:     * @throws SecurityException if the calling application does not own an active administrator
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4343:     * other admins a {@link SecurityException} will be thrown.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4375:     * @throws SecurityException if the calling application does not own an active administrator
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4403:     * @throws SecurityException if the calling application does not own an active administrator
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4441:     * @throws SecurityException if {@code admin} is not a device owner or a profile owner of
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4471:     * @throws SecurityException if {@code admin} is not a device owner, a profile owner of
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4576:     * @throws SecurityException if {@code admin} is not the device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4831:     * @throws SecurityException if {@code admin} is not an active administrator or does not use
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4966:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:4993:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5020:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5050:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5071:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5112:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5148:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5192:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5233:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5310:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5398:     * @throws SecurityException if the caller is not a device owner, a profile owner or
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5432:     * @throws SecurityException if the caller is not a device owner, a profile owner or
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5495:     * @throws SecurityException if {@code admin} is not {@code null} and not a device or profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5549:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5556:            installerPackage) throws SecurityException {
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5575:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5582:            throws SecurityException {
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5612:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5636:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5660:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5703:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5733:     * @throws SecurityException if {@code admin} is not a device or a profile
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5769:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5815:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5840:     * @throws SecurityException if {@code admin} is not a device or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5895:     * {@link android.os.Build.VERSION_CODES#Q} will receive a SecurityException. Starting
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5902:     * @throws SecurityException if {@code admin} is not an active administrator or does not use
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5947:     * Otherwise a {@link SecurityException} will be thrown. See {@link #isAffiliatedUser}.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5953:     * @throws SecurityException if {@code admin} is not a device owner, or there is at least one
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:5999:     * @throws SecurityException if {@code admin} is not a device or profile owner or if
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6060:     * @throws SecurityException if {@code admin} is not a device owner, not a profile owner or
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6107:     * @throws SecurityException if caller is not a device owner, a profile owner for the
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6122:     * @throws SecurityException if caller is not a device owner, a profile owner for the
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6148:     * @throws SecurityException if caller is not a device owner, a profile owner for the
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6164:     * @throws SecurityException if caller is not a device owner, a profile owner for the
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6190:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6207:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6277:     * @throws SecurityException if {@code admin} is not an active administrator or does not user
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6640:     * @throws SecurityException if the caller is not in {@code packageName} or {@code packageName}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6679:     * @throws SecurityException if the caller is not the device owner, does not hold the
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6751:     * a SecurityException will be thrown. This method is not available to managed profile owners.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6758:     * @throws SecurityException if {@code admin} is not an active profile owner, or the method is
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6844:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6896:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6924:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6950:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:6972:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7176:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7199:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7225:     * @throws SecurityException        if {@code admin} is not a device or profile owner or if
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7256:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7285:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7361:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7411:     * @throws SecurityException if {@code admin} is not an active administrator or does not use
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7478:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7499:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7539:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7561:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7632:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7655:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7701:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7727:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7758:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7781:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7862:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7886:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:7972:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8066:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8149:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8175:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8192:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8215:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8238:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8261:     * @throws SecurityException if {@code admin} is not a profile owner affiliated with the device.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8281:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8327:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8361:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8388:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8415:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8473:     * @throws SecurityException if {@code admin} is not a device or profile owner or if called on
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8509:     * @throws SecurityException if {@code admin} is not a device or profile owner or if called on
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8537:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8562:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8589:     * @throws SecurityException if {@code admin} is not the device owner, or the profile owner of
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8632:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8709:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8756:     * @throws SecurityException if {@code admin} is not the device owner, the profile owner of an
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8765:            throws SecurityException {
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8779:     * @throws SecurityException if {@code admin} is not the device owner, the profile owner of an
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8828:     * @throws SecurityException if {@code admin} is not the device owner, the profile owner of an
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8848:     * @throws SecurityException if {@code admin} is not the device owner, the profile owner of an
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8915:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8956:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:8984:     * @throws SecurityException if caller is not a device owner or a profile owner of an
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9004:     * @throws SecurityException if caller is not a device owner or a profile owner of an
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9028:     * @throws SecurityException if {@code admin} is not a device owner or a profile owner
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9054:     * @throws SecurityException if {@code admin} is not a device owner or a profile owner
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9074:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9130:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9154:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9174:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9192:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9215:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9245:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9271:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9298:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9323:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9345:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9376:     * @throws SecurityException if {@code admin} is not a device owner or a profile owner of an
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9446:     * @throws SecurityException if {@code admin} is not the device owner, or a profile owner of
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9477:     * @throws SecurityException if {@code admin} is not the device owner, or a profile owner of
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9552:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9580:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9643:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9691:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9794:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9810:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9837:     * @throws SecurityException if {@code admin} is not an active administrator.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9857:     * @throws SecurityException if {@code admin} is not an active administrator.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9883:     * @throws SecurityException if {@code admin} is not an active administrator.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9903:     * @throws SecurityException if {@code admin} is not an active administrator.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:9965:     * throw a SecurityException when called on the parent instance:
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10021:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10027:                throw new SecurityException("The current user does not have a parent profile.");
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10056:     * @throws SecurityException if {@code admin} is not allowed to control security logging.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10073:     * managed profile, otherwise a {@link SecurityException} will be thrown.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10077:     * @throws SecurityException if {@code admin} is not allowed to control security logging.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10096:     * it must be affiliated with the device. Otherwise a {@link SecurityException} will be thrown.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10102:     * @throws SecurityException if {@code admin} is not allowed to access security logging,
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10164:            throw new SecurityException("The user " + uInfo.id
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10176:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10197:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10219:     * @throws SecurityException if the caller doesn't run with {@link Process#SYSTEM_UID}
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10245:     * it must be affiliated with the device. Otherwise a {@link SecurityException} will be thrown.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10251:     * @throws SecurityException if {@code admin} is not allowed to access security logging, or
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10284:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10324:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10360:     * @throws SecurityException if {@code admin} is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10377:     * @throws SecurityException if {@code admin} is not a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10392:     * @throws SecurityException if the caller is not the device owner, does not hold the
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10560:     * @throws SecurityException if the caller is not shell / root or the admin package
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10632:     * @throws {@link SecurityException} if the caller has no
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10647:            throw new SecurityException(functionName + " cannot be called on the parent instance");
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10667:     * @throws SecurityException if {@code admin} is not a device owner or a profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10742:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10762:     * @throws SecurityException if {@code admin} is not a device owner and caller has
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10790:     * {@link SecurityException} until all users become affiliated again. It will also no longer be
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10801:     * @throws SecurityException if {@code admin} is not a device owner, or there is at least one
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10839:     *        {@link #getBindDeviceAdminTargetUsers}, otherwise a {@link SecurityException} will
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10887:     * @throws SecurityException if the caller is not the device owner, does not hold the
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10906:     * @throws SecurityException if the caller is not the device owner, does not hold the
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10926:     * @throws SecurityException if the caller is not the device owner, does not hold the
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10946:     * @throws SecurityException if the caller is not the device owner/profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:10968:     * @throws SecurityException if the caller does not have permission to retrieve information
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11010:     * @throws SecurityException if the caller is not the device owner/profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11037:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11127:     * @throws SecurityException if {@code admin} is not a device owner nor a profile owner
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11154:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11179:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11195:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11210:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11247:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11277:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11304:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11325:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11349:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11367:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11398:     * @throws SecurityException if the caller is not a device or profile owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11422:     * @throws SecurityException if the caller is not the device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11462:     * @throws SecurityException if the caller is not the device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11551:     * @throws SecurityException if the caller is not the device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11571:     * @throws SecurityException if the caller is not the device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11645:     * @throws SecurityException if {@code admin} is not a profile owner
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11671:     * @throws SecurityException if {@code admin} is not a profile owner
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11966:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/admin/DevicePolicyManager.java:11984:     * @throws SecurityException if {@code admin} is not a device owner.
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:177:            long startTime, long endTime) throws SecurityException, RemoteException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:216:            long startTime, long endTime) throws SecurityException, RemoteException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:255:            long endTime) throws SecurityException, RemoteException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:298:            long endTime) throws SecurityException, RemoteException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:312:            long endTime) throws SecurityException, RemoteException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:326:            long startTime, long endTime, int uid) throws SecurityException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:333:            long startTime, long endTime, int uid) throws SecurityException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:344:            long startTime, long endTime, int uid, int tag) throws SecurityException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:381:     * @throws SecurityException if permissions are insufficient to read network statistics.
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:384:            long startTime, long endTime, int uid, int tag, int state) throws SecurityException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:393:            long startTime, long endTime, int uid, int tag, int state) throws SecurityException {
android11-security-release/core/java/android/app/usage/NetworkStatsManager.java:440:            long endTime) throws SecurityException, RemoteException {
android11-security-release/core/java/android/app/usage/NetworkStats.java:106:            throws RemoteException, SecurityException {
android11-security-release/core/java/android/app/usage/UsageStatsManager.java:705:     * @param packageName the package name of the app to set the bucket for. A SecurityException
android11-security-release/core/java/android/app/usage/UsageStatsManager.java:709:     *               STANDBY_BUCKET_NEVER will result in a SecurityException.
android11-security-release/core/java/android/app/usage/UsageStatsManager.java:794:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and
android11-security-release/core/java/android/app/usage/UsageStatsManager.java:815:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and is
android11-security-release/core/java/android/app/usage/UsageStatsManager.java:861:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and
android11-security-release/core/java/android/app/usage/UsageStatsManager.java:888:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and
android11-security-release/core/java/android/app/usage/UsageStatsManager.java:940:     * @throws SecurityException if the caller is neither the active supervision app nor does it
android11-security-release/core/java/android/app/usage/UsageStatsManager.java:966:     * @throws SecurityException if the caller is neither the active supervision app nor does it
android11-security-release/core/java/android/app/usage/UsageStatsManager.java:1055:     * @throws SecurityException if the caller doesn't have the OBSERVE_APP_USAGE permission and
android11-security-release/core/java/android/app/SearchableInfo.java:267:        } catch (java.lang.SecurityException e) {
android11-security-release/core/java/android/app/SearchableInfo.java:294:            } catch (java.lang.SecurityException e) {
android11-security-release/core/java/android/app/RecoverableSecurityException.java:28: * Specialization of {@link SecurityException} that contains additional
android11-security-release/core/java/android/app/RecoverableSecurityException.java:39: * {@link SecurityException}, and thus there is no guarantee that the messages
android11-security-release/core/java/android/app/RecoverableSecurityException.java:42:public final class RecoverableSecurityException extends SecurityException implements Parcelable {
android11-security-release/core/java/android/app/RecoverableSecurityException.java:43:    private static final String TAG = "RecoverableSecurityException";
android11-security-release/core/java/android/app/RecoverableSecurityException.java:49:    public RecoverableSecurityException(Parcel in) {
android11-security-release/core/java/android/app/RecoverableSecurityException.java:50:        this(new SecurityException(in.readString()), in.readCharSequence(),
android11-security-release/core/java/android/app/RecoverableSecurityException.java:72:    public RecoverableSecurityException(@NonNull Throwable cause, @NonNull CharSequence userMessage,
android11-security-release/core/java/android/app/RecoverableSecurityException.java:159:     * {@link RecoverableSecurityException#showAsDialog(Activity)}; needs to
android11-security-release/core/java/android/app/RecoverableSecurityException.java:167:            final RecoverableSecurityException e = getArguments().getParcelable(TAG);
android11-security-release/core/java/android/app/RecoverableSecurityException.java:193:    public static final @android.annotation.NonNull Creator<RecoverableSecurityException> CREATOR =
android11-security-release/core/java/android/app/RecoverableSecurityException.java:194:            new Creator<RecoverableSecurityException>() {
android11-security-release/core/java/android/app/RecoverableSecurityException.java:196:        public RecoverableSecurityException createFromParcel(Parcel source) {
android11-security-release/core/java/android/app/RecoverableSecurityException.java:197:            return new RecoverableSecurityException(source);
android11-security-release/core/java/android/app/RecoverableSecurityException.java:201:        public RecoverableSecurityException[] newArray(int size) {
android11-security-release/core/java/android/app/RecoverableSecurityException.java:202:            return new RecoverableSecurityException[size];
android11-security-release/core/java/android/app/AppOps.md:59:: Throw a `SecurityException` on access. This can be suppressed by using a `...noThrow` method to
android11-security-release/core/java/android/app/AuthenticationRequiredException.java:27: * Specialization of {@link SecurityException} that is thrown when authentication is needed from the
android11-security-release/core/java/android/app/AuthenticationRequiredException.java:35: * {@link SecurityException}, and thus there is no guarantee that the action contained will be
android11-security-release/core/java/android/app/AuthenticationRequiredException.java:39:public final class AuthenticationRequiredException extends SecurityException implements Parcelable {
android11-security-release/core/java/android/app/AuthenticationRequiredException.java:46:        this(new SecurityException(in.readString()), PendingIntent.CREATOR.createFromParcel(in));
android11-security-release/core/java/android/app/role/RoleControllerService.java:137:                    throw new SecurityException("Only the system process can call " + methodName
android11-security-release/core/java/android/app/ActivityTaskManager.java:173:            throws SecurityException {
android11-security-release/core/java/android/app/ActivityTaskManager.java:200:            boolean animate, Rect initialBounds, boolean showRecents) throws SecurityException {
android11-security-release/core/java/android/app/ActivityTaskManager.java:213:    public void removeStacksInWindowingModes(int[] windowingModes) throws SecurityException {
android11-security-release/core/java/android/app/ActivityTaskManager.java:223:    public void removeStacksWithActivityTypes(int[] activityTypes) throws SecurityException {
android11-security-release/core/java/android/app/ContextImpl.java:1706:                    throw new SecurityException(
android11-security-release/core/java/android/app/ContextImpl.java:1710:                    throw new SecurityException(
android11-security-release/core/java/android/app/ContextImpl.java:1737:                throw new SecurityException(
android11-security-release/core/java/android/app/ContextImpl.java:1838:                throw new SecurityException(
android11-security-release/core/java/android/app/ContextImpl.java:2014:            throw new SecurityException(
android11-security-release/core/java/android/app/ContextImpl.java:2182:            throw new SecurityException(
android11-security-release/core/java/android/app/ContextImpl.java:2827:                throw new SecurityException("MODE_WORLD_READABLE no longer supported");
android11-security-release/core/java/android/app/ContextImpl.java:2830:                throw new SecurityException("MODE_WORLD_WRITEABLE no longer supported");
android11-security-release/core/java/android/app/ActivityOptions.java:1251:     * {@code false} for the package of the target activity, a {@link SecurityException} will be
android11-security-release/core/java/android/app/KeyguardManager.java:669:            throw new SecurityException("Requires SET_INITIAL_LOCK permission.");
android11-security-release/core/java/android/app/AppOpsManager.java:121: *     <dd>Throw a {@link SecurityException} on access. This can be suppressed by using a
android11-security-release/core/java/android/app/AppOpsManager.java:137: * permission is denied the caller gets a {@link SecurityException}, but if the permission is
android11-security-release/core/java/android/app/AppOpsManager.java:369:     * cause it to have a fatal error, typically a {@link SecurityException}.
android11-security-release/core/java/android/app/AppOpsManager.java:7111:    private String buildSecurityExceptionMsg(int op, int uid, String packageName) {
android11-security-release/core/java/android/app/AppOpsManager.java:7154:     * @throws SecurityException If the app has been configured to crash on this op.
android11-security-release/core/java/android/app/AppOpsManager.java:7169:     * Like {@link #checkOp} but instead of throwing a {@link SecurityException} it
android11-security-release/core/java/android/app/AppOpsManager.java:7269:     * @throws SecurityException If the app has been configured to crash on this op.
android11-security-release/core/java/android/app/AppOpsManager.java:7297:     * @throws SecurityException If the app has been configured to crash on this op.
android11-security-release/core/java/android/app/AppOpsManager.java:7305:            throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
android11-security-release/core/java/android/app/AppOpsManager.java:7333:     * {@link SecurityException} it returns {@link #MODE_ERRORED}.
android11-security-release/core/java/android/app/AppOpsManager.java:7353:     * {@link SecurityException} it returns {@link #MODE_ERRORED}.
android11-security-release/core/java/android/app/AppOpsManager.java:7436:     * @throws SecurityException If the proxy or proxied app has been configured to crash on this
android11-security-release/core/java/android/app/AppOpsManager.java:7446:            throw new SecurityException("Proxy package " + mContext.getOpPackageName()
android11-security-release/core/java/android/app/AppOpsManager.java:7469:     * @throws SecurityException If the proxy or proxied app has been configured to crash on this
android11-security-release/core/java/android/app/AppOpsManager.java:7497:     * of throwing a {@link SecurityException} it returns {@link #MODE_ERRORED}.
android11-security-release/core/java/android/app/AppOpsManager.java:7517:     * of throwing a {@link SecurityException} it returns {@link #MODE_ERRORED}.
android11-security-release/core/java/android/app/AppOpsManager.java:7593:     * @throws SecurityException If the app has been configured to crash on this op.
android11-security-release/core/java/android/app/AppOpsManager.java:7601:                throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
android11-security-release/core/java/android/app/AppOpsManager.java:7610:     * Like {@link #checkOp} but instead of throwing a {@link SecurityException} it
android11-security-release/core/java/android/app/AppOpsManager.java:7631:                throw new SecurityException(
android11-security-release/core/java/android/app/AppOpsManager.java:7647:                throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
android11-security-release/core/java/android/app/AppOpsManager.java:7656:     * Like {@link #checkAudioOp} but instead of throwing a {@link SecurityException} it
android11-security-release/core/java/android/app/AppOpsManager.java:7754:     * @throws SecurityException If the app has been configured to crash on this op or
android11-security-release/core/java/android/app/AppOpsManager.java:7777:     * @throws SecurityException If the app has been configured to crash on this op or
android11-security-release/core/java/android/app/AppOpsManager.java:7787:            throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
android11-security-release/core/java/android/app/AppOpsManager.java:7822:     * {@link SecurityException} it returns {@link #MODE_ERRORED}.
android11-security-release/core/java/android/app/AppOpsManager.java:7842:     * {@link SecurityException} it returns {@link #MODE_ERRORED}.
android11-security-release/core/java/android/app/WallpaperManager.java:444:                } catch (SecurityException e) {
android11-security-release/core/java/android/app/WallpaperManager.java:1082:            } catch (SecurityException e) {
android11-security-release/core/java/android/app/UiAutomationConnection.java:525:            throw new SecurityException("Calling from not trusted UID!");
android11-security-release/core/java/android/app/slice/SliceManager.java:125:     * or the default voice interaction service. Otherwise will throw {@link SecurityException}.
android11-security-release/core/java/android/app/slice/SliceManager.java:157:     * or the default voice interaction service. Otherwise will throw {@link SecurityException}.
android11-security-release/core/java/android/app/slice/SliceManager.java:492:                throw new SecurityException("No pkg specified");
android11-security-release/core/java/android/app/slice/SliceManager.java:497:                throw new SecurityException("User " + uid + " does not have slice permission for "
android11-security-release/core/java/android/app/slice/SliceProvider.java:391:                throw new SecurityException("Only the system can pin/unpin slices");
android11-security-release/core/java/android/app/slice/SliceProvider.java:398:                throw new SecurityException("Only the system can pin/unpin slices");
android11-security-release/core/java/android/app/slice/SliceProvider.java:410:                throw new SecurityException("Only the system can get permissions");
android11-security-release/core/java/android/app/slice/SliceProvider.java:457:        } catch (SecurityException e) {
android11-security-release/core/java/android/app/backup/BackupManager.java:503:     * {@link SecurityException} will be thrown.
android11-security-release/core/java/android/app/backup/BackupManager.java:519:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android11-security-release/core/java/android/app/backup/BackupManager.java:549:     * {@link SecurityException} will be thrown.
android11-security-release/core/java/android/app/backup/BackupManager.java:565:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android11-security-release/core/java/android/app/backup/IBackupManager.aidl:339:     * {@link SecurityException} will be thrown.
android11-security-release/core/java/android/app/backup/IBackupManager.aidl:359:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android11-security-release/core/java/android/app/DownloadManager.java:1314:            throw new SecurityException(displayName + " is not a valid filename");
android11-security-release/core/java/android/app/DownloadManager.java:1726:                        throw new SecurityException(
android11-security-release/core/java/android/app/UiAutomation.java:1034:     * @throws SecurityException if unable to grant the permission.
android11-security-release/core/java/android/app/UiAutomation.java:1057:     * @throws SecurityException if unable to grant the permission.
android11-security-release/core/java/android/app/UiAutomation.java:1072:            throw new SecurityException("Error granting runtime permission", e);
android11-security-release/core/java/android/app/UiAutomation.java:1080:     * @throws SecurityException if unable to revoke the permission.
android11-security-release/core/java/android/app/UiAutomation.java:1103:     * @throws SecurityException if unable to revoke the permission.
android11-security-release/core/java/android/app/UiAutomation.java:1118:            throw new SecurityException("Error granting runtime permission", e);
android11-security-release/core/java/android/permission/PermissionControllerService.java:319:             * Throw a {@link SecurityException} if not at least one of the permissions is granted.
android11-security-release/core/java/android/permission/PermissionControllerService.java:333:                throw new SecurityException(
android11-security-release/core/java/android/permission/Permissions.md:86:and throws a SecurityException when the permission is not granted.
android11-security-release/core/java/android/permission/Permissions.md:260:they would crash when getting a `SecurityException`. To protect the users' privacy while still not
android11-security-release/core/java/android/permission/Permissions.md:355:                    else -> throw SecurityException(
android11-security-release/core/java/android/permission/PermissionControllerManager.java:246:     * Throw a {@link SecurityException} if not at least one of the permissions is granted.
android11-security-release/core/java/android/permission/PermissionControllerManager.java:259:        throw new SecurityException("At lest one of the following permissions is required: "
android11-security-release/core/java/android/service/notification/NotificationAssistantService.java:476:                        } catch (SecurityException e) {
android11-security-release/core/java/android/service/oemlock/OemLockManager.java:75:     * @throws SecurityException if the wrong signature was provided.
android11-security-release/core/java/android/service/oemlock/OemLockManager.java:109:     * @throws SecurityException if the user is not allowed to unlock the device.
android11-security-release/core/java/android/service/autofill/AutofillServiceInfo.java:104:                throw new SecurityException("Service does not require permission "
android11-security-release/core/java/android/service/contentcapture/ContentCaptureServiceInfo.java:94:            throw new SecurityException("Service does not require permission "
android11-security-release/core/java/android/os/HardwarePropertiesManager.java:120:     * @throws SecurityException if something other than the device owner or the current VR service
android11-security-release/core/java/android/os/HardwarePropertiesManager.java:158:     * @throws SecurityException if something other than the device owner or the current VR service
android11-security-release/core/java/android/os/HardwarePropertiesManager.java:175:     * @throws SecurityException if something other than the device owner or the current VR service
android11-security-release/core/java/android/os/DropBoxManager.java:379:        } catch (SecurityException e) {
android11-security-release/core/java/android/os/UserManager.java:3611:     * @throws SecurityException if the caller is invalid
android11-security-release/core/java/android/os/UserManager.java:3631:     * @throws SecurityException if the caller is invalid
android11-security-release/core/java/android/os/SystemUpdateManager.java:100:     * @throws SecurityException if the caller is not allowed to read the info.
android11-security-release/core/java/android/os/SystemUpdateManager.java:126:     * @throws SecurityException if the caller is not allowed to update the info.
android11-security-release/core/java/android/os/storage/StorageManager.java:1776:                throw new SecurityException(
android11-security-release/core/java/android/os/storage/StorageManager.java:1790:            } catch (SecurityException e) {
android11-security-release/core/java/android/os/storage/StorageManager.java:1806:                    throw new SecurityException("Op " + AppOpsManager.opToName(op) + " "
android11-security-release/core/java/android/os/storage/StorageManager.java:1839:                    throw new SecurityException("Op " + AppOpsManager.opToName(op) + " "
android11-security-release/core/java/android/os/SystemClock.java:165:        } catch (SecurityException e) {
android11-security-release/core/java/android/os/RecoverySystem.java:58:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/os/RecoverySystem.java:173:        throws IOException, GeneralSecurityException {
android11-security-release/core/java/android/os/RecoverySystem.java:208:     * SecurityException being thrown (and the thread's interrupt flag
android11-security-release/core/java/android/os/RecoverySystem.java:222:     * @throws GeneralSecurityException if verification failed
android11-security-release/core/java/android/os/RecoverySystem.java:227:        throws IOException, GeneralSecurityException {
android11-security-release/core/java/android/os/RecoverySystem.java:775:     * @throws SecurityException if the current user is not allowed to wipe data.
android11-security-release/core/java/android/os/RecoverySystem.java:819:     * @throws SecurityException if the current user is not allowed to wipe data.
android11-security-release/core/java/android/os/RecoverySystem.java:827:            throw new SecurityException("Wiping data is not allowed for this user.");
android11-security-release/core/java/android/os/Build.java:162:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/core/java/android/os/Build.java:918:         * will throw a SecurityException if the caller does not have permission to access
android11-security-release/core/java/android/os/Debug.java:2548:     * throw a SecurityException.
android11-security-release/core/java/android/os/Debug.java:2555:     * @throws SecurityException if the app is not debuggable.
android11-security-release/core/java/android/os/GraphicsEnvironment.java:523:            } catch (SecurityException e) {
android11-security-release/core/java/android/os/GraphicsEnvironment.java:672:        } catch (Settings.SettingNotFoundException | SecurityException e) {
android11-security-release/core/java/android/os/Binder.java:867:            } catch (SecurityException e) {
android11-security-release/core/java/android/os/Binder.java:951:            throw new SecurityException("Shell commands are only callable by ADB");
android11-security-release/core/java/android/os/HwParcel.java:340:     * @throws SecurityException interface doesn't match
android11-security-release/core/java/android/os/Process.java:868:     * @throws SecurityException Throws SecurityException if your process does
android11-security-release/core/java/android/os/Process.java:873:            throws IllegalArgumentException, SecurityException;
android11-security-release/core/java/android/os/Process.java:892:     * @throws SecurityException Throws SecurityException if your process does
android11-security-release/core/java/android/os/Process.java:902:            throws IllegalArgumentException, SecurityException;
android11-security-release/core/java/android/os/Process.java:912:     * @throws SecurityException Throws SecurityException if your process does
android11-security-release/core/java/android/os/Process.java:917:            throws IllegalArgumentException, SecurityException;
android11-security-release/core/java/android/os/Process.java:927:     * @throws SecurityException Throws SecurityException if your process does
android11-security-release/core/java/android/os/Process.java:941:            throws IllegalArgumentException, SecurityException;
android11-security-release/core/java/android/os/Process.java:973:            throws IllegalArgumentException, SecurityException;
android11-security-release/core/java/android/os/Process.java:1009:     * @throws SecurityException Throws SecurityException if your process does
android11-security-release/core/java/android/os/Process.java:1016:            throws IllegalArgumentException, SecurityException;
android11-security-release/core/java/android/os/Process.java:1041:     * @throws SecurityException Throws SecurityException if your process does
android11-security-release/core/java/android/os/Process.java:1061:     * @throws SecurityException Throws SecurityException if your process does
android11-security-release/core/java/android/os/Parcel.java:2138:     * <li>{@link SecurityException}
android11-security-release/core/java/android/os/Parcel.java:2194:        } else if (e instanceof SecurityException) {
android11-security-release/core/java/android/os/Parcel.java:2373:                return new SecurityException(msg);
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV4Verifier.java:57:            throws SignatureNotFoundException, SecurityException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV4Verifier.java:72:                throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV4Verifier.java:89:            final byte[] signedData) throws SecurityException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV4Verifier.java:91:            throw new SecurityException("No supported signatures found");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV4Verifier.java:118:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV4Verifier.java:122:            throw new SecurityException(jcaSignatureAlgorithm + " signature did not verify");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV4Verifier.java:138:            throw new SecurityException("Failed to decode certificate", e);
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV4Verifier.java:144:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:97:     * @throws SecurityException if a APK Signature Scheme v2 signature of this APK does not verify.
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:101:            throws SignatureNotFoundException, SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:116:            throws SignatureNotFoundException, SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:125:            throws SignatureNotFoundException, SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:136:     * @throws SecurityException if an APK Signature Scheme v2 signature of this APK does not
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:141:            throws SignatureNotFoundException, SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:168:            boolean doVerifyIntegrity) throws SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:182:            throw new SecurityException("Failed to read list of signers", e);
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:190:            } catch (IOException | BufferUnderflowException | SecurityException e) {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:191:                throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:198:            throw new SecurityException("No signers found");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:202:            throw new SecurityException("No content digests found");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:226:            CertificateFactory certFactory) throws SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:240:                    throw new SecurityException("Signature record too short");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:253:                throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:260:                throw new SecurityException("No signatures found");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:262:                throw new SecurityException("No supported signatures found");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:285:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:289:            throw new SecurityException(jcaSignatureAlgorithm + " signature did not verify");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:317:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:324:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:340:                throw new SecurityException("Failed to decode certificate #" + certificateCount, e);
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:348:            throw new SecurityException("No certificates listed");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:353:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:367:            throws SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:384:                        throw new SecurityException("V2 signature indicates APK is signed using APK"
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:397:            throws IOException, SignatureNotFoundException, SecurityException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV2Verifier.java:406:            throws IOException, SignatureNotFoundException, SecurityException, DigestException,
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:154:            throws SecurityException, IOException {
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:175:                throw new SecurityException(
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:217:            throw new SecurityException("Failed to decode certificate", e);
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:223:            throw new SecurityException("Certificate mismatch between APK and signature block");
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:251:                    throw new SecurityException("Signature record too short");
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:263:                throw new SecurityException(
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:269:                throw new SecurityException("No signatures found");
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:271:                throw new SecurityException("No supported signatures found");
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:294:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/SourceStampVerifier.java:298:            throw new SecurityException(jcaSignatureAlgorithm + " signature did not verify");
android11-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:41:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:204:                        throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:212:                    throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:218:                        throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:225:                    throw new SecurityException("APK digest in V4 signature does not match V2/V3");
android11-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:387:        } catch (GeneralSecurityException e) {
android11-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:485:    public static byte[] getVerityRootHash(String apkPath) throws IOException, SecurityException {
android11-security-release/core/java/android/util/apk/ApkSignatureVerifier.java:506:            throws IOException, SignatureNotFoundException, SecurityException, DigestException,
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:90:            SignatureInfo signatureInfo) throws SecurityException {
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:92:            throw new SecurityException("No digests provided");
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:112:                throw new SecurityException("Cannot get FD", e);
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:123:            throw new SecurityException("No known digest exists for integrity check");
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:148:            SignatureInfo signatureInfo) throws SecurityException {
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:187:            throw new SecurityException("Failed to compute digest(s) of contents", e);
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:194:                throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:322:            byte[] data, long fileSize, SignatureInfo signatureInfo) throws SecurityException {
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:331:            throw new SecurityException("Verity digest size is wrong: " + data.length);
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:340:            throw new SecurityException("APK content size did not verify");
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:349:            SignatureInfo signatureInfo) throws SecurityException {
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:361:                throw new SecurityException("APK verity digest of contents did not verify");
android11-security-release/core/java/android/util/apk/ApkSigningBlockUtils.java:364:            throw new SecurityException("Error during verification", e);
android11-security-release/core/java/android/util/apk/VerityBuilder.java:83:            throws IOException, SecurityException, NoSuchAlgorithmException, DigestException {
android11-security-release/core/java/android/util/apk/VerityBuilder.java:90:            throws IOException, SecurityException, NoSuchAlgorithmException, DigestException {
android11-security-release/core/java/android/util/apk/VerityBuilder.java:150:            throws IOException, SignatureNotFoundException, SecurityException, DigestException,
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:94:     * @throws SecurityException if the APK Signature Scheme v3 signature of this APK does not
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:99:            throws SignatureNotFoundException, SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:113:            throws SignatureNotFoundException, SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:118:            throws SignatureNotFoundException, SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:129:     * @throws SecurityException if an APK Signature Scheme v3 signature of this APK does not
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:134:            throws SignatureNotFoundException, SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:161:            boolean doVerifyIntegrity) throws SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:175:            throw new SecurityException("Failed to read list of signers", e);
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:185:            } catch (IOException | BufferUnderflowException | SecurityException e) {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:186:                throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:193:            throw new SecurityException("No signers found");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:197:            throw new SecurityException("APK Signature Scheme V3 only supports one signer: "
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:202:            throw new SecurityException("No content digests found");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:224:            throws SecurityException, IOException, PlatformNotSupportedException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:250:                    throw new SecurityException("Signature record too short");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:263:                throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:270:                throw new SecurityException("No signatures found");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:272:                throw new SecurityException("No supported signatures found");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:295:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:299:            throw new SecurityException(jcaSignatureAlgorithm + " signature did not verify");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:327:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:334:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:350:                throw new SecurityException("Failed to decode certificate #" + certificateCount, e);
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:358:            throw new SecurityException("No certificates listed");
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:363:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:369:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:375:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:400:                        throw new SecurityException("Encountered multiple Proof-of-rotation records"
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:410:                            throw new SecurityException("Terminal certificate in Proof-of-rotation"
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:414:                        throw new SecurityException("Failed to encode certificate when comparing"
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:430:            throws SecurityException, IOException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:476:                        throw new SecurityException("Unable to verify signature of certificate #"
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:486:                    throw new SecurityException("Signing algorithm ID mismatch for certificate #"
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:495:                    throw new SecurityException("Encountered duplicate entries in "
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:507:            throw new SecurityException(
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:511:            throw new SecurityException("Failed to decode certificate #" + levelCount
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:518:            throws IOException, SignatureNotFoundException, SecurityException {
android11-security-release/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java:527:            throws IOException, SignatureNotFoundException, SecurityException, DigestException,
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:26:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:143:         * @throws SecurityException
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:157:    private static SecurityException invalidDigest(String signatureFile, String name,
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:159:        throw new SecurityException(signatureFile + " has invalid digest for " + name +
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:163:    private static SecurityException failedVerification(String jarName, String signatureFile) {
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:164:        throw new SecurityException(jarName + " failed verification of " + signatureFile);
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:167:    private static SecurityException failedVerification(String jarName, String signatureFile,
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:169:        throw new SecurityException(jarName + " failed verification of " + signatureFile, e);
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:286:     * @throws SecurityException
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:310:     * certificates listed in the PKCS7 block. Throws a {@code GeneralSecurityException}
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:314:        throws GeneralSecurityException {
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:323:                throw new GeneralSecurityException(
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:335:                throw new GeneralSecurityException(
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:339:                throw new GeneralSecurityException(
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:345:            throw new GeneralSecurityException("IO exception verifying jar cert", e);
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:374:        } catch (GeneralSecurityException e) {
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:426:                    throw new SecurityException(signatureFile + " indicates " + jarName
android11-security-release/core/java/android/util/jar/StrictJarVerifier.java:431:                    throw new SecurityException(signatureFile + " indicates " + jarName
android11-security-release/core/java/android/util/jar/StrictJarFile.java:65:            throws IOException, SecurityException {
android11-security-release/core/java/android/util/jar/StrictJarFile.java:70:            throws IOException, SecurityException {
android11-security-release/core/java/android/util/jar/StrictJarFile.java:77:                    throws IOException, SecurityException {
android11-security-release/core/java/android/util/jar/StrictJarFile.java:85:                    throws IOException, SecurityException {
android11-security-release/core/java/android/util/jar/StrictJarFile.java:104:                    throws IOException, SecurityException {
android11-security-release/core/java/android/util/jar/StrictJarFile.java:124:                        throw new SecurityException("File " + file + " in manifest does not exist");
android11-security-release/core/java/android/util/jar/StrictJarFile.java:134:        } catch (IOException | SecurityException e) {
android11-security-release/core/java/android/hardware/location/GeofenceHardwareService.java:62:            throw new SecurityException("Insufficient permissions to access hardware geofence for"
android11-security-release/core/java/android/hardware/usb/UsbDevice.java:152:     * @throws SecurityException if the app targets SDK >= {@value android.os.Build.VERSION_CODES#Q}
android11-security-release/core/java/android/hardware/usb/UsbAccessory.java:172:     * @throws SecurityException if the app targets SDK >= {@value android.os.Build.VERSION_CODES#Q}
android11-security-release/core/java/android/hardware/soundtrigger/SoundTrigger.java:1983:        if (e instanceof SecurityException) {
android11-security-release/core/java/android/hardware/display/DisplayManager.java:643:     * @throws SecurityException if the caller does not have permission to create
android11-security-release/core/java/android/hardware/camera2/marshal/impl/MarshalQueryableEnum.java:125:                    } catch (SecurityException e) {
android11-security-release/core/java/android/hardware/camera2/CameraManager.java:474:     * @throws SecurityException if the application does not have permission to
android11-security-release/core/java/android/hardware/camera2/CameraManager.java:642:     * @throws SecurityException if the application does not have permission to
android11-security-release/core/java/android/hardware/camera2/CameraManager.java:679:     * @throws SecurityException if the application does not have permission to
android11-security-release/core/java/android/hardware/camera2/CameraManager.java:1003:                    throw new SecurityException(e.getMessage(), e);
android11-security-release/core/java/android/content/Context.java:144:     * mode throws a {@link SecurityException}.
android11-security-release/core/java/android/content/Context.java:164:     * mode will throw a {@link SecurityException}.
android11-security-release/core/java/android/content/Context.java:2749:     * permission, {@link SecurityException} will be thrown.
android11-security-release/core/java/android/content/Context.java:3028:     * <p>This function will throw {@link SecurityException} if you do not
android11-security-release/core/java/android/content/Context.java:3049:     * @throws SecurityException If the caller does not have permission to access the service
android11-security-release/core/java/android/content/Context.java:3080:     * @throws SecurityException If the caller does not have permission to access the service
android11-security-release/core/java/android/content/Context.java:3108:     * <p>This function will throw {@link SecurityException} if you do not
android11-security-release/core/java/android/content/Context.java:3118:     * @throws SecurityException If the caller does not have permission to access the service
android11-security-release/core/java/android/content/Context.java:3157:     * <p>This method will throw {@link SecurityException} if the calling app does not
android11-security-release/core/java/android/content/Context.java:3189:     * @throws SecurityException If the caller does not have permission to access the service
android11-security-release/core/java/android/content/Context.java:3242:     * @throws SecurityException If the caller does not have permission to access the service
android11-security-release/core/java/android/content/Context.java:3280:     * @throws SecurityException if the client does not have the required permission to bind.
android11-security-release/core/java/android/content/Context.java:5253:     * and user ID running in the system, throw a {@link SecurityException}.
android11-security-release/core/java/android/content/Context.java:5269:     * SecurityException}.  This is basically the same as calling
android11-security-release/core/java/android/content/Context.java:5274:     * this function will always throw the SecurityException.  This is
android11-security-release/core/java/android/content/Context.java:5290:     * {@link SecurityException}.  This is the same as {@link
android11-security-release/core/java/android/content/Context.java:5347:     * function and a {@link SecurityException} would be thrown.  As of
android11-security-release/core/java/android/content/Context.java:5490:     * SecurityException}.  This only checks for permissions that have
android11-security-release/core/java/android/content/Context.java:5510:     * SecurityException}.  This is basically the same as calling
android11-security-release/core/java/android/content/Context.java:5516:     * will always throw a SecurityException.
android11-security-release/core/java/android/content/Context.java:5530:     * SecurityException}.  This is the same as {@link
android11-security-release/core/java/android/content/Context.java:5587:     * java.lang.SecurityException will be thrown.  If this flag is not set,
android11-security-release/core/java/android/content/Context.java:5643:     * <p>Throws {@link java.lang.SecurityException} if the Context requested
android11-security-release/core/java/android/content/Context.java:5652:     * @throws SecurityException &nbsp;
android11-security-release/core/java/android/content/integrity/AppIntegrityManager.java:34: * name whitelisted as an integrity rule provider. Otherwise a {@link SecurityException} will be
android11-security-release/core/java/android/content/rollback/RollbackManager.java:79:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/core/java/android/content/rollback/RollbackManager.java:109:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/core/java/android/content/rollback/RollbackManager.java:197:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/core/java/android/content/rollback/RollbackManager.java:223:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/core/java/android/content/rollback/RollbackManager.java:244:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/core/java/android/content/rollback/RollbackManager.java:265:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/core/java/android/content/ContentProvider.java:667:                throws FileNotFoundException, SecurityException {
android11-security-release/core/java/android/content/ContentProvider.java:683:                throws SecurityException {
android11-security-release/core/java/android/content/ContentProvider.java:695:                throws SecurityException {
android11-security-release/core/java/android/content/ContentProvider.java:742:            @Nullable String attributionTag, IBinder callerToken) throws SecurityException {
android11-security-release/core/java/android/content/ContentProvider.java:819:        throw new SecurityException("Permission Denial: reading "
android11-security-release/core/java/android/content/ContentProvider.java:826:            @Nullable String attributionTag, IBinder callerToken) throws SecurityException {
android11-security-release/core/java/android/content/ContentProvider.java:895:        throw new SecurityException("Permission Denial: writing "
android11-security-release/core/java/android/content/ContentProvider.java:948:     * @throws SecurityException if the calling package doesn't belong to the
android11-security-release/core/java/android/content/ContentProvider.java:1867:     * @throws SecurityException Throws SecurityException if the caller does
android11-security-release/core/java/android/content/ContentProvider.java:1937:     * @throws SecurityException Throws SecurityException if the caller does
android11-security-release/core/java/android/content/ContentProvider.java:1995:     * @throws SecurityException Throws SecurityException if the caller does
android11-security-release/core/java/android/content/ContentProvider.java:2058:     * @throws SecurityException Throws SecurityException if the caller does
android11-security-release/core/java/android/content/ContentProvider.java:2173:     * @throws SecurityException Throws SecurityException if the caller does
android11-security-release/core/java/android/content/ContentProvider.java:2240:     * @throws SecurityException Throws SecurityException if the caller does
android11-security-release/core/java/android/content/ContentProvider.java:2496:    private void validateIncomingAuthority(String authority) throws SecurityException {
android11-security-release/core/java/android/content/ContentProvider.java:2505:            throw new SecurityException(message);
android11-security-release/core/java/android/content/ContentProvider.java:2511:    public Uri validateIncomingUri(Uri uri) throws SecurityException {
android11-security-release/core/java/android/content/ContentProvider.java:2516:                throw new SecurityException("trying to query a ContentProvider in user "
android11-security-release/core/java/android/content/Intent.java:1134:     * result in a {@link java.lang.SecurityException}.
android11-security-release/core/java/android/content/ClipData.java:358:                    } catch (SecurityException e) {
android11-security-release/core/java/android/content/ClipData.java:500:                } catch (SecurityException e) {
android11-security-release/core/java/android/content/ClipData.java:560:                    } catch (SecurityException e) {
android11-security-release/core/java/android/content/AbstractThreadedSyncAdapter.java:344:            } catch (SecurityException e) {
android11-security-release/core/java/android/content/AbstractThreadedSyncAdapter.java:346:                    Log.d(TAG, "SecurityException", e);
android11-security-release/core/java/android/content/AbstractThreadedSyncAdapter.java:348:                AbstractThreadedSyncAdapter.this.onSecurityException(mAccount, mExtras,
android11-security-release/core/java/android/content/AbstractThreadedSyncAdapter.java:462:    public void onSecurityException(Account account, Bundle extras,
android11-security-release/core/java/android/content/pm/LauncherApps.java:846:     * @throws SecurityException if {@link #hasShortcutHostPermission()} is false.
android11-security-release/core/java/android/content/pm/LauncherApps.java:967:     * @throws SecurityException when the caller is not the recents app.
android11-security-release/core/java/android/content/pm/LauncherApps.java:985:     * throw a {@link SecurityException} unless the caller has the same UID as the target app's.
android11-security-release/core/java/android/content/pm/PackageInstaller.java:431:     * @throws SecurityException when installation services are unavailable,
android11-security-release/core/java/android/content/pm/PackageInstaller.java:455:     * @throws SecurityException when the caller does not own the session, or
android11-security-release/core/java/android/content/pm/PackageInstaller.java:476:     * @throws SecurityException when the caller does not own the session, or
android11-security-release/core/java/android/content/pm/PackageInstaller.java:491:     * @throws SecurityException when the caller does not own the session, or
android11-security-release/core/java/android/content/pm/PackageInstaller.java:509:     * @throws SecurityException when the caller does not own the session, or
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1015:         * @throws SecurityException if called after the session has been
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1081:         * @throws SecurityException if called after the session has been
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1103:         * @throws SecurityException if called after the session has been
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1178:         * @throws SecurityException if called after the session has been
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1205:         * @throws SecurityException if called after the session has been
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1236:         * @throws SecurityException if streams opened through
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1284:         * will cause {@link SecurityException}s.
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1293:         * @throws SecurityException if called after the session has been committed or abandoned.
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1294:         * @throws SecurityException if the session does not update the original installer
android11-security-release/core/java/android/content/pm/PackageInstaller.java:1295:         * @throws SecurityException if streams opened through
android11-security-release/core/java/android/content/pm/ActivityInfo.java:502:     * this activity is launched into such a container a SecurityException will be
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:87:     *        {@link android.content.Intent#CATEGORY_LAUNCHER}. Otherwise, SecurityException will
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:90:     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:120:     *        {@link SecurityException} will be thrown.
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:147:     *        {@link SecurityException} will be thrown.
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:184:     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:228:     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:250:     *        {@link #getTargetUserProfiles()}, otherwise a {@link SecurityException} will
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:325:     * @throws SecurityException if {@code mContext.getPackageName()} does not belong to the
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:350:     * @throws SecurityException if {@code mContext.getPackageName()} does not belong to the
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:355:            throw new SecurityException(
android11-security-release/core/java/android/content/pm/CrossProfileApps.java:520:            throw new SecurityException("Not allowed to access " + userHandle);
android11-security-release/core/java/android/content/pm/PackageManager.java:4321:     * @throws SecurityException if you are not allowed to add the
android11-security-release/core/java/android/content/pm/PackageManager.java:4345:     * @throws SecurityException if you are not allowed to remove the
android11-security-release/core/java/android/content/pm/PackageManager.java:4386:     * java.lang.SecurityException} is thrown. If the package or permission is
android11-security-release/core/java/android/content/pm/PackageManager.java:4413:     * java.lang.SecurityException} is thrown. If the package or permission is
android11-security-release/core/java/android/content/pm/PackageManager.java:4440:     * java.lang.SecurityException} is thrown. If the package or permission is
android11-security-release/core/java/android/content/pm/PackageManager.java:4548:     * @throws SecurityException if you try to access a whitelist that you have no access to.
android11-security-release/core/java/android/content/pm/PackageManager.java:4602:     * @throws SecurityException if you try to modify a whitelist that you have no access to.
android11-security-release/core/java/android/content/pm/PackageManager.java:4656:     * @throws SecurityException if you try to modify a whitelist that you have no access to.
android11-security-release/core/java/android/content/pm/PackageManager.java:4682:     * @throws SecurityException if you you have no access to modify this.
android11-security-release/core/java/android/content/pm/PackageManager.java:4702:     * @throws SecurityException if you you have no access to this.
android11-security-release/core/java/android/content/pm/PackageManager.java:6138:     * @throws SecurityException if the caller does not have the
android11-security-release/core/java/android/content/pm/PackageManager.java:6172:     * @throws SecurityException if the caller does not have the
android11-security-release/core/java/android/content/pm/PackageManager.java:6192:     * @throws SecurityException if the caller does not have the
android11-security-release/core/java/android/content/pm/PackageManager.java:6323:     * <li> A SecurityException will be thrown if <var>installerPackageName</var>
android11-security-release/core/java/android/content/pm/PackageManager.java:6325:     * <li> A SecurityException will be thrown if <var>targetPackage</var> already
android11-security-release/core/java/android/content/om/OverlayManager.java:84:     * Pre R a {@link java.lang.SecurityException} would only be thrown by setEnabled APIs (e
android11-security-release/core/java/android/content/om/OverlayManager.java:86:     * Since R this no longer holds true, and {@link java.lang.SecurityException} can be
android11-security-release/core/java/android/content/om/OverlayManager.java:128:     * @throws SecurityException when caller is not allowed to enable {@param packageName}
android11-security-release/core/java/android/content/om/OverlayManager.java:139:            @NonNull UserHandle user) throws SecurityException, IllegalStateException {
android11-security-release/core/java/android/content/om/OverlayManager.java:144:        } catch (SecurityException e) {
android11-security-release/core/java/android/content/om/OverlayManager.java:145:            rethrowSecurityException(e);
android11-security-release/core/java/android/content/om/OverlayManager.java:163:     * @throws SecurityException when caller is not allowed to enable/disable {@param packageName}
android11-security-release/core/java/android/content/om/OverlayManager.java:174:            @NonNull UserHandle user) throws SecurityException, IllegalStateException {
android11-security-release/core/java/android/content/om/OverlayManager.java:179:        } catch (SecurityException e) {
android11-security-release/core/java/android/content/om/OverlayManager.java:180:            rethrowSecurityException(e);
android11-security-release/core/java/android/content/om/OverlayManager.java:260:     * cases, but the SecurityException thrown with these checks is unexpected for existing
android11-security-release/core/java/android/content/om/OverlayManager.java:265:     * catching SecurityException when calling these APIs.
android11-security-release/core/java/android/content/om/OverlayManager.java:267:     * For R, this no longer holds true, and SecurityExceptions can be thrown for any number of
android11-security-release/core/java/android/content/om/OverlayManager.java:269:     * transform these SecurityExceptions into IllegalStateExceptions, which are a little more
android11-security-release/core/java/android/content/om/OverlayManager.java:275:    private void rethrowSecurityException(SecurityException e) {
android11-security-release/core/java/android/content/AutofillOptions.java:135:            throw new SecurityException("Thou shall not pass!");
android11-security-release/core/java/android/content/ContentCaptureOptions.java:136:            throw new SecurityException("Thou shall not pass!");
android11-security-release/core/java/android/net/VpnService.java:887:         * @throws SecurityException if the service is not properly declared
android11-security-release/core/java/android/net/NetworkStack.java:80:     * {@link SecurityException}.
android11-security-release/core/java/android/net/NetworkStack.java:92:     * for a particular process, throw a {@link SecurityException}.
android11-security-release/core/java/android/net/NetworkStack.java:110:            throw new SecurityException("Requires one of the following permissions: "
android11-security-release/core/java/android/net/ConnectivityManager.java:3811:     * @throws SecurityException if missing the appropriate permissions.
android11-security-release/core/java/android/net/ConnectivityManager.java:3974:     * @throws SecurityException if missing the appropriate permissions.
android11-security-release/core/java/android/net/ConnectivityManager.java:4534:            } catch (SecurityException e) {
android11-security-release/core/java/android/net/ConnectivityManager.java:4718:     * @throws {@link SecurityException} if the caller is not the active VpnService for the current
android11-security-release/core/java/android/net/ConnectivityManager.java:4756:     * @throws SecurityException if the caller is not the owner of the given network.
android11-security-release/core/java/android/net/Ikev2VpnProfile.java:40:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/net/Ikev2VpnProfile.java:399:    public VpnProfile toVpnProfile() throws IOException, GeneralSecurityException {
android11-security-release/core/java/android/net/Ikev2VpnProfile.java:446:            throws IOException, GeneralSecurityException {
android11-security-release/core/java/android/net/Ikev2VpnProfile.java:462:            throws IOException, GeneralSecurityException {
android11-security-release/core/java/android/net/Ikev2VpnProfile.java:609:        } catch (GeneralSecurityException | IOException e) {
android11-security-release/core/java/android/net/VpnManager.java:36:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/net/VpnManager.java:111:        } catch (GeneralSecurityException | IOException e) {
android11-security-release/core/java/android/net/VpnManager.java:132:     * @throws SecurityException if this would violate user settings
android11-security-release/core/java/android/net/VpnManager.java:145:     * @throws SecurityException exception if user or device settings prevent this VPN from being
android11-security-release/core/java/android/net/NetworkScoreManager.java:244:     * @throws SecurityException if the caller doesn't hold either {@link permission#SCORE_NETWORKS}
android11-security-release/core/java/android/net/NetworkScoreManager.java:260:     * @throws SecurityException if the caller does not hold the
android11-security-release/core/java/android/net/NetworkScoreManager.java:278:     * @throws SecurityException if the caller does not hold the
android11-security-release/core/java/android/net/NetworkScoreManager.java:300:     * @throws SecurityException if the caller is not the active scorer.
android11-security-release/core/java/android/net/NetworkScoreManager.java:303:    public boolean updateScores(@NonNull ScoredNetwork[] networks) throws SecurityException {
android11-security-release/core/java/android/net/NetworkScoreManager.java:321:     * @throws SecurityException if the caller is not the active scorer or if the caller doesn't
android11-security-release/core/java/android/net/NetworkScoreManager.java:326:    public boolean clearScores() throws SecurityException {
android11-security-release/core/java/android/net/NetworkScoreManager.java:341:     * @throws SecurityException if the caller doesn't hold either {@link permission#SCORE_NETWORKS}
android11-security-release/core/java/android/net/NetworkScoreManager.java:348:    public boolean setActiveScorer(String packageName) throws SecurityException {
android11-security-release/core/java/android/net/NetworkScoreManager.java:361:     * @throws SecurityException if the caller is not the active scorer or if the caller doesn't
android11-security-release/core/java/android/net/NetworkScoreManager.java:366:    public void disableScoring() throws SecurityException {
android11-security-release/core/java/android/net/NetworkScoreManager.java:384:     * @throws SecurityException if the caller does not hold the
android11-security-release/core/java/android/net/NetworkScoreManager.java:390:    public boolean requestScores(@NonNull NetworkKey[] networks) throws SecurityException {
android11-security-release/core/java/android/net/NetworkScoreManager.java:408:     * @throws SecurityException if the caller does not hold the
android11-security-release/core/java/android/net/NetworkScoreManager.java:416:            throws SecurityException {
android11-security-release/core/java/android/net/NetworkScoreManager.java:425:     * @throws SecurityException if the caller does not hold the
android11-security-release/core/java/android/net/NetworkScoreManager.java:443:     * @throws SecurityException if the caller does not hold the
android11-security-release/core/java/android/net/NetworkScoreManager.java:463:     * @throws SecurityException if the caller does not hold the
android11-security-release/core/java/android/net/NetworkScoreManager.java:537:     * @throws SecurityException if the caller does not hold the
android11-security-release/core/java/android/net/NetworkScoreManager.java:547:            @NonNull NetworkScoreCallback callback) throws SecurityException {
android11-security-release/core/java/android/net/NetworkScoreManager.java:563:     * @throws SecurityException if the caller does not hold the
android11-security-release/core/java/android/net/INetworkScoreCache.aidl:28: * <p>A proper implementation should throw SecurityException whenever the caller is not privileged.
android11-security-release/core/java/android/net/PlatformVpnProfile.java:31:import java.security.GeneralSecurityException;
android11-security-release/core/java/android/net/PlatformVpnProfile.java:95:    public abstract VpnProfile toVpnProfile() throws IOException, GeneralSecurityException;
android11-security-release/core/java/android/net/PlatformVpnProfile.java:100:            throws IOException, GeneralSecurityException {
android11-security-release/core/java/android/net/INetworkScoreService.aidl:33:     * @throws SecurityException if the caller is not the current active scorer.
android11-security-release/core/java/android/net/INetworkScoreService.aidl:40:     * @throws SecurityException if the caller is neither the current active scorer nor the system.
android11-security-release/core/java/android/net/INetworkScoreService.aidl:48:     * @throws SecurityException if the caller is not the system or a network scorer.
android11-security-release/core/java/android/net/INetworkScoreService.aidl:54:     * @throws SecurityException if the caller is not the current scorer or the system.
android11-security-release/core/java/android/net/INetworkScoreService.aidl:64:     * @throws SecurityException if the caller is not the system
android11-security-release/core/java/android/net/INetworkScoreService.aidl:75:     * @throws SecurityException if the caller is not the system.
android11-security-release/core/java/android/net/INetworkScoreService.aidl:88:     * @throws SecurityException if the caller is not the system
android11-security-release/core/java/com/android/server/net/NetworkPinner.java:124:                } catch (SecurityException e) {
android11-security-release/core/java/com/android/server/net/NetworkPinner.java:138:                } catch (SecurityException e) {
android11-security-release/core/java/com/android/internal/widget/MessagingImageMessage.java:104:        } catch (IOException | SecurityException e) {
android11-security-release/core/java/com/android/internal/widget/LockPatternUtils.java:1475:            throw new SecurityException("Only available to system server itself");
android11-security-release/core/java/com/android/internal/compat/OverrideAllowedState.java:103:     * @throws SecurityException if the policy forbids this operation.
android11-security-release/core/java/com/android/internal/compat/OverrideAllowedState.java:106:            throws SecurityException {
android11-security-release/core/java/com/android/internal/compat/OverrideAllowedState.java:111:                throw new SecurityException(
android11-security-release/core/java/com/android/internal/compat/OverrideAllowedState.java:114:                throw new SecurityException(
android11-security-release/core/java/com/android/internal/compat/OverrideAllowedState.java:117:                throw new SecurityException(String.format(
android11-security-release/core/java/com/android/internal/compat/OverrideAllowedState.java:122:                throw new SecurityException(String.format(
android11-security-release/core/java/com/android/internal/compat/OverrideAllowedState.java:127:                throw new SecurityException(String.format(
android11-security-release/core/java/com/android/internal/app/ResolverActivity.java:929:        } catch (SecurityException e) {
android11-security-release/core/java/com/android/internal/app/ConfirmUserCreationActivity.java:87:            throw new SecurityException(
android11-security-release/core/java/com/android/internal/app/ConfirmUserCreationActivity.java:94:            throw new SecurityException(
android11-security-release/core/java/com/android/internal/app/ChooserActivity.java:1406:        } catch (SecurityException | NullPointerException e) {
android11-security-release/core/java/com/android/internal/app/ChooserActivity.java:2604:        } catch (IOException | NullPointerException | SecurityException ex) {
android11-security-release/core/java/com/android/internal/os/ZygoteConnection.java:200:            throw new ZygoteSecurityException("Client may not specify capabilities: "
android11-security-release/core/java/com/android/internal/os/Zygote.java:831:            throw new ZygoteSecurityException("Client may not specify capabilities: "
android11-security-release/core/java/com/android/internal/os/Zygote.java:865:     * @throws ZygoteSecurityException Indicates a security issue when applying the UID based
android11-security-release/core/java/com/android/internal/os/Zygote.java:869:            throws ZygoteSecurityException {
android11-security-release/core/java/com/android/internal/os/Zygote.java:878:                throw new ZygoteSecurityException(
android11-security-release/core/java/com/android/internal/os/Zygote.java:921:     * @throws ZygoteSecurityException Thrown when `--invoke-with` is specified for a non-debuggable
android11-security-release/core/java/com/android/internal/os/Zygote.java:925:            throws ZygoteSecurityException {
android11-security-release/core/java/com/android/internal/os/Zygote.java:930:            throw new ZygoteSecurityException("Peer is permitted to specify an "
android11-security-release/core/java/com/android/internal/os/ZygoteSecurityException.java:24:class ZygoteSecurityException extends RuntimeException {
android11-security-release/core/java/com/android/internal/os/ZygoteSecurityException.java:26:    ZygoteSecurityException(String message) {
android11-security-release/core/java/com/android/internal/os/RuntimeInit.java:363:        } catch (SecurityException ex) {
android11-security-release/core/java/com/android/internal/util/LocationPermissionChecker.java:126:     * SecurityException is thrown if the caller has no permission or the location mode is disabled.
android11-security-release/core/java/com/android/internal/util/LocationPermissionChecker.java:135:            @Nullable String message) throws SecurityException {
android11-security-release/core/java/com/android/internal/util/LocationPermissionChecker.java:140:                throw new SecurityException("Location mode is disabled for the device");
android11-security-release/core/java/com/android/internal/util/LocationPermissionChecker.java:142:                throw new SecurityException("UID " + uid + " has no location permission");
android11-security-release/core/java/com/android/internal/util/LocationPermissionChecker.java:246:            throws SecurityException {
android11-security-release/core/java/com/android/internal/util/LocationPermissionChecker.java:248:            throw new SecurityException("Checking UID " + uid + " but Package Name is Null");
android11-security-release/core/java/com/android/internal/util/MessageUtils.java:61:            } catch (SecurityException e) {
android11-security-release/core/java/com/android/internal/util/MessageUtils.java:106:                    } catch (SecurityException | IllegalAccessException e) {
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:87:    private boolean mThrowSecurityException;
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:110:        if (mThrowSecurityException) {
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:111:            doThrow(new SecurityException("Package " + TEST_PKG_NAME + " doesn't belong"
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:133:        mThrowSecurityException = true;
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:178:        mThrowSecurityException = false;
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:195:        mThrowSecurityException = false;
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:210:        mThrowSecurityException = true;
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:217:        assertThrows(SecurityException.class,
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:224:        mThrowSecurityException = false;
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:236:        mThrowSecurityException = false;
android11-security-release/core/tests/utiltests/src/com/android/internal/util/LocationPermissionCheckerTest.java:253:        mThrowSecurityException = false;
android11-security-release/core/tests/screenshothelpertests/src/com/android/internal/util/ScreenshotHelperTest.java:64:        // This raises a `SecurityException` if the device is locked. Calling either `Context`
android11-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:28:import androidx.test.espresso.InjectEventSecurityException;
android11-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:97:        } catch (InjectEventSecurityException e) {
android11-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:107:        } catch (InjectEventSecurityException e) {
android11-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:136:            } catch (InjectEventSecurityException e) {
android11-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:155:        } catch (InjectEventSecurityException e) {
android11-security-release/core/tests/coretests/src/android/view/PinchZoomAction.java:170:        } catch (InjectEventSecurityException e) {
android11-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:27:import androidx.test.espresso.InjectEventSecurityException;
android11-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:63:    public boolean injectKeyEvent(KeyEvent event) throws InjectEventSecurityException {
android11-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:68:    public boolean injectMotionEvent(MotionEvent event) throws InjectEventSecurityException {
android11-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:86:            throws InjectEventSecurityException {
android11-security-release/core/tests/coretests/src/android/widget/espresso/MouseUiController.java:106:    public boolean injectString(String str) throws InjectEventSecurityException {
android11-security-release/core/tests/coretests/src/android/provider/DocumentsProviderTest.java:90:            fail("Expected a SecurityException to be throw");
android11-security-release/core/tests/coretests/src/android/provider/DocumentsProviderTest.java:91:        } catch (SecurityException expected) { }
android11-security-release/core/tests/coretests/src/android/app/DownloadManagerFunctionalTest.java:237:                fail("Failed to throw SecurityException when trying to write to /system.");
android11-security-release/core/tests/coretests/src/android/app/DownloadManagerFunctionalTest.java:238:            } catch (SecurityException s) {
android11-security-release/core/tests/coretests/src/android/app/activity/SetTimeZonePermissionsTest.java:59:            } catch (SecurityException se) {
android11-security-release/core/tests/coretests/src/android/os/storage/StorageManagerBaseTest.java:172:        } catch (SecurityException e) {
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:197:        public void voidSecurityException() {
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:198:            throw new SecurityException("gotcha!");
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:201:        public int intSecurityException() {
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:202:            throw new SecurityException("gotcha!");
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:400:    public void testVoidSecurityException() throws Exception {
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:403:            mRemote.voidSecurityException();
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:404:        } catch (SecurityException e) {
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:411:    public void testIntSecurityException() throws Exception {
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:414:            mRemote.intSecurityException();
android11-security-release/core/tests/coretests/src/android/os/AidlTest.java:415:        } catch (SecurityException e) {
android11-security-release/core/tests/coretests/src/android/os/IAidlTest.aidl:45:    void voidSecurityException();
android11-security-release/core/tests/coretests/src/android/os/IAidlTest.aidl:46:    int intSecurityException();
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:258:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:285:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:321:                getActivity().getPackageName(), BAD_APP_ID, mUserId), SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:342:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:368:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:391:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:428:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:446:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:460:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:463:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:480:                                mUserId), SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:483:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:499:                mUserId), SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:519:                listener, mUserId), SecurityException.class);
android11-security-release/core/tests/coretests/src/android/print/IPrintManagerParametersTest.java:536:                SecurityException.class);
android11-security-release/core/tests/coretests/src/android/content/pm/CrossProfileAppsTest.java:112:    @Test(expected = SecurityException.class)
android11-security-release/core/tests/coretests/src/android/content/pm/CrossProfileAppsTest.java:113:    public void getProfileSwitchingLabel_securityException() {
android11-security-release/core/tests/coretests/src/android/content/pm/CrossProfileAppsTest.java:133:    @Test(expected = SecurityException.class)
android11-security-release/core/tests/coretests/src/android/content/pm/CrossProfileAppsTest.java:134:    public void getProfileSwitchingIcon_securityException() {
android11-security-release/core/tests/coretests/src/android/content/pm/PackageManagerTests.java:2251:        } catch (SecurityException e) {
android11-security-release/core/tests/coretests/src/android/net/NetworkRecommendationProviderTest.java:95:        Mockito.doThrow(new SecurityException())
android11-security-release/core/tests/coretests/src/android/net/NetworkRecommendationProviderTest.java:101:            fail("SecurityException expected.");
android11-security-release/core/tests/coretests/src/android/net/NetworkRecommendationProviderTest.java:102:        } catch (SecurityException e) {
android11-security-release/core/tests/coretests/src/com/android/internal/app/ChooserWrapperActivity.java:172:            throw new SecurityException("Test exception handling");
android11-security-release/core/tests/coretests/src/com/android/internal/app/ChooserActivityTest.java:840:    public void contentProviderThrowSecurityException() throws InterruptedException {
android11-security-release/core/tests/bugreports/src/android/server/bugreports/BugreportManagerTest.java:183:            fail("Expected cancelBugreport to throw SecurityException without DUMP permission");
android11-security-release/core/tests/bugreports/src/android/server/bugreports/BugreportManagerTest.java:184:        } catch (SecurityException expected) {
android11-security-release/core/tests/bugreports/src/android/server/bugreports/BugreportManagerTest.java:203:            fail("Expected startBugreport to throw SecurityException without DUMP permission");
android11-security-release/core/tests/bugreports/src/android/server/bugreports/BugreportManagerTest.java:204:        } catch (SecurityException expected) {
android11-security-release/core/tests/hosttests/test-apps/MultiDexLegacyTestServices/src/com/android/framework/multidexlegacytestservices/ReflectIntermediateClass.java:29:            SecurityException, NoSuchMethodException, IllegalArgumentException,
android11-security-release/non-updatable-api/system-current.txt:1858:    method @RequiresPermission(anyOf={"android.permission.INTERACT_ACROSS_USERS", "android.permission.INTERACT_ACROSS_USERS_FULL"}) public void setEnabled(@NonNull String, boolean, @NonNull android.os.UserHandle) throws java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/non-updatable-api/system-current.txt:1859:    method @RequiresPermission(anyOf={"android.permission.INTERACT_ACROSS_USERS", "android.permission.INTERACT_ACROSS_USERS_FULL"}) public void setEnabledExclusiveInCategory(@NonNull String, @NonNull android.os.UserHandle) throws java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/non-updatable-api/system-current.txt:4135:    method @RequiresPermission(android.Manifest.permission.MODIFY_AUDIO_ROUTING) public void addOnPreferredDeviceForStrategyChangedListener(@NonNull java.util.concurrent.Executor, @NonNull android.media.AudioManager.OnPreferredDeviceForStrategyChangedListener) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/system-current.txt:6263:    method @RequiresPermission(anyOf={android.Manifest.permission.SCORE_NETWORKS, android.Manifest.permission.REQUEST_NETWORK_SCORES}) public boolean clearScores() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/system-current.txt:6264:    method @RequiresPermission(anyOf={android.Manifest.permission.SCORE_NETWORKS, android.Manifest.permission.REQUEST_NETWORK_SCORES}) public void disableScoring() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/system-current.txt:6266:    method @RequiresPermission(android.Manifest.permission.REQUEST_NETWORK_SCORES) public void registerNetworkScoreCallback(int, int, @NonNull java.util.concurrent.Executor, @NonNull android.net.NetworkScoreManager.NetworkScoreCallback) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/system-current.txt:6267:    method @RequiresPermission(android.Manifest.permission.REQUEST_NETWORK_SCORES) public boolean requestScores(@NonNull java.util.Collection<android.net.NetworkKey>) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/system-current.txt:6268:    method @RequiresPermission(anyOf={android.Manifest.permission.SCORE_NETWORKS, android.Manifest.permission.REQUEST_NETWORK_SCORES}) public boolean setActiveScorer(String) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/system-current.txt:6269:    method @RequiresPermission(android.Manifest.permission.SCORE_NETWORKS) public boolean updateScores(@NonNull android.net.ScoredNetwork[]) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/system-current.txt:8244:  public class DecryptionFailedException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/system-current.txt:8248:  public class InternalRecoveryServiceException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/system-current.txt:8304:  public class LockScreenRequiredException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/system-current.txt:8339:  public class SessionExpiredException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:4042:    method @Deprecated public java.util.List<android.app.ActivityManager.RecentTaskInfo> getRecentTasks(int, int) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:4044:    method public android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:4045:    method @Deprecated public java.util.List<android.app.ActivityManager.RunningServiceInfo> getRunningServices(int) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:4046:    method @Deprecated public java.util.List<android.app.ActivityManager.RunningTaskInfo> getRunningTasks(int) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:4610:  public final class AuthenticationRequiredException extends java.lang.SecurityException implements android.os.Parcelable {
android11-security-release/non-updatable-api/current.txt:6220:  public final class RecoverableSecurityException extends java.lang.SecurityException implements android.os.Parcelable {
android11-security-release/non-updatable-api/current.txt:6221:    ctor public RecoverableSecurityException(@NonNull Throwable, @NonNull CharSequence, @NonNull android.app.RemoteAction);
android11-security-release/non-updatable-api/current.txt:6226:    field @NonNull public static final android.os.Parcelable.Creator<android.app.RecoverableSecurityException> CREATOR;
android11-security-release/non-updatable-api/current.txt:6868:    method @Deprecated @Nullable public String getCertInstallerPackage(@NonNull android.content.ComponentName) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:6994:    method @Deprecated public void setCertInstallerPackage(@NonNull android.content.ComponentName, @Nullable String) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:7015:    method public void setLockTaskPackages(@NonNull android.content.ComponentName, @NonNull String[]) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:7997:    method public android.app.usage.NetworkStats queryDetails(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:7998:    method public android.app.usage.NetworkStats queryDetailsForUid(int, String, long, long, int) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:7999:    method public android.app.usage.NetworkStats queryDetailsForUidTag(int, String, long, long, int, int) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:8000:    method public android.app.usage.NetworkStats queryDetailsForUidTagState(int, String, long, long, int, int, int) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:8001:    method public android.app.usage.NetworkStats querySummary(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:8002:    method public android.app.usage.NetworkStats.Bucket querySummaryForDevice(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:8003:    method public android.app.usage.NetworkStats.Bucket querySummaryForUser(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:9487:    method public void onSecurityException(android.accounts.Account, android.os.Bundle, String, android.content.SyncResult);
android11-security-release/non-updatable-api/current.txt:26292:    method public void setDataSource(android.content.Context, android.net.Uri) throws java.lang.IllegalArgumentException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:26416:    method public void setDataSource(@NonNull android.content.Context, @NonNull android.net.Uri) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:26418:    method public void setDataSource(@NonNull android.content.Context, @NonNull android.net.Uri, @Nullable java.util.Map<java.lang.String,java.lang.String>) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:26419:    method public void setDataSource(String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:35318:    method public static final void setThreadPriority(int, int) throws java.lang.IllegalArgumentException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:35319:    method public static final void setThreadPriority(int) throws java.lang.IllegalArgumentException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:35359:    method public static void verifyPackage(java.io.File, android.os.RecoverySystem.ProgressListener, java.io.File) throws java.security.GeneralSecurityException, java.io.IOException;
android11-security-release/non-updatable-api/current.txt:60742:    ctor protected ObjectInputStream() throws java.io.IOException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:60744:    method protected boolean enableResolveObject(boolean) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:60800:    ctor protected ObjectOutputStream() throws java.io.IOException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:60805:    method protected boolean enableReplaceObject(boolean) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:61874:    method @NonNull public java.lang.reflect.Constructor<T> getConstructor(@Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:61875:    method @NonNull public java.lang.reflect.Constructor<?>[] getConstructors() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:61879:    method @NonNull public java.lang.reflect.Constructor<T> getDeclaredConstructor(@Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:61880:    method @NonNull public java.lang.reflect.Constructor<?>[] getDeclaredConstructors() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:61883:    method @NonNull public java.lang.reflect.Method getDeclaredMethod(@NonNull String, @Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:61884:    method @NonNull public java.lang.reflect.Method[] getDeclaredMethods() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:61891:    method @NonNull public java.lang.reflect.Field[] getFields() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:61895:    method @NonNull public java.lang.reflect.Method getMethod(@NonNull String, @Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:61896:    method @NonNull public java.lang.reflect.Method[] getMethods() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:62597:  public class SecurityException extends java.lang.RuntimeException {
android11-security-release/non-updatable-api/current.txt:62598:    ctor public SecurityException();
android11-security-release/non-updatable-api/current.txt:62599:    ctor public SecurityException(String);
android11-security-release/non-updatable-api/current.txt:62600:    ctor public SecurityException(String, Throwable);
android11-security-release/non-updatable-api/current.txt:62601:    ctor public SecurityException(Throwable);
android11-security-release/non-updatable-api/current.txt:63453:    method public static void setAccessible(java.lang.reflect.AccessibleObject[], boolean) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:63454:    method public void setAccessible(boolean) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:66185:  public class AccessControlException extends java.lang.SecurityException {
android11-security-release/non-updatable-api/current.txt:66315:  public class DigestException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:66349:  public class GeneralSecurityException extends java.lang.Exception {
android11-security-release/non-updatable-api/current.txt:66350:    ctor public GeneralSecurityException();
android11-security-release/non-updatable-api/current.txt:66351:    ctor public GeneralSecurityException(String);
android11-security-release/non-updatable-api/current.txt:66352:    ctor public GeneralSecurityException(String, Throwable);
android11-security-release/non-updatable-api/current.txt:66353:    ctor public GeneralSecurityException(Throwable);
android11-security-release/non-updatable-api/current.txt:66357:    method public void checkGuard(Object) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:66362:    method public Object getObject() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:66398:  public class InvalidAlgorithmParameterException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:66424:  public class KeyException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:66586:  public class KeyStoreException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:66649:  public class NoSuchAlgorithmException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:66656:  public class NoSuchProviderException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:66671:    method public void checkGuard(Object) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:66888:  public class SignatureException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:66937:  public class UnrecoverableEntryException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:67024:  public class CRLException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:67077:  public class CertPathBuilderException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:67117:  public class CertPathValidatorException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:67170:  public class CertStoreException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:67211:  public class CertificateException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:67734:  public class InvalidKeySpecException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:67741:  public class InvalidParameterSpecException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:75161:    ctor public FileHandler() throws java.io.IOException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75162:    ctor public FileHandler(String) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75163:    ctor public FileHandler(String, boolean) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75164:    ctor public FileHandler(String, int, int) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75165:    ctor public FileHandler(String, int, int, boolean) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75182:    method public abstract void close() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75192:    method public void setEncoding(String) throws java.lang.SecurityException, java.io.UnsupportedEncodingException;
android11-security-release/non-updatable-api/current.txt:75194:    method public void setFilter(java.util.logging.Filter) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75195:    method public void setFormatter(java.util.logging.Formatter) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75196:    method public void setLevel(java.util.logging.Level) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75222:    method @Deprecated public void addPropertyChangeListener(java.beans.PropertyChangeListener) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75223:    method public void checkAccess() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75229:    method public void readConfiguration() throws java.io.IOException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75230:    method public void readConfiguration(java.io.InputStream) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75231:    method @Deprecated public void removePropertyChangeListener(java.beans.PropertyChangeListener) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75232:    method public void reset() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75266:    method public void addHandler(@NonNull java.util.logging.Handler) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75315:    method public void removeHandler(@Nullable java.util.logging.Handler) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75316:    method public void setFilter(@Nullable java.util.logging.Filter) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75317:    method public void setLevel(@Nullable java.util.logging.Level) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75344:    method public void close() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75349:    method public void setPushLevel(java.util.logging.Level) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75365:    method public void close() throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:75368:    method protected void setOutputStream(java.io.OutputStream) throws java.lang.SecurityException;
android11-security-release/non-updatable-api/current.txt:76286:  public class BadPaddingException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:76404:  public class ExemptionMechanismException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:76419:  public class IllegalBlockSizeException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:76507:  public class NoSuchPaddingException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:76549:  public class ShortBufferException extends java.security.GeneralSecurityException {
android11-security-release/non-updatable-api/current.txt:78114:  public class LoginException extends java.security.GeneralSecurityException {
android11-security-release/services/core/java/android/os/UserManagerInternal.java:236:     * @throws SecurityException if the calling user and {@code targetUser} are not in the same
android11-security-release/services/core/java/android/os/UserManagerInternal.java:237:     * group and {@code throwSecurityException} is true, otherwise if will simply return false.
android11-security-release/services/core/java/android/os/UserManagerInternal.java:240:            String debugMsg, boolean throwSecurityException);
android11-security-release/services/core/java/android/content/pm/PackageManagerInternal.java:866:     * @throws SecurityException if the caller does not have the
android11-security-release/services/core/java/com/android/server/TelephonyRegistry.java:167:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/TelephonyRegistry.java:817:            // Checks permission and throws SecurityException for disallowed operations. For pre-M
android11-security-release/services/core/java/com/android/server/TelephonyRegistry.java:1471:            throw new SecurityException("notifyCarrierNetworkChange without carrier privilege");
android11-security-release/services/core/java/com/android/server/TelephonyRegistry.java:2642:                    throw new SecurityException("Unable to listen for events " + events + " due to "
android11-security-release/services/core/java/com/android/server/TelephonyRegistry.java:2662:            } catch (SecurityException se) {
android11-security-release/services/core/java/com/android/server/IpSecService.java:471:                throw new SecurityException("Attempted access of unowned resources");
android11-security-release/services/core/java/com/android/server/IpSecService.java:1711:            throw new SecurityException("Only the owner of an IpSec Transform may apply it!");
android11-security-release/services/core/java/com/android/server/wm/ActivityStackSupervisor.java:1032:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wm/LockTaskController.java:404:     * @throws SecurityException if the caller is not authorized to stop the lock task mode, i.e. if
android11-security-release/services/core/java/com/android/server/wm/LockTaskController.java:435:                throw new SecurityException("Invalid uid, expected " + task.mLockTaskUid
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:1355:            if (!(e instanceof SecurityException)) {
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:1822:                    throw new SecurityException("Package " + packageName + " not in UID "
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:1883:            throw new SecurityException("Only system can call refreshScreenCaptureDisabled.");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2654:                        throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2717:            throw new SecurityException("removeWindowToken: Requires MANAGE_APP_TOKENS permission"
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2754:            throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2781:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2806:            throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2961:            throw new SecurityException("Requires FREEZE_SCREEN permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:2983:            throw new SecurityException("Requires FREEZE_SCREEN permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3006:            throw new SecurityException("Requires DISABLE_KEYGUARD permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3023:            throw new SecurityException("Requires DISABLE_KEYGUARD permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3042:            throw new SecurityException("Requires DISABLE_KEYGUARD permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3075:            throw new SecurityException("Requires INTERACT_ACROSS_USERS permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3089:            throw new SecurityException("Requires CONTROL_KEYGUARD permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3100:            throw new SecurityException("Requires INTERACT_ACROSS_USERS_FULL permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3113:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3135:            throw new SecurityException("Requires SET_ANIMATION_SCALE permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3153:            throw new SecurityException("Requires SET_ANIMATION_SCALE permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3618:            throw new SecurityException("Requires READ_FRAME_BUFFER permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3640:            throw new SecurityException("Requires READ_FRAME_BUFFER permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3695:            throw new SecurityException("Requires SET_ORIENTATION permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3723:            throw new SecurityException("Requires SET_ORIENTATION permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3760:            throw new SecurityException("Requires SET_ORIENTATION permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3868:            throw new SecurityException("Must hold permission " + MANAGE_ACTIVITY_STACKS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3889:            throw new SecurityException("Must hold permission " + MANAGE_APP_TOKENS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3909:            throw new SecurityException("Must hold permission " + MANAGE_APP_TOKENS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3934:            throw new SecurityException("Must hold permission " + MANAGE_APP_TOKENS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:3954:            throw new SecurityException("Must hold permission " + MANAGE_APP_TOKENS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:4108:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:4140:            throw new SecurityException("Must hold permission " + MANAGE_ACTIVITY_STACKS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:4155:            throw new SecurityException("Must hold permission " + MANAGE_ACTIVITY_STACKS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:4553:            throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5215:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5235:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5302:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5345:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5368:            throw new SecurityException("Must hold permission " + WRITE_SECURE_SETTINGS);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5792:            throw new SecurityException("Caller does not hold permission "
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5805:            throw new SecurityException("Caller does not hold permission "
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5843:            throw new SecurityException("Caller does not hold permission "
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5857:            throw new SecurityException("Caller does not hold permission "
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5915:            throw new SecurityException("getCurrentImeTouchRegion is restricted to VR services");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5962:            throw new SecurityException("Requires FRAME_STATS permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:5981:            throw new SecurityException("Requires FRAME_STATS permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6734:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6843:            throw new SecurityException("The caller doesn't own the display.");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6928:            throw new SecurityException("Requires READ_FRAME_BUFFER permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:6993:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7011:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7046:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7064:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7089:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7107:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7132:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7149:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7161:                    throw new SecurityException("Attempted to set system decors flag to an "
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7177:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7197:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7209:                    throw new SecurityException("Attempted to set IME flag to an untrusted "
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:7226:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/wm/WindowManagerService.java:8252:            throw new SecurityException("Requires READ_FRAME_BUFFER permission");
android11-security-release/services/core/java/com/android/server/wm/Session.java:142:            if (!(e instanceof SecurityException)) {
android11-security-release/services/core/java/com/android/server/wm/Session.java:670:            throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/wm/AppTaskImpl.java:51:            throw new SecurityException("Caller " + mCallingUid
android11-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:102:    ActivityOptions getOptions(ActivityRecord r) throws SecurityException {
android11-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:110:    ActivityOptions getOptions(ActivityStackSupervisor supervisor) throws SecurityException {
android11-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:123:            ActivityStackSupervisor supervisor) throws SecurityException {
android11-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:208:                throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:222:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:234:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:245:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wm/SafeActivityOptions.java:257:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wm/WindowManagerShellCommand.java:356:            throw new SecurityException("Requires DUMP permission");
android11-security-release/services/core/java/com/android/server/wm/ViewServer.java:132:                } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1256:                throw new SecurityException("The dream activity can be started only when the device"
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1371:            throw new SecurityException("Only the system process can request a permission token, "
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1410:                throw new SecurityException("Must be called from an activity");
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1425:                        throw new SecurityException("Called with expired permission token: "
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1428:                        throw new SecurityException("Called with invalid permission token: "
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1439:                throw new SecurityException("Called with bad activity token: " + sourceToken);
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1442:                throw new SecurityException("Called without a process attached to activity");
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1448:                throw new SecurityException("Must be called from an activity that is "
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1456:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1464:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1468:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1501:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1503:            // A SecurityException here is generally actually a fault of the original
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:1632:     *         no {@link SecurityException} will be thrown, {@code false} otherwise.
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:2598:        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:3305:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:3414:            throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:4356:                throw new SecurityException("Only focused activity can call startVoiceInteraction");
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:4694:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:5108:            throw new SecurityException("Isolated process not allowed to call " + caller);
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:6901:                    throw new SecurityException("Only privileged app can call notifyLockedProfile");
android11-security-release/services/core/java/com/android/server/wm/ActivityTaskManagerService.java:6904:                throw new SecurityException("Fail to check is caller a privileged app", ex);
android11-security-release/services/core/java/com/android/server/notification/NotificationRecord.java:1282:     * {@link SecurityException} depending on target SDK of enqueuing app.
android11-security-release/services/core/java/com/android/server/notification/NotificationRecord.java:1293:            // This will throw SecurityException if caller can't grant
android11-security-release/services/core/java/com/android/server/notification/NotificationRecord.java:1303:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2477:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:2515:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3094:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3183:                throw new SecurityException("Only available for notification listeners");
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3407:            throw new SecurityException("Pkg " + callingPkg
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3427:                throw new SecurityException("Not allowed to delete channel " + channelId
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3646:            throw new SecurityException("Pkg " + callingPkg
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:3748:                    throw new SecurityException("Not currently an assistant");
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4008:                                throw new SecurityException("Disallowed call from listener: "
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4076:                            throw new SecurityException("Disallowed call from listener: "
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4183:                        throw new SecurityException("Not allowed to unsnooze before deadline");
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4531:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4554:                throw new SecurityException("Notification policy access denied");
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:4566:                throw new SecurityException("Notification policy access denied");
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:5027:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:5041:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:5064:                        throw new SecurityException(info + " does not have access");
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:5069:                throw new SecurityException(info + " does not have access");
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:5702:                        throw new SecurityException(opPkg + " does not have permission to "
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:5741:        // Can throw a SecurityException if the calling uid doesn't have permission to post
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:5746:            throw new SecurityException("Caller " + opPkg + ":" + callingUid
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:6059:        throw new SecurityException("Caller " + callingPkg + ":" + callingUid
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:6086:                    throw new SecurityException("Instant app " + pkg
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:7968:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8542:        throw new SecurityException("Disallowed call for uid " + Binder.getCallingUid());
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8575:     * if so throw SecurityException
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8607:                throw new SecurityException("Unknown uid " + callingUid);
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8614:                throw new SecurityException("Unknown package " + pkg);
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8618:            throw new SecurityException("Unknown uid " + callingUid, re);
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8634:                throw new SecurityException("Unknown package " + pkg);
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8637:                throw new SecurityException("Calling uid " + uid + " gave package "
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8641:            throw new SecurityException("Unknown package " + pkg + "\n" + re);
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8649:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8658:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8736:        } catch (SecurityException se) {
android11-security-release/services/core/java/com/android/server/notification/NotificationManagerService.java:8767:            throw new SecurityException("Could not talk to package manager service");
android11-security-release/services/core/java/com/android/server/notification/ManagedServices.java:874:        throw new SecurityException("Disallowed call from unknown " + getCaption() + ": "
android11-security-release/services/core/java/com/android/server/notification/ManagedServices.java:1398:        } catch (SecurityException ex) {
android11-security-release/services/core/java/com/android/server/notification/ZenModeHelper.java:364:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/notification/ZenModeHelper.java:390:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/notification/ZenModeHelper.java:881:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/SystemUpdateManagerService.java:119:            throw new SecurityException("Can't read system update info. Requiring "
android11-security-release/services/core/java/com/android/server/am/ProcessList.java:2469:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/am/ProcessStatsService.java:117:            if (!(e instanceof SecurityException)) {
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:514:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:859:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:950:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:1371:                        throw new SecurityException("Instant app " + r.appInfo.packageName
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:1430:                        throw new SecurityException("Foreground not allowed as per app op");
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:1924:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:1966:            throw new SecurityException("Non-system caller (pid=" + callingPid
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:1971:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:1977:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:2502:                            throw new SecurityException("BIND_EXTERNAL_SERVICE failed, "
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:2506:                            throw new SecurityException("BIND_EXTERNAL_SERVICE failed, "
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:2513:                            throw new SecurityException("BIND_EXTERNAL_SERVICE failed, " +
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:2526:                        throw new SecurityException("BIND_EXTERNAL_SERVICE required for " +
android11-security-release/services/core/java/com/android/server/am/ActiveServices.java:2530:                    throw new SecurityException("BIND_EXTERNAL_SERVICE failed, " + name +
android11-security-release/services/core/java/com/android/server/am/BroadcastQueue.java:1439:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/am/OomAdjuster.java:2244:                            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/am/ActivityManagerShellCommand.java:3022:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:2887:            if (!(e instanceof SecurityException
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:3277:            throw new SecurityException("Isolated process not allowed to call " + caller);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:3323:            throw new SecurityException("Only shell can call it");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:3739:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:3754:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4239:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4256:                    throw new SecurityException("PID " + pid + " does not have permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4366:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4407:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4445:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4467:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4561:            throw new SecurityException(callerUid + " cannot kill pkg: " +
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:4742:            throw new SecurityException(callerUid + " cannot kill app process: " +
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5452:            throw new SecurityException("Invalid application interface");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5466:            throw new SecurityException();
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5715:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:5728:            throw new SecurityException(e);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6252:        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6266:        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6506:                throw new SecurityException("Unable to find app for caller "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6540:                throw new SecurityException("Unable to find app for caller "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:6705:            throw new SecurityException("updateDeviceOwner called from non-system process");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7059:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7113:                        throw new SecurityException("Content provider lookup "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7121:                        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7147:                    throw new SecurityException("Content provider lookup "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7155:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7253:                    throw new SecurityException("Content provider lookup " + name
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7259:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7585:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7592:            throw new SecurityException("Given calling package " + callingPackage
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7701:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:7892:                throw new SecurityException("Unknown process: " + callingPid);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8207:            throw new SecurityException("Only the OS may call backgroundWhitelistUid()");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8369:            throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8465:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8496:                    throw new SecurityException("Process not debuggable: " + app.packageName);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8509:                    throw new SecurityException("Process not debuggable, "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8532:                throw new SecurityException("Process not debuggable: " + app.packageName);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8572:                    throw new SecurityException("Unknown process: " + callingPid);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8576:                    throw new SecurityException("Only an instrumentation process "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8600:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8876:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8900:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:8987:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:9178:            throw new SecurityException("killPids only available to the system");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:9268:            throw new SecurityException("killProcessesBelowForeground() only available to system");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:9276:            throw new SecurityException("killProcessesBelowAdj() only available to system");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:9305:            throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:9321:            throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:9360:            throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:9396:            throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:9474:            throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:10464:     * throw SecurityException if it doesn't have the permission.
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:15116:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:15536:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:15544:                    throw new SecurityException("Given caller package " + callerPackage
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16006:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16030:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16071:                throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16083:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16094:                        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16134:                        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16371:                throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16379:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16794:                throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:16921:                throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:17157:        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18180:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18418:            throw new SecurityException("Only SIGNAL_USR1 is allowed");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18424:                throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18475:                    throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18586:                    throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18602:                        throw new SecurityException("Process not debuggable: " + proc);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18643:                    throw new SecurityException("No process found for calling pid "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18648:                    throw new SecurityException("Not running a debuggable build");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18653:                    throw new SecurityException("Package " + reportPackage + " is not running in "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18792:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18806:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18865:                throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:18892:                    throw new SecurityException("Requires permission "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:19805:            throw new SecurityException("Requires permission " + FILTER_EVENTS);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:19831:            throw new SecurityException("Requires permission " + FILTER_EVENTS);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:20074:                        throw new SecurityException("Process not debuggable: " + proc);
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:20145:            throw new SecurityException("Only the shell can delegate its permissions");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:20164:                    throw new SecurityException("Shell can delegate permissions only "
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:20179:                    throw new SecurityException("Shell can delegate its permissions" +
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:20197:            throw new SecurityException("Only the shell can delegate its permissions");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:20349:            throw new SecurityException("Only shell can call it");
android11-security-release/services/core/java/com/android/server/am/ActivityManagerService.java:20372:            throw new SecurityException("Calling uid " + callingUid + " cannot set locusId"
android11-security-release/services/core/java/com/android/server/am/PendingIntentController.java:250:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/PendingIntentController.java:253:                throw new SecurityException(e);
android11-security-release/services/core/java/com/android/server/am/UserController.java:1937:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/UserController.java:1947:                throw new SecurityException("Shell does not have permission to access user "
android11-security-release/services/core/java/com/android/server/am/UserController.java:2168:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/UserController.java:2254:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/am/UserController.java:2261:                throw new SecurityException("Shell does not have permission to access user "
android11-security-release/services/core/java/com/android/server/UiModeManagerService.java:566:                throw new SecurityException("Enabling car mode with a priority requires "
android11-security-release/services/core/java/com/android/server/UiModeManagerService.java:1127:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/integrity/AppIntegrityManagerServiceImpl.java:665:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/NetworkScoreService.java:442:            throw new SecurityException("Caller with UID " + getCallingUid() +
android11-security-release/services/core/java/com/android/server/NetworkScoreService.java:729:    private void enforceSystemOnly() throws SecurityException {
android11-security-release/services/core/java/com/android/server/NetworkScoreService.java:735:    private void enforceSystemOrHasScoreNetworks() throws SecurityException {
android11-security-release/services/core/java/com/android/server/NetworkScoreService.java:740:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/NetworkScoreService.java:745:    private void enforceSystemOrIsActiveScorer(int callingUid) throws SecurityException {
android11-security-release/services/core/java/com/android/server/NetworkScoreService.java:749:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/rollback/RollbackManagerServiceImpl.java:869:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/rollback/RollbackManagerServiceImpl.java:921:            throw new SecurityException("notifyStagedSession may only be called by the system.");
android11-security-release/services/core/java/com/android/server/rollback/RollbackManagerServiceImpl.java:979:            throw new SecurityException("notifyStagedApkSession may only be called by the system.");
android11-security-release/services/core/java/com/android/server/rollback/RollbackManagerServiceImpl.java:1244:            throw new SecurityException(message + " requires "
android11-security-release/services/core/java/com/android/server/NetworkManagementService.java:1868:            throw new SecurityException("Only available to AID_SYSTEM");
android11-security-release/services/core/java/com/android/server/incident/PendingReports.java:460:        } catch (SecurityException ex) {
android11-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:355:         * Throw a SecurityException if the incoming binder call is not from pkg.
android11-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:357:        private void enforceCallerIsSameApp(String pkg) throws SecurityException {
android11-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:364:                    throw new SecurityException("Unknown package " + pkg);
android11-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:367:                    throw new SecurityException("Calling uid " + uid + " gave package "
android11-security-release/services/core/java/com/android/server/incident/IncidentCompanionService.java:371:                throw new SecurityException("Unknown package " + pkg + "\n" + re);
android11-security-release/services/core/java/com/android/server/locksettings/ManagedProfilePasswordCache.java:32:import java.security.GeneralSecurityException;
android11-security-release/services/core/java/com/android/server/locksettings/ManagedProfilePasswordCache.java:109:            } catch (GeneralSecurityException e) {
android11-security-release/services/core/java/com/android/server/locksettings/ManagedProfilePasswordCache.java:123:            } catch (GeneralSecurityException e) {
android11-security-release/services/core/java/com/android/server/locksettings/ManagedProfilePasswordCache.java:158:            } catch (GeneralSecurityException e) {
android11-security-release/services/core/java/com/android/server/locksettings/recoverablekeystore/KeySyncTask.java:41:import java.security.GeneralSecurityException;
android11-security-release/services/core/java/com/android/server/locksettings/recoverablekeystore/KeySyncTask.java:279:        } catch (GeneralSecurityException e) {
android11-security-release/services/core/java/com/android/server/locksettings/recoverablekeystore/PlatformKeyManager.java:98:     * @throws SecurityException if the caller does not have permission to write to /data/system.
android11-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:141:import java.security.GeneralSecurityException;
android11-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:1031:            throw new SecurityException("Cannot change credential in SUW while factory reset"
android11-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:1058:                throw new SecurityException("uid=" + callingUid
android11-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:1068:                throw new SecurityException("uid=" + callingUid
android11-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:1396:                    } catch (GeneralSecurityException | IOException e) {
android11-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:2363:            throw new SecurityException("Caller must be shell");
android11-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:3050:                    throw new SecurityException("Escrow token is disabled on the current user");
android11-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:3109:                throw new SecurityException("Escrow token is disabled on the current user");
android11-security-release/services/core/java/com/android/server/locksettings/LockSettingsService.java:3158:                throw new SecurityException("Escrow token is disabled on the current user");
android11-security-release/services/core/java/com/android/server/power/ShutdownThread.java:379:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/power/ShutdownThread.java:392:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/power/PowerManagerService.java:4860:                // request instead of throwing a SecurityException so we don't break old apps.
android11-security-release/services/core/java/com/android/server/MasterClearReceiver.java:85:                } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/ConsumerIrService.java:74:            throw new SecurityException("Requires TRANSMIT_IR permission");
android11-security-release/services/core/java/com/android/server/ConsumerIrService.java:106:            throw new SecurityException("Requires TRANSMIT_IR permission");
android11-security-release/services/core/java/com/android/server/security/VerityUtils.java:71:            throw new SecurityException("Signature file is unexpectedly large: " + signaturePath);
android11-security-release/services/core/java/com/android/server/security/VerityUtils.java:129:        } catch (IOException | SecurityException | DigestException | NoSuchAlgorithmException |
android11-security-release/services/core/java/com/android/server/security/VerityUtils.java:178:            throw new SecurityException("verity hash mismatch: "
android11-security-release/services/core/java/com/android/server/security/VerityUtils.java:188:            throw new SecurityException("Failed to set up shared memory correctly");
android11-security-release/services/core/java/com/android/server/security/VerityUtils.java:267:                    throw new SecurityException("Failed to set protection");
android11-security-release/services/core/java/com/android/server/security/VerityUtils.java:272:                throw new SecurityException("Failed to set protection", e);
android11-security-release/services/core/java/com/android/server/security/KeyAttestationApplicationIdProviderService.java:52:            throw new SecurityException("This service can only be used by Keystore or Credstore");
android11-security-release/services/core/java/com/android/server/security/FileIntegrityService.java:95:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/security/FileIntegrityService.java:108:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/adb/AdbService.java:264:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/adb/AdbService.java:418:                } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/adb/AdbDebuggingManager.java:1525:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:542:            throw new SecurityException("Illegal access to the session with token " + sessionToken
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:968:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:988:                throw new SecurityException("The caller: " + getCallingPackageName()
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:1165:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:1262:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:1792:                throw new SecurityException("Requires DVB_DEVICE permission");
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:1847:                throw new SecurityException("Requires DVB_DEVICE permission");
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:2000:                throw new SecurityException("Requires CAPTURE_TV_INPUT permission");
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:2093:                throw new SecurityException("Requires TUNER_RESOURCE_ACCESS permission");
android11-security-release/services/core/java/com/android/server/tv/TvInputManagerService.java:2472:                throw new SecurityException("The caller does not have hardware permission");
android11-security-release/services/core/java/com/android/server/tv/TvRemoteProviderProxy.java:120:            } catch (SecurityException ex) {
android11-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2670:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2711:                        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2727:                        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2837:            throw new SecurityException("Access denied to process: " + Binder.getCallingPid()
android11-security-release/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java:2878:            throw new SecurityException("Only the system may call isWallpaperBackupEligible");
android11-security-release/services/core/java/com/android/server/trust/TrustAgentWrapper.java:306:                throw  new SecurityException("Escrow token API is not allowed.");
android11-security-release/services/core/java/com/android/server/trust/TrustAgentWrapper.java:320:                throw new SecurityException("Escrow token API is not allowed.");
android11-security-release/services/core/java/com/android/server/trust/TrustAgentWrapper.java:334:                throw new SecurityException("Escrow token API is not allowed.");
android11-security-release/services/core/java/com/android/server/trust/TrustAgentWrapper.java:348:                throw new SecurityException("Escrow token API is not allowed.");
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:181:import java.security.GeneralSecurityException;
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:1789:            throw new SecurityException("Only admin users can adopt sd cards");
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:2215:            throw new SecurityException("Mounting " + volId + " restricted by policy");
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:3012:            throw new SecurityException("no permission to access the crypt keeper");
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:3139:            throw new SecurityException("no permission to start filesystem checkpoint");
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:3152:            throw new SecurityException("no permission to commit checkpoint changes");
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:3174:            throw new SecurityException("no permission to commit checkpoint changes");
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:3560:                throw new SecurityException("Invalid mkdirs path: " + appFile
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:3567:                throw new SecurityException("Invalid mkdirs path: " + appFile
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:3578:        throw new SecurityException("Invalid mkdirs path: " + appFile
android11-security-release/services/core/java/com/android/server/StorageManagerService.java:4134:                } catch (GeneralSecurityException e) {
android11-security-release/services/core/java/com/android/server/VibratorService.java:532:            throw new SecurityException("Requires ACCESS_VIBRATOR_STATE permission");
android11-security-release/services/core/java/com/android/server/VibratorService.java:565:            throw new SecurityException("Requires ACCESS_VIBRATOR_STATE permission");
android11-security-release/services/core/java/com/android/server/VibratorService.java:586:            throw new SecurityException("Requires ACCESS_VIBRATOR_STATE permission");
android11-security-release/services/core/java/com/android/server/VibratorService.java:647:            throw new SecurityException("Requires VIBRATE_ALWAYS_ON permission");
android11-security-release/services/core/java/com/android/server/VibratorService.java:745:                throw new SecurityException("Requires VIBRATE permission");
android11-security-release/services/core/java/com/android/server/VibratorService.java:1106:                // want to throw a SecurityException here.
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerInternal.java:46:     * @throws SecurityException if the caller doesn't have permission to the
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:239:                throw new SecurityException("nice try");
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:265:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:363:                throw new SecurityException("No persistable permission grants found for UID "
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:422:                throw new SecurityException("No permission grants found for UID " + uid
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:1049:            throw new SecurityException("Isolated process not allowed to call " + caller);
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:1215:                    throw new SecurityException("Provider " + pi.packageName
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:1221:                throw new SecurityException("Provider " + pi.packageName
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:1237:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/uri/UriGrantsManagerService.java:1242:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/signedconfig/GlobalSettingsConfigApplicator.java:29:import java.security.GeneralSecurityException;
android11-security-release/services/core/java/com/android/server/signedconfig/GlobalSettingsConfigApplicator.java:84:        } catch (GeneralSecurityException e) {
android11-security-release/services/core/java/com/android/server/MmsServiceBroker.java:246:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/vr/VrManagerService.java:687:     * Throws SecurityException if none of the specified permissions are held.
android11-security-release/services/core/java/com/android/server/vr/VrManagerService.java:698:        throw new SecurityException("Caller does not hold at least one of the permissions: "
android11-security-release/services/core/java/com/android/server/location/ContextHubServiceUtil.java:205:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/location/CallerIdentity.java:98:            throw new SecurityException("invalid package \"" + packageName + "\" for uid " + uid);
android11-security-release/services/core/java/com/android/server/location/CallerIdentity.java:147:        throw new SecurityException("uid " + uid + " does not have " + ACCESS_COARSE_LOCATION
android11-security-release/services/core/java/com/android/server/recoverysystem/RecoverySystemService.java:568:            throw new SecurityException("Caller must be shell");
android11-security-release/services/core/java/com/android/server/policy/PhoneWindowManager.java:2149:        // check if user has enabled this operation. SecurityException will be thrown if this app
android11-security-release/services/core/java/com/android/server/utils/ManagedApplicationService.java:402:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:116:import java.security.GeneralSecurityException;
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:471:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:500:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:555:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:604:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:769:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1077:            if (!(e instanceof SecurityException)) {
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1494:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1575:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1604:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1656:            throw new SecurityException("Calling copyAccountToUser requires "
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:1726:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2008:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2153:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2172:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2237:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2525:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2558:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2584:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2650:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2678:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2762:            throw new SecurityException("can only call from system");
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:2870:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3244:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3490:                } catch (GeneralSecurityException e) {
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3530:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3581:        } catch (GeneralSecurityException e) {
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3687:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3925:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:3952:            throw new SecurityException("Can be called only by system UID");
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:4027:            throw new SecurityException("Can be called only by system UID");
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:4094:            throw new SecurityException("Only system can check for accounts across users");
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:4322:            throw new SecurityException("User " + UserHandle.getCallingUserId()
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:4466:            throw new SecurityException("getAccountsForPackage() called from unauthorized uid "
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:5614:            throw new SecurityException("You need MANAGE_USERS permission to: " + message);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:5623:            throw new SecurityException("You need MANAGE_USERS or CREATE_USERS permission to: "
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:5700:            throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/accounts/AccountManagerService.java:5748:            throw new SecurityException();
android11-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:11:import java.security.GeneralSecurityException;
android11-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:57:    /* default */ Bundle encryptBundle(@NonNull Bundle bundle) throws GeneralSecurityException {
android11-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:79:    /* default */ Bundle decryptBundle(@NonNull Bundle bundle) throws GeneralSecurityException {
android11-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:104:            throws GeneralSecurityException {
android11-security-release/services/core/java/com/android/server/accounts/CryptoHelper.java:116:    private byte[] createMac(@NonNull byte[] cipher, @NonNull byte[] iv) throws GeneralSecurityException {
android11-security-release/services/core/java/com/android/server/broadcastradio/BroadcastRadioService.java:71:                throw new SecurityException("ACCESS_BROADCAST_RADIO permission not granted");
android11-security-release/services/core/java/com/android/server/dreams/DreamManagerService.java:471:            throw new SecurityException("Access denied to process: " + Binder.getCallingPid()
android11-security-release/services/core/java/com/android/server/dreams/DreamController.java:149:            } catch (SecurityException ex) {
android11-security-release/services/core/java/com/android/server/oemlock/VendorLock.java:99:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/oemlock/OemLockService.java:168:                    throw new SecurityException("Admin does not allow OEM unlock");
android11-security-release/services/core/java/com/android/server/oemlock/OemLockService.java:172:                    throw new SecurityException("Carrier does not allow OEM unlock");
android11-security-release/services/core/java/com/android/server/oemlock/OemLockService.java:264:            throw new SecurityException("Can't access OEM unlock state. Requires "
android11-security-release/services/core/java/com/android/server/oemlock/OemLockService.java:274:                throw new SecurityException("Must be an admin user");
android11-security-release/services/core/java/com/android/server/timezone/PermissionHelper.java:26:    void enforceCallerHasPermission(String requiredPermission) throws SecurityException;
android11-security-release/services/core/java/com/android/server/compat/CompatConfig.java:164:            throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/CompatConfig.java:244:            throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/CompatConfig.java:276:            throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/CompatConfig.java:298:    void removePackageOverrides(String packageName) throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:167:            throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:175:            throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:182:            throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:192:            throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:201:    public void clearOverrides(String packageName) throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:209:            throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:216:            throws RemoteException, SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:335:    private void checkCompatChangeLogPermission() throws SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:338:            throw new SecurityException("Cannot log compat change usage");
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:342:    private void checkCompatChangeReadPermission() throws SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:345:            throw new SecurityException("Cannot read compat change");
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:349:    private void checkCompatChangeOverridePermission() throws SecurityException {
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:352:            throw new SecurityException("Cannot override compat change");
android11-security-release/services/core/java/com/android/server/compat/PlatformCompat.java:356:    private void checkCompatChangeReadAndLogPermission() throws SecurityException {
android11-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:73:            throws SecurityException {
android11-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:83:    public CpuUsageInfo[] getCpuUsages(String callingPackage) throws SecurityException {
android11-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:93:    public float[] getFanSpeeds(String callingPackage) throws SecurityException {
android11-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:152:     * Throws SecurityException if the calling package is not allowed to retrieve information
android11-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:157:     * @throws SecurityException if something other than the device owner, the current VR service,
android11-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:162:            throws SecurityException {
android11-security-release/services/core/java/com/android/server/HardwarePropertiesManagerService.java:171:            throw new SecurityException("The caller is neither a device owner"
android11-security-release/services/core/java/com/android/server/SensorPrivacyService.java:130:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/DynamicSystemService.java:65:            throw new SecurityException("Requires MANAGE_DYNAMIC_SYSTEM permission");
android11-security-release/services/core/java/com/android/server/soundtrigger_middleware/SoundTriggerMiddlewareValidation.java:99: * would throw {@link SecurityException}, {@link IllegalArgumentException}/
android11-security-release/services/core/java/com/android/server/soundtrigger_middleware/SoundTriggerMiddlewareValidation.java:248:     * Throws a {@link SecurityException} if caller permanently doesn't have the given permission,
android11-security-release/services/core/java/com/android/server/soundtrigger_middleware/SoundTriggerMiddlewareValidation.java:258:     * Throws a {@link SecurityException} if caller permanently doesn't have the given permission,
android11-security-release/services/core/java/com/android/server/soundtrigger_middleware/SoundTriggerMiddlewareValidation.java:271:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:1816:        // TODO: start throwing a SecurityException when GnssLocationProvider stops calling
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:2080:            throw new SecurityException("Requires one of the following permissions: "
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:2195:        } catch (SecurityException e) { /* fallback to ConnectivityInternalPermission */ }
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:3890:            throw new SecurityException("avoidBadWifi requires NETWORK_STACK permission");
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:4626:            throw new SecurityException(packageName + " does not belong to uid " + callingUid);
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:5458:            throw new SecurityException("Insufficient permissions to request a specific SSID");
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:5463:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:5539:                throw new SecurityException("Insufficient permissions to specify legacy type");
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:5695:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:7752:        throw new SecurityException("App must either be an active VPN or have the NETWORK_STACK "
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:7767:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:8164:        // LocationPermissionChecker#checkLocationPermission can throw SecurityException if the uid
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:8172:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:8246:            throw new SecurityException("Data Stall simluation is only possible for test networks");
android11-security-release/services/core/java/com/android/server/ConnectivityService.java:8251:            throw new SecurityException("Data Stall simulation is only possible for network "
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:743:            throw new SecurityException(cookie + " not allowed after sealing");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:751:            throw new SecurityException(cookie + " not allowed after commit");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:761:            throw new SecurityException(cookie + " not allowed after destruction");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:908:                throw new SecurityException(operation + " only supported from shell or system");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1076:     * {@link SecurityException}.
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1082:            throw new SecurityException("Session does not belong to uid " + callingUid);
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1088:     * {@link SecurityException}.
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1095:            throw new SecurityException("Session does not belong to uid " + callingUid);
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1100:     * If anybody is reading or writing data of the session, throw an {@link SecurityException}.
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1107:                throw new SecurityException("Files still open");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1112:                throw new SecurityException("Files still open");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1227:                throw new SecurityException("File name is not in the list of added files.");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1369:                throw new SecurityException("Can't install packages while in secure FRP");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1648:            throw new SecurityException("Destination package " + packageName + " does not have "
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1655:            throw new SecurityException("Can only transfer sessions that use public options");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:1671:                throw new SecurityException("Can only transfer sessions that update the original "
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerSession.java:2540:            throw new SecurityException("Must be sealed to accept permissions");
android11-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:315:         * @throws SecurityException if the calling user and {@code targetUser} are not in the same
android11-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:358:                throw new SecurityException("Calling package name mismatch");
android11-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:662:                throw new SecurityException("Caller is not the recents app");
android11-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:678:                throw new SecurityException("Caller can't access shortcut information");
android11-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:686:                throw new SecurityException("Caller can't access shortcut information");
android11-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:904:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:906:                    Slog.d(TAG, "SecurityException while launching intent", e);
android11-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:1010:                            throw new SecurityException("Cannot launch non-exported components "
android11-security-release/services/core/java/com/android/server/pm/LauncherAppsService.java:1023:                    throw new SecurityException("Attempt to launch activity without "
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:543:            throw new SecurityException("User restriction prevents installing");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:549:            throw new SecurityException("You need the "
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:641:                throw new SecurityException("Installer not allowed to commit staged install");
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:650:                throw new SecurityException("You need the "
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:782:                throw new SecurityException("Caller has no access to session " + sessionId);
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:808:                throw new SecurityException("Caller has no access to session " + sessionId);
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:820:                throw new SecurityException("Caller has no access to session " + sessionId);
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:839:                throw new SecurityException("Caller has no access to session " + sessionId);
android11-security-release/services/core/java/com/android/server/pm/PackageInstallerService.java:1080:            throw new SecurityException("Caller not allowed to bypass staged installer check");
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1003:            throw new SecurityException("SystemUI is not allowed to set "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1063:            throw new SecurityException("MANAGE_USERS permission is required to start intent "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1067:            throw new SecurityException("MANAGE_USERS permission is required to disable quiet "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1071:            throw new SecurityException("MANAGE_USERS permission is required to modify quiet mode "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1089:        throw new SecurityException("Can't modify quiet mode, caller is neither foreground "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1466:            throw new SecurityException("You need MANAGE_USERS or GET_ACCOUNTS_PRIVILEGED "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1508:            throw new SecurityException("You need INTERACT_ACROSS_USERS or MANAGE_USERS permission "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1517:            throw new SecurityException("You need MANAGE_USERS permission to query if u=" + userId
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1675:            throw new SecurityException("You need MANAGE_USERS or GET_ACCOUNTS_PRIVILEGED "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1961:            throw new SecurityException("Non-system caller");
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:1970:            throw new SecurityException("Non-system caller");
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2331:     * @param message used as message if SecurityException is thrown
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2332:     * @throws SecurityException if the caller does not have enough privilege.
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2348:        throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2363:     * @param message used as message if SecurityException is thrown
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2364:     * @throws SecurityException if the caller is not system or root
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2369:            throw new SecurityException("You need MANAGE_USERS permission to: " + message);
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2379:     * @param message used as message if SecurityException is thrown
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2380:     * @throws SecurityException if the caller is not system or root
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2385:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2399:                throw new SecurityException("You either need MANAGE_USERS or CREATE_USERS "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2403:            throw new SecurityException("You need MANAGE_USERS permission to create an user "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2444:     * @param message used as message if SecurityException is thrown
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2445:     * @throws SecurityException if the caller is not system or root
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:2450:            throw new SecurityException("Only system may: " + message);
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4283:            throw new SecurityException("You need MANAGE_USERS or GET_ACCOUNTS_PRIVILEGED "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:4319:            throw new SecurityException("userId can only be the calling user or a managed "
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:5103:                boolean throwSecurityException) {
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:5110:                    if (throwSecurityException) {
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:5111:                        throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:5121:                    if (throwSecurityException) {
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:5130:                    if (throwSecurityException) {
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:5131:                        throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:5342:     * {@link SecurityException} if not.
android11-security-release/services/core/java/com/android/server/pm/UserManagerService.java:5347:            throw new SecurityException("Specified package " + callingPackage
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:130:            throw new SecurityException(callingPackage + " cannot access unrelated user " + userId);
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:135:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:163:                    throw new SecurityException("Attempt to launch activity without required "
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:205:            throw new SecurityException(callingPackage + " cannot access unrelated user " + userId);
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:212:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:219:                throw new SecurityException("Attempt to launch activity without required "
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:356:            throw new SecurityException("Activity cannot handle intent");
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:383:            throw new SecurityException("Attempt to launch activity without "
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:399:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/CrossProfileAppsServiceImpl.java:406:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/Settings.java:4408:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionSettings.java:239:     * @throws SecurityException If the calling UID is not allowed to add permissions to the
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:601:            throw new SecurityException("Instant apps can't add permissions");
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:604:            throw new SecurityException("Label must be specified in permission");
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:618:                throw new SecurityException("Not allowed to modify non-dynamic permission "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:636:            throw new SecurityException("Instant applications don't have access to this method");
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:645:                // TODO: switch this back to SecurityException
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:759:            throw new SecurityException("updatePermissionFlags requires "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1037:            throw new SecurityException(response);
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1090:            throw new SecurityException("Instant applications don't have access to this method");
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1130:            throw new SecurityException("Querying system whitelist requires "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1137:                throw new SecurityException("Querying upgrade or installer whitelist"
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1219:                throw new SecurityException("Cannot modify whitelisting of an immutably "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1281:            throw new SecurityException("Modifying system whitelist requires "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1287:                throw new SecurityException("Modifying upgrade whitelist requires"
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1304:                        throw new SecurityException("Adding to upgrade whitelist requires"
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1312:                    throw new SecurityException("Modifying installer whitelist requires"
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1374:            throw new SecurityException("Caller must either hold "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1512:            throw new SecurityException("Cannot grant non-ephemeral permission"
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1636:            throw new SecurityException("Non-System UID cannot revoke system fixed permission "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:1640:            throw new SecurityException("Cannot revoke policy fixed permission "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:2315:                } catch (IllegalStateException | SecurityException e) {
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:4506:            throw new SecurityException(message + " requires "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:4519:            throw new SecurityException(message + " requires "
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:4551:        throw new SecurityException(errorMessage);
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:4596:        throw new SecurityException(errorMessage);
android11-security-release/services/core/java/com/android/server/pm/permission/PermissionManagerService.java:4687:                throw new SecurityException("Permission tree size cap exceeded");
android11-security-release/services/core/java/com/android/server/pm/permission/BasePermission.java:435:                throw new SecurityException("Calling uid " + callingUid
android11-security-release/services/core/java/com/android/server/pm/permission/BasePermission.java:440:        throw new SecurityException("No permission tree found for " + permName);
android11-security-release/services/core/java/com/android/server/pm/permission/BasePermission.java:448:            throw new SecurityException("Package " + pkg.getPackageName()
android11-security-release/services/core/java/com/android/server/pm/permission/BasePermission.java:452:            throw new SecurityException("Permission " + name + " requested by "
android11-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1558:            throw new SecurityException("Caller must be system or shell");
android11-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1564:            throw new SecurityException("Caller must be shell");
android11-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1570:            throw new SecurityException("Caller must be system");
android11-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1611:            throw new SecurityException("Invalid user-ID");
android11-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1614:            throw new SecurityException("Calling package name mismatch");
android11-security-release/services/core/java/com/android/server/pm/ShortcutService.java:1626:            throw new SecurityException("Shortcut package name mismatch");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:649:     * If the caller targets R, this will throw a SecurityException. Otherwise the request will
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4305:            if (!(e instanceof SecurityException) && !(e instanceof IllegalArgumentException)) {
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4440:            throw new SecurityException("Instant applications don't have access to this method");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4443:            throw new SecurityException("User doesn't exist");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4451:                throw new SecurityException("Package " + packageName + " was not found!");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4455:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4460:                throw new SecurityException("Package " + packageName + " not a system app!");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4464:                throw new SecurityException("Package " + packageName + " is currently frozen!");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:4468:                throw new SecurityException("Package " + packageName + " is not encryption aware!");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:6478:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9574:     * @param message used as message if SecurityException is thrown
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9575:     * @throws SecurityException if the caller is not system or root
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9580:            throw new SecurityException(message);
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9588:     * @param message used as message if SecurityException is thrown
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9589:     * @throws SecurityException if the caller is not system or shell
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:9594:            throw new SecurityException(message);
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:10278:            throw new SecurityException("dumpProfiles");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13212:            throw new SecurityException("Neither user " + callingUid + " nor current process has "
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13358:            throw new SecurityException("Calling uid " + callingUid + " cannot call for user "
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13438:            throw new SecurityException("Calling package " + callingPackage + " in user "
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13520:            throw new SecurityException("Calling package " + packageName
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:13710:            throw new SecurityException("Calling uid " + callingUid
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14113:                } catch (SecurityException ignore) { }
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14292:                    throw new SecurityException("Bad object " + obj + " for uid " + callingUid);
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14295:                throw new SecurityException("Unknown calling UID: " + callingUid);
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14304:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14321:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14337:                        throw new SecurityException("Neither user " + callingUid
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:14361:            throw new SecurityException("Instant applications don't have access to this method");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:18433:            throw new SecurityException(android.Manifest.permission.MANAGE_USERS
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:19412:            throw new SecurityException("Cannot clear data for a protected package: "
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20051:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20076:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20161:            throw new SecurityException("Only the system may call getPreferredActivityBackup()");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20191:            throw new SecurityException("Only the system may call restorePreferredActivities()");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20219:            throw new SecurityException("Only the system may call getDefaultAppsBackup()");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20249:            throw new SecurityException("Only the system may call restoreDefaultApps()");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20277:            throw new SecurityException("Only the system may call getIntentFilterVerificationBackup()");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20307:            throw new SecurityException("Only the system may call restorePreferredActivities()");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20395:            throw new SecurityException("Calling uid " + callingUid
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20736:            throw new SecurityException("Non-system caller");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20883:            throw new SecurityException("The calling UID (" + callingUid + ")"
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20889:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20896:            throw new SecurityException("The calling UID (" + callingUid + ")"
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20905:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20979:                    // throw SecurityException to prevent leaking package information
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20980:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:20996:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:21006:                throw new SecurityException("Cannot disable a protected package: " + packageName);
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:21013:            throw new SecurityException("Cannot disable a system-generated component");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:21033:                    throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:23706:                throw new SecurityException("May not access signing KeySet of other apps.");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:24993:                throw new SecurityException("Not allowed to uninstall apexes");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25237:            throw new SecurityException(message + " requires "
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25385:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25403:                throw new SecurityException("Need to declare " + appOpPermission
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25537:            throw new SecurityException("Caller must have the "
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25558:            throw new SecurityException("Caller must have the "
android11-security-release/services/core/java/com/android/server/pm/PackageManagerService.java:25577:            throw new SecurityException("Caller must have the "
android11-security-release/services/core/java/com/android/server/pm/ShortcutRequestPinProcessor.java:112:                throw new SecurityException("Calling uid mismatch");
android11-security-release/services/core/java/com/android/server/pm/PackageManagerServiceUtils.java:404:                throw new SecurityException("Shell does not have permission to access user "
android11-security-release/services/core/java/com/android/server/pm/PackageManagerServiceUtils.java:415:     * If not, throws a {@link SecurityException}.
android11-security-release/services/core/java/com/android/server/pm/PackageManagerServiceUtils.java:419:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:664:                throw new SecurityException("The calling process has already "
android11-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:2139:                throw new SecurityException("packageName must match the calling uid");
android11-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:2170:                        throw new SecurityException("Invalid media projection");
android11-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:2174:                    throw new SecurityException("unable to validate media projection or flags");
android11-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:2181:                    throw new SecurityException("Requires CAPTURE_VIDEO_OUTPUT or "
android11-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:2189:                    throw new SecurityException("Requires CAPTURE_SECURE_VIDEO_OUTPUT "
android11-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:2199:                    throw new SecurityException("Requires ADD_TRUSTED_DISPLAY permission to "
android11-security-release/services/core/java/com/android/server/display/DisplayManagerService.java:2219:                    throw new SecurityException("Requires INTERNAL_SYSTEM_WINDOW permission");
android11-security-release/services/core/java/com/android/server/display/color/ColorDisplayService.java:1508:                throw new SecurityException("Permission required to set display saturation level");
android11-security-release/services/core/java/com/android/server/webkit/WebViewUpdateService.java:232:                throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/webkit/WebViewUpdateService.java:285:                throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/audio/AudioService.java:2455:            throw new SecurityException("Missing MODIFY_AUDIO_ROUTING permission");
android11-security-release/services/core/java/com/android/server/audio/AudioService.java:2717:            throw new SecurityException("Not allowed to change Do Not Disturb state");
android11-security-release/services/core/java/com/android/server/audio/AudioService.java:3392:            throw new SecurityException("Not allowed to change Do Not Disturb state");
android11-security-release/services/core/java/com/android/server/audio/AudioService.java:4485:            throw new SecurityException("Not allowed to change Do Not Disturb state");
android11-security-release/services/core/java/com/android/server/audio/AudioService.java:6826:                throw new SecurityException("Missing MODIFY_AUDIO_ROUTING permission");
android11-security-release/services/core/java/com/android/server/audio/AudioService.java:8902:            throw new SecurityException("Not allowed to monitor audioserver state");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:532:            throw new SecurityException("Requires MONITOR_INPUT permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:669:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:718:            throw new SecurityException("Requires DISABLE_INPUT_DEVICE permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:728:            throw new SecurityException("Requires DISABLE_INPUT_DEVICE permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:768:                throw new SecurityException("The calling process has already "
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:972:            throw new SecurityException("Requires SET_INPUT_CALIBRATION permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:1000:            throw new SecurityException("Requires TABLET_MODE permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:1014:            throw new SecurityException("Requires TABLET_MODE_LISTENER permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:1389:            throw new SecurityException("Requires SET_KEYBOARD_LAYOUT permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:1428:            throw new SecurityException("Requires SET_KEYBOARD_LAYOUT permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:1457:            throw new SecurityException("Requires SET_KEYBOARD_LAYOUT permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:1599:            throw new SecurityException("Requires SET_POINTER_SPEED permission");
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:1797:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/input/InputManagerService.java:1818:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:871:         * @param message message for any SecurityException
android11-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:881:         * @param message used as message if SecurityException is thrown
android11-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:882:         * @throws SecurityException if the permission check fails
android11-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:889:                throws SecurityException {
android11-security-release/services/core/java/com/android/server/om/OverlayManagerService.java:1181:        public void enforcePermission(String permission, String message) throws SecurityException {
android11-security-release/services/core/java/com/android/server/om/OverlayActorEnforcer.java:87:            int callingUid, int userId) throws SecurityException {
android11-security-release/services/core/java/com/android/server/om/OverlayActorEnforcer.java:94:        throw new SecurityException("UID" + callingUid + " is not allowed to call "
android11-security-release/services/core/java/com/android/server/om/OverlayActorEnforcer.java:138:                    } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/om/OverlayActorEnforcer.java:168:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/om/OverlayableInfoCallback.java:73:     * @throws SecurityException containing message if the caller doesn't have the given
android11-security-release/services/core/java/com/android/server/om/OverlayableInfoCallback.java:76:    void enforcePermission(String permission, String message) throws SecurityException;
android11-security-release/services/core/java/com/android/server/TestNetworkService.java:363:            throw new SecurityException("Attempted to modify other user's test networks");
android11-security-release/services/core/java/com/android/server/infra/AbstractPerUserSystemService.java:95:     * @throws SecurityException if the service does not have the proper permissions to be bound to.
android11-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:320:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android11-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:348:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android11-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:366:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android11-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:398:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android11-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:432:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android11-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:456:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android11-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:475:     * @throws SecurityException if caller is not allowed to manage this service's settings.
android11-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:735:     * @throws SecurityException when it's not...
android11-security-release/services/core/java/com/android/server/infra/AbstractMasterSystemService.java:746:        throw new SecurityException("UID " + uid + " does not own " + packageName);
android11-security-release/services/core/java/com/android/server/stats/pull/StatsPullAtomService.java:2630:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/stats/pull/StatsPullAtomService.java:3724:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodUtils.java:733:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:1827:            if (!(e instanceof SecurityException)) {
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:2091:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:2239:                    throw new SecurityException("uid=" + callerUid + "/pid=" + callerPid
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:2251:            // a fake display ID. Unconditionally returning SecurityException just because the
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:3651:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:3918:            throw new SecurityException("The caller doesn't own the display.");
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:3934:                    throw new SecurityException("Only the owner client can clear"
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:3948:                    throw new SecurityException(cs + " cannot access to display #"
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:4066:                throw new SecurityException(
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:5180:            // content URI and/or contentUriOwnerUserId just results in a SecurityException thrown
android11-security-release/services/core/java/com/android/server/inputmethod/InputMethodManagerService.java:5330:            throw new SecurityException(errorMsg);
android11-security-release/services/core/java/com/android/server/os/BugreportManagerServiceImpl.java:86:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/biometrics/BiometricServiceBase.java:206:     * Checks if the caller has permission to use the biometric service - throws a SecurityException
android11-security-release/services/core/java/com/android/server/biometrics/BiometricService.java:706:                throw new SecurityException("Invalid authenticator configuration");
android11-security-release/services/core/java/com/android/server/biometrics/BiometricService.java:757:                throw new SecurityException("Invalid authenticator configuration");
android11-security-release/services/core/java/com/android/server/biometrics/AuthService.java:287:            // unexpected SecurityException this method does not check whether its caller is
android11-security-release/services/core/java/com/android/server/appop/AppOpsService.java:2438:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/appop/AppOpsService.java:2866:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/appop/AppOpsService.java:2951:        } catch (SecurityException ignored) {
android11-security-release/services/core/java/com/android/server/appop/AppOpsService.java:3031:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/appop/AppOpsService.java:3399:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/appop/AppOpsService.java:3479:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/appop/AppOpsService.java:3874:                throw new SecurityException("Specified package " + packageName + " under uid " + uid
android11-security-release/services/core/java/com/android/server/appop/AppOpsService.java:5677:                throw new SecurityException("Need INTERACT_ACROSS_USERS_FULL or"
android11-security-release/services/core/java/com/android/server/appop/AppOpsService.java:6076:            throw new SecurityException(function + " must by called by the system");
android11-security-release/services/core/java/com/android/server/slice/SliceManagerService.java:293:            throw new SecurityException("Caller must be system");
android11-security-release/services/core/java/com/android/server/slice/SliceManagerService.java:318:            throw new SecurityException("Caller must be system");
android11-security-release/services/core/java/com/android/server/slice/SliceManagerService.java:348:            throw new SecurityException("Caller must own " + uri);
android11-security-release/services/core/java/com/android/server/slice/SliceManagerService.java:427:                throw new SecurityException("Access to slice " + uri + " is required");
android11-security-release/services/core/java/com/android/server/connectivity/IpConnectivityMetrics.java:341:                throw new SecurityException(String.format("Uid %d has no permission to listen for"
android11-security-release/services/core/java/com/android/server/connectivity/KeepaliveTracker.java:182:                        throw new SecurityException(
android11-security-release/services/core/java/com/android/server/connectivity/KeepaliveTracker.java:629:        } catch (InvalidSocketException | IllegalArgumentException | SecurityException e) {
android11-security-release/services/core/java/com/android/server/connectivity/KeepaliveTracker.java:672:        } catch (InvalidSocketException | IllegalArgumentException | SecurityException e) {
android11-security-release/services/core/java/com/android/server/connectivity/Vpn.java:127:import java.security.GeneralSecurityException;
android11-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1188:                throw new SecurityException("Cannot find " + config.user);
android11-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1191:                throw new SecurityException(config.user + " does not require " + BIND_VPN_SERVICE);
android11-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1194:            throw new SecurityException("Cannot find " + config.user);
android11-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1893:                throw new SecurityException("Restricted users cannot configure VPNs");
android11-security-release/services/core/java/com/android/server/connectivity/Vpn.java:1928:            throw new SecurityException("Restricted users cannot establish VPNs");
android11-security-release/services/core/java/com/android/server/connectivity/Vpn.java:2863:            throw new SecurityException("Mismatched package and UID");
android11-security-release/services/core/java/com/android/server/connectivity/Vpn.java:3008:            throw new SecurityException("User consent not granted for package " + packageName);
android11-security-release/services/core/java/com/android/server/connectivity/Vpn.java:3063:        } catch (IOException | GeneralSecurityException e) {
android11-security-release/services/core/java/com/android/server/BluetoothManagerService.java:1039:            throw new SecurityException("no permission to enable Bluetooth quietly");
android11-security-release/services/core/java/com/android/server/BluetoothManagerService.java:1130:                throw new SecurityException("Package " + packageName
android11-security-release/services/core/java/com/android/server/BluetoothManagerService.java:1168:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/BluetoothManagerService.java:1170:            throw new SecurityException(e.getMessage());
android11-security-release/services/core/java/com/android/server/content/ContentService.java:355:                throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/content/ContentService.java:430:                        throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/content/ContentService.java:1339:                    throw new SecurityException("No access to " + uri + ": neither user " + uid
android11-security-release/services/core/java/com/android/server/content/ContentService.java:1406:                    throw new SecurityException(msg);
android11-security-release/services/core/java/com/android/server/content/ContentService.java:1736:            throw new SecurityException("Non-shell user attempted to call " + method);
android11-security-release/services/core/java/com/android/server/net/watchlist/NetworkWatchlistService.java:247:            throw new SecurityException(String.format("Uid %d has no permission to change watchlist"
android11-security-release/services/core/java/com/android/server/net/NetworkStatsObservers.java:414:            } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/net/NetworkStatsService.java:761:                    throw new SecurityException("Calling package " + mCallingPackage
android11-security-release/services/core/java/com/android/server/net/NetworkStatsService.java:1925:            throw new SecurityException("Requires one of the following permissions: "
android11-security-release/services/core/java/com/android/server/net/NetworkStatsCollection.java:246:            throw new SecurityException("Network stats history of uid " + uid
android11-security-release/services/core/java/com/android/server/net/NetworkPolicyManagerService.java:2751:            throw new SecurityException("Requires one of the following permissions: "
android11-security-release/services/core/java/com/android/server/net/NetworkPolicyManagerService.java:2802:        } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/net/NetworkPolicyManagerService.java:3376:            throw new SecurityException();
android11-security-release/services/core/java/com/android/server/media/MediaRouterService.java:241:            throw new SecurityException("packageName must match the calling uid");
android11-security-release/services/core/java/com/android/server/media/MediaRouterService.java:456:            throw new SecurityException("packageName must match the calling uid");
android11-security-release/services/core/java/com/android/server/media/MediaRouterService.java:534:            throw new SecurityException("packageName must match the calling uid");
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:375:            throw new SecurityException("Must hold the MODIFY_PHONE_STATE permission.");
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:421:                } catch (SecurityException e) {
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:514:            throw new SecurityException("Missing permission to control media.");
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:525:            throw new SecurityException("Only System UI and Settings may " + action);
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1160:                    throw new SecurityException("Unexpected Session2Token's UID, expected=" + uid
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1443:                    throw new SecurityException("MEDIA_CONTENT_CONTROL permission is required to"
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1471:                    throw new SecurityException("MEDIA_CONTENT_CONTROL permission is required to"
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1499:                    throw new SecurityException("MEDIA_CONTENT_CONTROL permission is required to"
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1527:                    throw new SecurityException("MEDIA_CONTENT_CONTROL permission is required to"
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1556:                    throw new SecurityException("Must hold the SET_VOLUME_KEY_LONG_PRESS_LISTENER"
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:1616:                    throw new SecurityException("Must hold the SET_MEDIA_KEY_LISTENER permission.");
android11-security-release/services/core/java/com/android/server/media/MediaSessionService.java:2079:                        } catch (SecurityException | IllegalArgumentException e) {
android11-security-release/services/core/java/com/android/server/media/MediaRoute2ProviderServiceProxy.java:230:            } catch (SecurityException ex) {
android11-security-release/services/core/java/com/android/server/media/MediaSessionRecord.java:332:                    } catch (IllegalArgumentException | SecurityException e) {
android11-security-release/services/core/java/com/android/server/media/MediaSessionRecord.java:531:                } catch (IllegalArgumentException | SecurityException e) {
android11-security-release/services/core/java/com/android/server/media/RemoteDisplayProviderProxy.java:199:            } catch (SecurityException ex) {
android11-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:280:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to grant "
android11-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:321:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to add "
android11-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:336:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to add "
android11-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:354:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to add "
android11-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:369:                throw new SecurityException("Requires MANAGE_MEDIA_PROJECTION in order to remove "
android11-security-release/services/core/java/com/android/server/media/projection/MediaProjectionManagerService.java:479:                    throw new SecurityException("Media projections require a foreground service"
android11-security-release/services/core/java/com/android/server/clipboard/ClipboardService.java:343:                if (!(e instanceof SecurityException)) {
android11-security-release/services/core/java/com/android/server/clipboard/ClipboardService.java:622:            // This will throw SecurityException if caller can't grant
android11-security-release/services/core/java/com/android/server/clipboard/ClipboardService.java:688:                throw new SecurityException("Calling uid " + uid
android11-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:207:            throw new SecurityException("Can't access OEM unlock state. Requires "
android11-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:220:            throw new SecurityException("uid " + callingUid + " not allowed to access PST");
android11-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:228:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:235:            throw new SecurityException(
android11-security-release/services/core/java/com/android/server/PersistentDataBlockService.java:561:        public void setOemUnlockEnabled(boolean enabled) throws SecurityException {
android11-security-release/services/contentsuggestions/java/com/android/server/contentsuggestions/ContentSuggestionsManagerService.java:118:        throw new SecurityException(msg);
android11-security-release/services/contentsuggestions/java/com/android/server/contentsuggestions/ContentSuggestionsPerUserService.java:80:            throw new SecurityException("Service does not require permission "
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1473:                throw new SecurityException("Calling uid " + callingUid + " cannot query events"
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1726:                    throw new SecurityException(
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1773:                throw new SecurityException(
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1841:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1864:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1883:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1907:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1930:                throw new SecurityException("Caller must be the active supervision app or "
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:1957:                throw new SecurityException("Caller must be the active supervision app or "
android11-security-release/services/usage/java/com/android/server/usage/UsageStatsService.java:2038:                throw new SecurityException("Caller doesn't have OBSERVE_APP_USAGE permission");
android11-security-release/services/usage/java/com/android/server/usage/StorageStatsService.java:169:            throw new SecurityException(errMsg);
android11-security-release/services/midi/java/com/android/server/midi/MidiService.java:664:                throw new SecurityException("Attempt to open private device with wrong UID");
android11-security-release/services/midi/java/com/android/server/midi/MidiService.java:715:            throw new SecurityException("only system can create USB devices");
android11-security-release/services/midi/java/com/android/server/midi/MidiService.java:717:            throw new SecurityException("only MidiBluetoothService can create Bluetooth devices");
android11-security-release/services/midi/java/com/android/server/midi/MidiService.java:765:                throw new SecurityException("setDeviceStatus() caller UID " + Binder.getCallingUid()
android11-security-release/services/usb/java/com/android/server/usb/UsbHostManager.java:495:                throw new SecurityException("USB device is on a restricted bus");
android11-security-release/services/usb/java/com/android/server/usb/UsbUserPermissionManager.java:653:            throw new SecurityException("User has not given " + uid + "/" + packageName
android11-security-release/services/usb/java/com/android/server/usb/UsbUserPermissionManager.java:660:            throw new SecurityException("User has not given " + uid + " permission to accessory "
android11-security-release/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java:377:                throw new SecurityException(pkg + " doesn't belong to uid " + callingUid);
android11-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl.java:349:            throw new SecurityException("Calling uid " + callingUid
android11-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl.java:358:            throw new SecurityException("Calling uid " + callingUid
android11-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl.java:367:            throw new SecurityException("Calling uid " + callingUid
android11-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionSessionConnection.java:314:            // This will throw SecurityException for us.
android11-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionSessionConnection.java:324:        } catch (SecurityException e) {
android11-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerService.java:296:                if (!(e instanceof SecurityException)) {
android11-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerService.java:716:                    throw new SecurityException(
android11-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerService.java:1458:                throw new SecurityException("Caller does not hold the permission " + permission);
android11-security-release/services/voiceinteraction/java/com/android/server/voiceinteraction/VoiceInteractionManagerService.java:1465:                    SecurityException("Caller is not the current voice interaction service");
android11-security-release/services/voiceinteraction/java/com/android/server/soundtrigger/SoundTriggerService.java:255:                if (!(e instanceof SecurityException)) {
android11-security-release/services/voiceinteraction/java/com/android/server/soundtrigger/SoundTriggerService.java:1536:            throw new SecurityException("Caller does not hold the permission " + permission);
android11-security-release/services/voiceinteraction/java/com/android/server/soundtrigger/SoundTriggerService.java:1545:            throw new SecurityException(detectionService.getPackageName() + " does not have"
android11-security-release/services/autofill/java/com/android/server/autofill/AutofillManagerServiceImpl.java:534:            throw new SecurityException("Could not verify UID for " + componentName);
android11-security-release/services/autofill/java/com/android/server/autofill/AutofillManagerServiceImpl.java:554:            throw new SecurityException("Invalid component: " + componentName);
android11-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:1302:                throw new SecurityException("The taget service not in the same package"
android11-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:3005:            throw new SecurityException("Only the system process can call this");
android11-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:3784:                    throw new SecurityException("Service " + componentName
android11-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:3788:                    throw new SecurityException("Service " + componentName
android11-security-release/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java:3842:            } catch (SecurityException se) {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3229:            throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3239:     * @throws SecurityException if caller neither has an active admin nor {@code permission}
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3245:            @Nullable String permission) throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3269:                throw new SecurityException("Admin " + admin.info.getComponent()
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3273:                throw new SecurityException("Admin " + admin.info.getComponent()
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3277:                throw new SecurityException("Admin " + admin.info.getComponent()
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3281:                throw new SecurityException("Admin " + admin.info.getComponent()
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3285:            throw new SecurityException("Admin " + admin.info.getComponent()
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3289:            throw new SecurityException("No active admin owned by uid "
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3295:            throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3305:     * @throws SecurityException if caller neither has an active admin nor {@code permission}
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3312:            @Nullable String permission) throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3333:            throw new SecurityException("No active admin " + who + " for UID " + uid);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3336:            throw new SecurityException("Admin " + who + " is not owned by uid " + uid);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3360:                throw new SecurityException("No active admin " + who);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:3363:                throw new SecurityException("Admin " + who + " is not owned by uid " + uid);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:4547:                throw new SecurityException("No active admin " + adminReceiver);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:4603:                    throw new SecurityException("Attempt to remove non-test admin "
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:4681:            throw new SecurityException("Non-shell user attempted to call " + method);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:5705:            throw new SecurityException("Cannot change current password");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:5736:                throw new SecurityException("Device admin can no longer call resetPassword()");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:5747:            throw new SecurityException("Device admin can no longer call resetPassword()");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6060:                            throw new SecurityException("Only profile owner admins can set "
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6150:            throw new SecurityException(String.format("Provided admin %s is either not a profile "
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6404:            ComponentName who, String callerPackage, int callerUid) throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6422:            throw new SecurityException(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6720:            List<String> scopeList) throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6818:            String delegatePackage) throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6831:                    throw new SecurityException("Caller with uid " + callingUid + " is not "
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6852:            throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6967:     * @throws SecurityException if {@code who} is given and is not an owner for {@code reqPolicy};
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:6996:                throw new SecurityException("Caller with uid " + mInjector.binderGetCallingUid()
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7046:            throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7056:    public String getCertInstallerPackage(ComponentName who) throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7065:     * @throws SecurityException if the caller is not a profile or device owner.
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7071:            throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7118:    public String getAlwaysOnVpnPackage(ComponentName admin) throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7136:    public boolean isAlwaysOnVpnLockdownEnabled(ComponentName admin) throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7155:            throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7175:        } catch (IOException | SecurityException e) {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7218:            throw new SecurityException(String.format("No active admin for user %d",
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7226:            throw new SecurityException("Wiping the entire device can only be done by a profile"
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7232:                throw new SecurityException(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7301:                throw new SecurityException("Cannot wipe data. " + restriction
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7388:                    throw new SecurityException(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7555:            } catch (SecurityException e) {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:7877:            throw new SecurityException(e);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8016:                throw new SecurityException("Managed profile cannot set auto time required");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8182:            throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8189:    private void ensureAllUsersAffiliated() throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8192:                throw new SecurityException("Not all users are affiliated.");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8869:            throw new SecurityException("Invalid packageName");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:8877:                throw new SecurityException(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9096:                throw new SecurityException("Only Device Owner or Profile Owner of"
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9481:                throw new SecurityException(message);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9503:            throw new SecurityException(message);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9686:        throw new SecurityException("Calling user does not have INTERACT_ACROSS_PROFILES or"
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9719:            throw new SecurityException(String.format(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9726:            throw new SecurityException(String.format(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9771:        throw new SecurityException("No active admin found");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:9816:            throw new SecurityException("User " + userId + " is not allowed to use lock task");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10612:            throw new SecurityException("Only the system can " + action);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10651:            throw new SecurityException("createAndManageUser was called from non-system user");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:10889:                throw new SecurityException("Admin " + who +
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11052:                    throw new SecurityException("Device owner cannot set user restriction " + key);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11067:                    throw new SecurityException("Profile owner cannot set user restriction " + key);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11375:                throw new SecurityException("Admin " + who +
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11741:            throw new SecurityException(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11748:            throw new SecurityException("Unable to set secondary lockscreen setting, no "
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11753:            throw new SecurityException(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11760:            throws SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11911:            // SecurityException to avoid breaking apps.
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11919:                throw new SecurityException(String.format(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:11946:                throw new SecurityException(String.format(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12091:                    throw new SecurityException(String.format(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12095:                throw new SecurityException(String.format(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12225:                throw new SecurityException("Admin " + who +
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12230:            throw new SecurityException("Managed profile cannot disable keyguard");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12264:                throw new SecurityException("Admin " + who +
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:12268:                throw new SecurityException("Managed profile cannot disable status bar");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:13184:            } catch (SecurityException e) {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:13882:            throw new SecurityException(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:13888:                throw new SecurityException(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:14222:            throw new SecurityException("Caller has to be in user 0");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:14468:            throw new SecurityException("Not allowed to bind to target user id");
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:14859:     * @throws SecurityException if the intent is resolved to an invalid service.
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:14863:            @UserIdInt int targetUserId) throws RemoteException, SecurityException {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:14875:            throw new SecurityException("Only allow to bind service in " + expectedPackageName);
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:14879:            throw new SecurityException(
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:15031:        } catch (SecurityException se) {
android11-security-release/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java:15880:            throw new SecurityException("Input package name doesn't align with actual "
android11-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:946:            throw new SecurityException("Caller does not hold permission "
android11-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:2516:            throw new SecurityException(
android11-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:2699:            throw new SecurityException(
android11-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:2789:                throw new SecurityException("Only SYSTEM can call sendFingerprintGesture");
android11-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilityManagerService.java:2810:                throw new SecurityException("Only SYSTEM can call getAccessibilityWindowId");
android11-security-release/services/accessibility/java/com/android/server/accessibility/AbstractAccessibilityServiceConnection.java:998:                throw new SecurityException("Services don't have the capability of taking"
android11-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilitySecurityPolicy.java:378:     * @throws SecurityException if caller cannot interact across users
android11-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilitySecurityPolicy.java:404:            throw new SecurityException("Call from user " + callingUserId + " as user "
android11-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilitySecurityPolicy.java:488:            throw new SecurityException("You do not have " + permission
android11-security-release/services/accessibility/java/com/android/server/accessibility/AccessibilitySecurityPolicy.java:571:            throw new SecurityException("Caller does not hold permission "
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationRecordTest.java:778:                anyInt(), anyInt())).thenThrow(new SecurityException());
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationRecordTest.java:791:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationRecordTest.java:801:                anyInt(), anyInt())).thenThrow(new SecurityException());
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationRecordTest.java:819:                anyInt(), anyInt())).thenThrow(new SecurityException());
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/RoleObserverTest.java:162:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:1213:            } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2551:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2579:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2617:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2652:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2675:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2708:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:2728:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:4116:        doThrow(new SecurityException("no access")).when(mUgm)
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:4856:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:4898:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:4927:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:5318:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:5336:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:5833:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/notification/NotificationManagerServiceTest.java:5849:        } catch (SecurityException e) {
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:159:        } catch (SecurityException e) {/* ignore for permission denial */}
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:203:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:212:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:215:        } catch (SecurityException e) { /*we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:216:        given(mContext.registerReceiver(any(), any())).willThrow(SecurityException.class);
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:249:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:252:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:260:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:263:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:271:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:274:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:282:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:285:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:293:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/uiservicestests/src/com/android/server/UiModeManagerServiceTest.java:301:        } catch (SecurityException e) { /* we should ignore this update config exception*/ }
android11-security-release/services/tests/servicestests/src/com/android/server/integrity/AppIntegrityManagerServiceImplTest.java:209:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/integrity/AppIntegrityManagerServiceImplTest.java:228:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/integrity/AppIntegrityManagerServiceImplTest.java:247:        // no SecurityException
android11-security-release/services/tests/servicestests/src/com/android/server/locksettings/LockSettingsServiceTests.java:446:        } catch (SecurityException e) { }
android11-security-release/services/tests/servicestests/src/com/android/server/locksettings/SyntheticPasswordTests.java:376:        } catch (SecurityException expected) { }
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:232:        doThrow(new SecurityException()).when(mContext)
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:238:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:298:            fail("SecurityException expected");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:299:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:361:            fail("SecurityException expected");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:362:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:410:            fail("SecurityException expected");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:411:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:432:            fail("SecurityException expected");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:433:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:449:        doThrow(new SecurityException()).when(mContext)
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:454:            fail("SecurityException expected");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:455:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:470:        doThrow(new SecurityException()).when(mContext).enforceCallingOrSelfPermission(
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:476:            fail("SecurityException expected");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:477:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:484:        doThrow(new SecurityException()).when(mContext).enforceCallingOrSelfPermission(
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:490:            fail("SecurityException expected");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:491:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:562:            fail("SecurityException expected");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:563:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:577:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:578:            fail("Unexpected SecurityException");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:591:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:592:            fail("Unexpected SecurityException");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:843:        doThrow(new SecurityException()).when(mContext)
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:847:            fail("SecurityException expected.");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:848:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:868:        doThrow(new SecurityException()).when(mContext)
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:873:            fail("SecurityException expected.");
android11-security-release/services/tests/servicestests/src/com/android/server/NetworkScoreServiceTest.java:874:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/uri/UriGrantsManagerServiceTest.java:162:        } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/uri/UriGrantsManagerServiceTest.java:199:            } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/uri/UriGrantsManagerServiceTest.java:209:            } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/uri/UriGrantsManagerServiceTest.java:236:            } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/uri/UriGrantsManagerServiceTest.java:246:            } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/uri/UriGrantsManagerServiceTest.java:301:            } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/uri/UriGrantsManagerServiceTest.java:311:            } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:284:        Mockito.doThrow(new SecurityException()).when(
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:309:        Mockito.doThrow(new SecurityException()).when(
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:311:        Mockito.doThrow(new SecurityException()).when(
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:408:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:429:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:456:        assertThrows(SecurityException.class, () -> mGnssManagerService.addGnssBatchingCallback(
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:505:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:530:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:560:        assertThrows(SecurityException.class, () -> mGnssManagerService.stopGnssBatch());
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:579:        assertThrows(SecurityException.class, () -> mGnssManagerService
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:629:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:665:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:741:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/location/gnss/GnssManagerServiceTest.java:817:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:116:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:118:        doThrow(SecurityException.class).when(mContext).enforceCallingOrSelfPermission(
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:151:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:153:        doThrow(SecurityException.class).when(mContext).enforceCallingOrSelfPermission(
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:188:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:190:        doThrow(SecurityException.class).when(mContext).enforceCallingOrSelfPermission(
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:210:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:212:        doThrow(SecurityException.class).when(mContext).enforceCallingOrSelfPermission(
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:256:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:258:        doThrow(SecurityException.class).when(mContext).enforceCallingOrSelfPermission(
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:280:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/recoverysystem/RecoverySystemServiceTest.java:282:        doThrow(SecurityException.class).when(mContext).enforceCallingOrSelfPermission(
android11-security-release/services/tests/servicestests/src/com/android/server/timezonedetector/TimeZoneDetectorServiceTest.java:78:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/timezonedetector/TimeZoneDetectorServiceTest.java:80:        doThrow(new SecurityException("Mock"))
android11-security-release/services/tests/servicestests/src/com/android/server/timezonedetector/TimeZoneDetectorServiceTest.java:110:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/timezonedetector/TimeZoneDetectorServiceTest.java:112:        doThrow(new SecurityException("Mock"))
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:78:import java.security.GeneralSecurityException;
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1374:            fail("SecurityException expected. But no exception was thrown.");
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1375:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1376:            // SecurityException is expected.
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1620:            fail("SecurityException expected. But no exception was thrown.");
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1621:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:1622:            // SecurityException is expected.
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:2363:            fail("SecurityException expected. But no exception was thrown.");
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:2364:        } catch (SecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:2365:            // SecurityException is expected.
android11-security-release/services/tests/servicestests/src/com/android/server/accounts/AccountManagerServiceTest.java:3123:        } catch (GeneralSecurityException e) {
android11-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:101:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:107:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:113:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:119:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:938:        doThrow(new SecurityException("Simulated permission failure"))
android11-security-release/services/tests/servicestests/src/com/android/server/timezone/RulesManagerServiceTest.java:944:        doThrow(new SecurityException("Simulated permission failure"))
android11-security-release/services/tests/servicestests/src/com/android/server/compat/CompatConfigTest.java:210:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/compat/CompatConfigTest.java:222:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/compat/CompatConfigTest.java:248:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:403:    public void testSetActiveAdmin_SecurityException() {
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:407:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:413:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:601:    public void testRemoveActiveAdmin_SecurityException() {
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:613:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:623:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:808:        // Calling from a non-shell uid should fail with a SecurityException
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:810:        assertExpectException(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1101:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1103:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1105:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1107:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1116:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1118:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1120:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1122:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1285:        assertExpectException(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1626:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1633:        // DPMS executes without a SecurityException
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1636:        } catch (SecurityException unexpected) {
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1637:            fail("Threw SecurityException on authorized access");
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1649:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1657:        } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1658:            fail("Threw SecurityException on authorized access");
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1680:        assertExpectException(SecurityException.class, nonDelegateExceptionMessageRegex,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1712:        assertExpectException(SecurityException.class, nonDelegateExceptionMessageRegex,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1729:        assertExpectException(SecurityException.class, nonDelegateExceptionMessageRegex,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1863:    public void testDaDisallowedPolicies_SecurityException() throws Exception {
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1871:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1876:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1882:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:1887:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2167:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2350:        assertExpectException(SecurityException.class, /* messageRegex= */ "No active admin",
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2358:        assertExpectException(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2364:        assertExpectException(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2409:        assertExpectException(SecurityException.class, /* messageRegex= */ NOT_DEVICE_OWNER_MSG,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2414:        assertExpectException(SecurityException.class, /* messageRegex= */ NOT_DEVICE_OWNER_MSG,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2458:            assertExpectException(SecurityException.class, /* messageRegex= */ "message for user",
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2460:            assertExpectException(SecurityException.class, /* messageRegex= */ "message for user",
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2467:            assertExpectException(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2553:        assertExpectException(SecurityException.class,  /* messageRegex= */ NOT_PROFILE_OWNER_MSG,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2555:        assertExpectException(SecurityException.class,  /* messageRegex= */ NOT_PROFILE_OWNER_MSG,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2587:        assertExpectException(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2594:        assertExpectException(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:2770:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3722:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3729:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3737:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3883:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3905:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3946:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:3984:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4039:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4041:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4044:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4046:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4059:        assertExpectException(SecurityException.class, null, () -> dpm.setTime(admin1, 0));
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4086:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4285:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4287:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4290:        assertExpectException(SecurityException.class, /* messageRegex =*/ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4361:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4390:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4403:        assertExpectException(SecurityException.class, "no default supervision component defined",
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4411:        assertExpectException(SecurityException.class, "is not the default supervision component",
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4503:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4547:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:4769:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5183:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5414:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5416:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5418:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5420:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5422:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5424:        assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5678:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5686:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5737:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5742:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5752:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5764:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5768:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5820:        assertExpectException(SecurityException.class, null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5826:            assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5834:    public void testGetPasswordComplexity_securityExceptionNotThrownForParentInstance() {
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5854:    public void testGetPasswordComplexity_securityExceptionWithoutPermissions() {
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:5859:        assertThrows(SecurityException.class, () -> dpm.getPasswordComplexity());
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:6003:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DevicePolicyManagerTest.java:6006:        assertExpectException(SecurityException.class, /* messageRegex= */ null,
android11-security-release/services/tests/servicestests/src/com/android/server/devicepolicy/DpmMockContext.java:256:            throw new SecurityException("Caller doesn't have " + permission + " : " + message);
android11-security-release/services/tests/servicestests/src/com/android/server/accessibility/AccessibilitySecurityPolicyTest.java:465:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/accessibility/AccessibilitySecurityPolicyTest.java:518:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/accessibility/AccessibilityManagerServiceTest.java:148:        doThrow(SecurityException.class).when(mMockSecurityPolicy)
android11-security-release/services/tests/servicestests/src/com/android/server/accessibility/AccessibilityManagerServiceTest.java:156:        } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/accessibility/AccessibilityManagerServiceTest.java:169:        doThrow(SecurityException.class).when(mMockSecurityPolicy)
android11-security-release/services/tests/servicestests/src/com/android/server/accessibility/AccessibilityManagerServiceTest.java:177:        } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/accessibility/AbstractAccessibilityServiceConnectionTest.java:706:    @Test (expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/accessibility/AbstractAccessibilityServiceConnectionTest.java:707:    public void takeScreenshot_withoutCapability_throwSecurityException() {
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest7.java:84:        assertExpectException(SecurityException.class, "must be shell",
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest7.java:88:        assertExpectException(SecurityException.class, "must be shell",
android11-security-release/services/tests/servicestests/src/com/android/server/pm/BaseShortcutManagerTest.java:460:                throw new SecurityException("Missing permission: " + permission);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/BaseShortcutManagerTest.java:873:                    throw new SecurityException(inv.getArguments()[2] + " for unrelated profile "
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest8.java:1567:            assertExpectException(SecurityException.class, "Calling uid mismatch", request::accept);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:159:            throw new SecurityException("Not matching");
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:219:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:227:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:252:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:279:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:306:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:331:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:356:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:383:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:415:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:440:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:465:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:490:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/CrossProfileAppsServiceImplTest.java:515:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2803:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2805:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2807:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2809:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2811:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2813:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2851:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2853:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2855:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2857:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2859:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2861:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2899:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2901:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2903:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2905:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2907:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2909:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2979:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2981:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2983:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2985:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2987:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:2989:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3028:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3030:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3032:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3034:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3036:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3038:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3078:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3080:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3082:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3084:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3086:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3088:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3105:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3107:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3109:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3112:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3114:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3116:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3172:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3174:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3176:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3178:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3180:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3182:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3221:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3223:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3225:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3227:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3229:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3231:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3271:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3273:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3275:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3277:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3279:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:3281:                    SecurityException.class);
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6627:                    SecurityException.class, "", () -> {
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6706:                    SecurityException.class, "unrelated profile", () -> {
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6722:                    SecurityException.class, "unrelated profile", () -> {
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6727:                    SecurityException.class, "unrelated profile", () -> {
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6761:        assertExpectException(SecurityException.class, "Missing permission", () ->
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6772:        assertExpectException(SecurityException.class, "Missing permission", () ->
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6781:        assertExpectException(SecurityException.class, "Missing permission", () ->
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest1.java:6795:        assertExpectException(SecurityException.class, "Missing permission", () ->
android11-security-release/services/tests/servicestests/src/com/android/server/pm/permission/PermissionManagerServiceTest.java:88:        // of any other UIDs should result in a SecurityException.
android11-security-release/services/tests/servicestests/src/com/android/server/pm/permission/PermissionManagerServiceTest.java:91:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/permission/PermissionManagerServiceTest.java:100:        // SecurityException.
android11-security-release/services/tests/servicestests/src/com/android/server/pm/permission/PermissionManagerServiceTest.java:103:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest10.java:137:            assertExpectException(SecurityException.class, "Calling uid mismatch",
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest10.java:146:            assertExpectException(SecurityException.class, "Calling uid mismatch",
android11-security-release/services/tests/servicestests/src/com/android/server/pm/ShortcutManagerTest10.java:179:            assertExpectException(SecurityException.class, null, () ->
android11-security-release/services/tests/servicestests/src/com/android/server/pm/UserManagerTest.java:598:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/pm/UserManagerTest.java:607:        assertThrows(SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayManagerServiceImplTestsBase.java:376:        public void enforcePermission(String permission, String message) throws SecurityException {
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayActorEnforcerTests.kt:47:    @Test(expected = SecurityException::class)
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayActorEnforcerTests.kt:57:    @Test(expected = SecurityException::class)
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayActorEnforcerTests.kt:67:    @Test(expected = SecurityException::class)
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayActorEnforcerTests.kt:72:    @Test(expected = SecurityException::class)
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayActorEnforcerTests.kt:80:    @Test(expected = SecurityException::class)
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayActorEnforcerTests.kt:95:    @Test(expected = SecurityException::class)
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayActorEnforcerTests.kt:104:    @Test(expected = SecurityException::class)
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayActorEnforcerTests.kt:124:    @Test(expected = SecurityException::class)
android11-security-release/services/tests/servicestests/src/com/android/server/om/OverlayActorEnforcerTests.kt:194:                throw SecurityException()
android11-security-release/services/tests/servicestests/src/com/android/server/timedetector/TimeDetectorServiceTest.java:82:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/timedetector/TimeDetectorServiceTest.java:84:        doThrow(new SecurityException("Mock"))
android11-security-release/services/tests/servicestests/src/com/android/server/timedetector/TimeDetectorServiceTest.java:114:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/timedetector/TimeDetectorServiceTest.java:116:        doThrow(new SecurityException("Mock"))
android11-security-release/services/tests/servicestests/src/com/android/server/timedetector/TimeDetectorServiceTest.java:146:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/servicestests/src/com/android/server/timedetector/TimeDetectorServiceTest.java:148:        doThrow(new SecurityException("Mock"))
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:80:    public void hasBackupPassword_throwsSecurityExceptionIfLacksPermission() {
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:84:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:135:    public void backupPasswordMatches_throwsSecurityExceptionIfLacksPermission() {
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:139:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:170:    public void setBackupPassword_throwsSecurityExceptionIfLacksPermission() {
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:174:                SecurityException.class,
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupPasswordManagerTest.java:189:        doThrow(new SecurityException()).when(mContext)
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupManagerServiceTest.java:303:        } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupManagerServiceTest.java:335:        } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupManagerServiceTest.java:341:        doThrow(new SecurityException())
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupManagerServiceTest.java:348:        } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupManagerServiceTest.java:354:        doThrow(new SecurityException())
android11-security-release/services/tests/servicestests/src/com/android/server/backup/BackupManagerServiceTest.java:362:        } catch (SecurityException expected) {
android11-security-release/services/tests/servicestests/src/com/android/server/DynamicSystemServiceTest.java:40:            fail("DynamicSystemService did not throw SecurityException as expected");
android11-security-release/services/tests/servicestests/src/com/android/server/DynamicSystemServiceTest.java:41:        } catch (SecurityException e) {
android11-security-release/services/tests/wmtests/src/com/android/server/wm/WindowManagerServiceTests.java:107:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/wmtests/src/com/android/server/wm/LockTaskControllerTest.java:312:    @Test(expected = SecurityException.class)
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1113:        doTestRecentTasksApis(false /* expectNoSecurityException */);
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1116:        testGetTasksApis(false /* expectNoSecurityException */);
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1125:        doTestRecentTasksApis(true /* expectNoSecurityException */);
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1126:        testGetTasksApis(true /* expectNoSecurityException */);
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1130:        assertSecurityException(expectCallable, () -> mService.removeStack(INVALID_STACK_ID));
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1131:        assertSecurityException(expectCallable,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1134:        assertSecurityException(expectCallable,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1137:        assertSecurityException(expectCallable, () -> mService.removeTask(0));
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1138:        assertSecurityException(expectCallable,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1140:        assertSecurityException(expectCallable,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1142:        assertSecurityException(expectCallable,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1144:        assertSecurityException(expectCallable,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1146:        assertSecurityException(expectCallable, () -> mService.getAllStackInfos());
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1147:        assertSecurityException(expectCallable,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1149:        assertSecurityException(expectCallable, () -> {
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1156:        assertSecurityException(expectCallable,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1158:        assertSecurityException(expectCallable, () -> mService.getTaskSnapshot(0, true));
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1159:        assertSecurityException(expectCallable, () -> mService.registerTaskStackListener(null));
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1160:        assertSecurityException(expectCallable,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1162:        assertSecurityException(expectCallable, () -> mService.getTaskDescription(0));
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1163:        assertSecurityException(expectCallable, () -> mService.cancelTaskWindowTransition(0));
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1164:        assertSecurityException(expectCallable, () -> mService.startRecentsActivity(null, null,
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1166:        assertSecurityException(expectCallable, () -> mService.cancelRecentsAnimation(true));
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1167:        assertSecurityException(expectCallable, () -> mService.stopAppSwitches());
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1168:        assertSecurityException(expectCallable, () -> mService.resumeAppSwitches());
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1240:    private void assertSecurityException(boolean expectCallable, Runnable runnable) {
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1241:        boolean noSecurityException = true;
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1244:        } catch (SecurityException se) {
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1245:            noSecurityException = false;
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1247:            // We only care about SecurityExceptions, fall through here.
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1249:        if (noSecurityException != expectCallable) {
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1251:                    + noSecurityException);
android11-security-release/services/tests/wmtests/src/com/android/server/wm/RecentTasksTest.java:1354:                        throw new SecurityException();
android11-security-release/services/tests/PackageManagerComponentOverrideTests/src/com/android/server/pm/test/override/PackageManagerComponentLabelIconOverrideTest.kt:99:                Params(INVALID_PKG, AppType.SYSTEM_APP, SecurityException::class.java)
android11-security-release/services/tests/PackageManagerComponentOverrideTests/src/com/android/server/pm/test/override/PackageManagerComponentLabelIconOverrideTest.kt:121:                                result = Result.Exception(SecurityException::class.java))
android11-security-release/services/robotests/src/com/android/server/pm/CrossProfileAppsServiceImplRoboTest.java:245:    public void setInteractAcrossProfilesAppOp_noPermissions_throwsSecurityException() {
android11-security-release/services/robotests/src/com/android/server/pm/CrossProfileAppsServiceImplRoboTest.java:256:        } catch (SecurityException expected) {}
android11-security-release/services/robotests/src/com/android/server/pm/CrossProfileAppsServiceImplRoboTest.java:260:    public void setInteractAcrossProfilesAppOp_missingInteractAcrossUsersAndFull_throwsSecurityException() {
android11-security-release/services/robotests/src/com/android/server/pm/CrossProfileAppsServiceImplRoboTest.java:269:        } catch (SecurityException expected) {}
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:644:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:648:    public void testSetBackupEnabled_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:654:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:659:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:805:     * SecurityException} if the caller does not have INTERACT_ACROSS_USERS_FULL permission.
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:808:    public void testBackupNow_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:813:        expectThrows(SecurityException.class, () -> backupManagerService.backupNow(mUserTwoId));
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:817:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:858:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:862:    public void testRequestBackup_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:871:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:878:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:929:     * SecurityException} if the caller does not have INTERACT_ACROSS_USERS_FULL permission.
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:932:    public void testCancelBackups_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:937:        expectThrows(SecurityException.class, () -> backupManagerService.cancelBackups(mUserTwoId));
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:941:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1176:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1180:    public void testAdbBackup_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1187:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1204:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1314:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1318:    public void testAdbRestore_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1325:                SecurityException.class, () -> backupManagerService.adbRestore(mUserTwoId, null));
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1329:     * Test that the backup service does not throw a {@link SecurityException} if the caller has
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1495:     * Test that the backup services throws a {@link SecurityException} if the caller does not have
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1499:    public void testGetServiceForUser_withoutPermission_throwsSecurityExceptionForNonCallingUser() {
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1505:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1512:     * Test that the backup services does not throw a {@link SecurityException} if the caller has
android11-security-release/services/robotests/backup/src/com/android/server/backup/BackupManagerServiceRoboTest.java:1527:     * Test that the backup services does not throw a {@link SecurityException} if the caller does
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:200:     * {@link SecurityException} if the caller does not have backup permission.
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:210:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:251:     * {@link SecurityException} if the caller does not have backup permission.
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:262:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:307:     * throws a {@link SecurityException} if the caller does not have backup permission.
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:317:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:365:     * {@link SecurityException} if the caller does not have backup permission.
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:374:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:447:     * ISelectBackupTransportCallback)} throws a {@link SecurityException} if the caller does not
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:458:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:518:     * {@link SecurityException} if the caller does not have backup permission.
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:525:        expectThrows(SecurityException.class, backupManagerService::getCurrentTransportComponent);
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:530:     * throws a {@link SecurityException} if the caller does not have backup permission.
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:538:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:602:     * ComponentName, String, Intent, String, Intent, String)} throws a {@link SecurityException} if
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:613:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:773:     * ComponentName, String, Intent, String, Intent, String)} throws a {@link SecurityException} if
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:777:    public void testUpdateTransportAttributes_whenPermissionDenied_throwsSecurityException()
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:784:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:815:     * int)} throws a {@link SecurityException} if the caller does not have backup permission.
android11-security-release/services/robotests/backup/src/com/android/server/backup/UserBackupManagerServiceTest.java:823:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/restore/ActiveRestoreSessionTest.java:162:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/restore/ActiveRestoreSessionTest.java:519:                SecurityException.class,
android11-security-release/services/robotests/backup/src/com/android/server/backup/keyvalue/KeyValueBackupTaskTest.java:782:    public void testRunTask_whenBindToAgentThrowsSecurityException() throws Exception {
android11-security-release/services/robotests/backup/src/com/android/server/backup/keyvalue/KeyValueBackupTaskTest.java:785:        doThrow(SecurityException.class)
android11-security-release/services/robotests/backup/src/com/android/server/backup/keyvalue/KeyValueBackupTaskTest.java:799:    public void testRunTask_whenNonIncrementalAndBindToAgentThrowsSecurityException()
android11-security-release/services/robotests/backup/src/com/android/server/backup/keyvalue/KeyValueBackupTaskTest.java:803:        doThrow(SecurityException.class)
android11-security-release/services/restrictions/java/com/android/server/restrictions/RestrictionsManagerService.java:170:                        throw new SecurityException("No restrictions provider registered for user");
android11-security-release/services/restrictions/java/com/android/server/restrictions/RestrictionsManagerService.java:193:                        throw new SecurityException(message + callingUid);
android11-security-release/services/art-profile:13637:PLcom/android/server/contentcapture/ContentCaptureManagerService;->throwsSecurityException(Lcom/android/internal/os/IResultReceiver;Ljava/lang/Runnable;)Z
android11-security-release/services/print/java/com/android/server/print/PrintManagerService.java:346:                    throw new SecurityException("Only system and print spooler can call this");
android11-security-release/services/print/java/com/android/server/print/PrintManagerService.java:739:                throw new SecurityException("Can only be called by uid " + SHELL_UID
android11-security-release/services/print/java/com/android/server/print/PrintManagerService.java:759:                throw new SecurityException("Can only be called by uid " + SHELL_UID
android11-security-release/services/print/java/com/android/server/print/PrintManagerService.java:1053:                throw new SecurityException("Call from app " + callingAppId + " as app "
android11-security-release/services/backup/java/com/android/server/backup/UserBackupManagerService.java:3391:     * {@link SecurityException} will be thrown.
android11-security-release/services/backup/java/com/android/server/backup/UserBackupManagerService.java:3408:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android11-security-release/services/backup/java/com/android/server/backup/UserBackupManagerService.java:3453:                throw new SecurityException("Only the transport can change its description");
android11-security-release/services/backup/java/com/android/server/backup/UserBackupManagerService.java:3456:            throw new SecurityException("Transport package not found", e);
android11-security-release/services/backup/java/com/android/server/backup/BackupManagerService.java:414:    private void enforcePermissionsOnUser(int userId) throws SecurityException {
android11-security-release/services/backup/java/com/android/server/backup/BackupManagerService.java:422:                throw new SecurityException("No permission to configure backup activity");
android11-security-release/services/backup/java/com/android/server/backup/BackupManagerService.java:1032:     * {@link SecurityException} will be thrown.
android11-security-release/services/backup/java/com/android/server/backup/BackupManagerService.java:1048:     * @throws SecurityException If the UID of the calling process differs from the package UID of
android11-security-release/services/backup/java/com/android/server/backup/BackupManagerService.java:1557:     * @throws SecurityException if {@code userId} is different from the calling user id and the
android11-security-release/services/backup/java/com/android/server/backup/KeyValueAdbBackupEngine.java:150:        } catch (SecurityException e) {
android11-security-release/services/backup/java/com/android/server/backup/BackupPasswordManager.java:81:     * @throws SecurityException If caller does not have {@link android.Manifest.permission#BACKUP}
android11-security-release/services/backup/java/com/android/server/backup/BackupPasswordManager.java:93:     * @throws SecurityException If caller does not have {@link android.Manifest.permission#BACKUP}
android11-security-release/services/backup/java/com/android/server/backup/BackupPasswordManager.java:107:     * @throws SecurityException If caller does not have {@link android.Manifest.permission#BACKUP}
android11-security-release/services/backup/java/com/android/server/backup/restore/ActiveRestoreSession.java:329:            throw new SecurityException("No permission to restore other packages");
android11-security-release/services/backup/java/com/android/server/backup/keyvalue/KeyValueBackupReporter.java:163:    void onBindAgentError(String packageName, SecurityException e) {
android11-security-release/services/backup/java/com/android/server/backup/keyvalue/KeyValueBackupTask.java:716:        } catch (SecurityException e) {
android11-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCapturePerUserService.java:412:            throw new SecurityException("Could not verify UID for " + packageName);
android11-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCapturePerUserService.java:421:            throw new SecurityException("Invalid package: " + packageName);
android11-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:507:            throw new SecurityException("caller is not user's ContentCapture service");
android11-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:548:     * Executes the given {@code runnable} and if it throws a {@link SecurityException},
android11-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:553:    private boolean throwsSecurityException(@NonNull IResultReceiver result,
android11-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:558:        } catch (SecurityException e) {
android11-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:700:                if (throwsSecurityException(result,
android11-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:717:            if (throwsSecurityException(result, () -> enforceCallingPermissionForManagement())) {
android11-security-release/services/contentcapture/java/com/android/server/contentcapture/ContentCaptureManagerService.java:738:            if (throwsSecurityException(result, () -> assertCalledByPackageOwner(packageName))) {
android11-security-release/services/appprediction/java/com/android/server/appprediction/AppPredictionManagerService.java:188:                throw new SecurityException(msg);
android11-security-release/services/net/java/android/net/ConnectivityModuleConnector.java:172:                throw new SecurityException(
android11-security-release/services/net/java/android/net/ConnectivityModuleConnector.java:179:                throw new SecurityException("Invalid network stack UID: " + uid);
android11-security-release/services/net/java/android/net/ConnectivityModuleConnector.java:291:            throw new SecurityException(
android11-security-release/services/net/java/android/net/NetworkStackClient.java:107:                throw new SecurityException(
android11-security-release/graphics/java/android/graphics/pdf/PdfEditor.java:63:     * @throws java.lang.SecurityException If the file requires a password or
android11-security-release/graphics/java/android/graphics/pdf/PdfRenderer.java:153:     * @throws java.lang.SecurityException If the file requires a password or
android11-security-release/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java:138:            throw new SecurityException(
android11-security-release/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java:145:            @Nullable String featureId, IBinder callerToken) throws SecurityException {
android11-security-release/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java:152:            @Nullable String featureId, IBinder callerToken) throws SecurityException {
android11-security-release/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java:597:        throw new SecurityException("The app is not given any access to the document under path " +
android11-security-release/packages/services/PacProcessor/src/com/android/pacprocessor/PacService.java:87:                throw new SecurityException();
android11-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:2065:            throw new SecurityException("Permission denial: writing to settings requires:"
android11-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:2290:                    throw new SecurityException("Only system, shell/root on a "
android11-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:2297:                    throw new SecurityException("Only system, shell/root on a "
android11-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:2304:                    throw new SecurityException("Only system, shell/root on a "
android11-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:3499:                        } catch (SecurityException e) {
android11-security-release/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java:4589:                        } catch (SecurityException | IllegalStateException | RemoteException e) {
android11-security-release/packages/PackageInstaller/src/com/android/packageinstaller/InstallSuccess.java:103:                    } catch (ActivityNotFoundException | SecurityException e) {
android11-security-release/packages/PackageInstaller/src/com/android/packageinstaller/InstallStaging.java:192:            } catch (IOException | SecurityException | IllegalStateException e) {
android11-security-release/packages/PackageInstaller/src/com/android/packageinstaller/InstallInstalling.java:378:            } catch (IOException | SecurityException e) {
android11-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/WearPackageIconProvider.java:141:     * @throws SecurityException if the caller has insufficient permissions.
android11-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/WearPackageIconProvider.java:166:        throw new SecurityException("Permission Denial: reading "
android11-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/PackageInstallerImpl.java:134:                } catch (SecurityException se) {
android11-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/PackageInstallerImpl.java:174:            } catch (SecurityException se) {
android11-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/PackageInstallerImpl.java:187:        } catch (SecurityException se) {
android11-security-release/packages/PackageInstaller/src/com/android/packageinstaller/wear/PackageInstallerImpl.java:227:        } catch (SecurityException se) {
android11-security-release/packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/RemoteInputViewTest.java:88:        // Avoid SecurityException RemoteInputView#sendRemoteInput().
android11-security-release/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogControllerImpl.java:203:        } catch (SecurityException e) {
android11-security-release/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogControllerImpl.java:231:        } catch (SecurityException e) {
android11-security-release/packages/SystemUI/src/com/android/systemui/theme/ThemeOverlayManager.java:181:            } catch (SecurityException | IllegalStateException e) {
android11-security-release/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardService.java:72:            throw new SecurityException("Access denied to process: " + Binder.getCallingPid()
android11-security-release/packages/SystemUI/src/com/android/systemui/qs/external/TileServices.java:162:                throw new SecurityException("Component outside caller's uid");
android11-security-release/packages/SystemUI/src/com/android/systemui/qs/external/TileServices.java:165:            throw new SecurityException(e);
android11-security-release/packages/SystemUI/src/com/android/systemui/qs/external/TileLifecycleManager.java:193:            } catch (SecurityException e) {
android11-security-release/packages/SystemUI/src/com/android/systemui/controls/controller/ControlsProviderLifecycleManager.kt:100:                    } catch (e: SecurityException) {
android11-security-release/packages/SystemUI/src/com/android/systemui/recents/OverviewProxyService.java:735:        } catch (SecurityException e) {
android11-security-release/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/NotificationInlineImageCache.java:90:            } catch (IOException | SecurityException ex) {
android11-security-release/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/NotificationInlineImageResolver.java:148:        } catch (IOException | SecurityException ex) {
android11-security-release/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationModeController.java:214:        } catch (SecurityException | IllegalStateException | RemoteException e) {
android11-security-release/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java:454:                } catch (SecurityException e) {
android11-security-release/packages/SystemUI/src/com/android/systemui/media/RingtonePlayer.java:182:                throw new SecurityException("Async playback only available from system UID.");
android11-security-release/packages/SystemUI/src/com/android/systemui/media/RingtonePlayer.java:194:                throw new SecurityException("Async playback only available from system UID.");
android11-security-release/packages/SystemUI/src/com/android/systemui/media/RingtonePlayer.java:225:                                throw new SecurityException(e);
android11-security-release/packages/SystemUI/src/com/android/systemui/media/RingtonePlayer.java:231:            throw new SecurityException("Uri is not ringtone, alarm, or notification: " + uri);
android11-security-release/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java:153:                    } catch (SecurityException securityException) {
android11-security-release/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java:156:                            // finishes, potentially resulting in a SecurityException here.
android11-security-release/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java:163:                            throw securityException;
android11-security-release/packages/BackupEncryption/test/robolectric/src/com/android/server/backup/encryption/tasks/EncryptedFullBackupDataProcessorTest.java:57:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/test/robolectric/src/com/android/server/backup/encryption/tasks/EncryptedFullBackupDataProcessorTest.java:198:        finishBackupTaskWithException(new GeneralSecurityException());
android11-security-release/packages/BackupEncryption/test/robolectric/src/com/android/server/backup/encryption/tasks/EncryptedFullBackupTaskTest.java:47:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/test/robolectric/src/com/android/server/backup/encryption/tasks/EncryptedFullBackupTaskTest.java:204:                .thenThrow(GeneralSecurityException.class);
android11-security-release/packages/BackupEncryption/test/robolectric/src/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunkerTest.java:36:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/test/robolectric/src/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunkerTest.java:203:                GeneralSecurityException.class,
android11-security-release/packages/BackupEncryption/test/robolectric/src/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunkerTest.java:208:                                    throw new GeneralSecurityException();
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/KvBackupEncrypter.java:33:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/KvBackupEncrypter.java:89:            throws IOException, GeneralSecurityException {
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/EncryptedKvBackupTask.java:41:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/EncryptedKvBackupTask.java:147:            throws GeneralSecurityException, IOException, NoSuchMethodException,
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/EncryptedBackupTask.java:33:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/EncryptedBackupTask.java:100:            throws IOException, GeneralSecurityException {
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/EncryptedBackupTask.java:123:            throws IOException, GeneralSecurityException {
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/EncryptedBackupTask.java:165:            throws IOException, GeneralSecurityException {
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/BackupEncrypter.java:27:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/BackupEncrypter.java:49:     * @throws GeneralSecurityException if there is a problem encrypting the data.
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/BackupEncrypter.java:55:            throws IOException, GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/BackupStreamEncrypter.java:32:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/tasks/BackupStreamEncrypter.java:80:            throws IOException, GeneralSecurityException {
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/chunking/Chunker.java:21:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/chunking/Chunker.java:31:     * @throws GeneralSecurityException if the consumer function throws an error.
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/chunking/Chunker.java:34:            throws IOException, GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/chunking/Chunker.java:42:         * @throws GeneralSecurityException if there is an issue encrypting the chunk.
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/chunking/Chunker.java:44:        void accept(byte[] chunk) throws GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunker.java:25:import java.security.GeneralSecurityException;
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunker.java:76:     * @throws GeneralSecurityException Thrown if the {@link ChunkConsumer} throws it.
android11-security-release/packages/BackupEncryption/src/com/android/server/backup/encryption/chunking/cdc/ContentDefinedChunker.java:80:            throws IOException, GeneralSecurityException {
android11-security-release/packages/SettingsLib/src/com/android/settingslib/bluetooth/BluetoothUtils.java:194:                } catch (SecurityException e) {
android11-security-release/packages/SettingsLib/src/com/android/settingslib/bluetooth/BluetoothUtils.java:209:                } catch (SecurityException e) {
android11-security-release/packages/SettingsLib/src/com/android/settingslib/license/LicenseHtmlGeneratorFromXml.java:137:        } catch (FileNotFoundException | SecurityException e) {
android11-security-release/packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java:419:                throw new SecurityException("No android.permission.TETHER_PRIVILEGED"
android11-security-release/packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java:422:                throw new SecurityException(
android11-security-release/packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java:1313:     *       SecurityException would be thrown.
android11-security-release/packages/PrintSpooler/src/com/android/printspooler/renderer/PdfManipulationService.java:96:                } catch (SecurityException e) {
android11-security-release/packages/PrintSpooler/src/com/android/printspooler/ui/AddPrinterActivity.java:500:                } catch (ActivityNotFoundException|SecurityException e) {
android11-security-release/location/java/android/location/LocationRequest.java:640:     * will throw a SecurityException when requesting location updates if the caller
android11-security-release/location/java/android/location/LocationRequest.java:664:     * will throw a SecurityException when requesting location updates if the caller
android11-security-release/location/java/android/location/LocationManager.java:532:     * {@link SecurityException} if the location permissions were not sufficient to use the
android11-security-release/location/java/android/location/LocationManager.java:550:     * {@link SecurityException} if the location permissions were not sufficient to use the
android11-security-release/location/java/android/location/LocationManager.java:607:     * @throws SecurityException if no suitable location permission is present
android11-security-release/location/java/android/location/LocationManager.java:636:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:682:     * @throws SecurityException        if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:707:     * @throws SecurityException        if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:761:     * @throws SecurityException        if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:791:     * @throws SecurityException        if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:821:     * @throws SecurityException        if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:849:     * @throws SecurityException        if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:922:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:951:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:980:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:1008:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:1038:     * @throws SecurityException        if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:1072:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:1098:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:1128:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:1156:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:1207:     * @throws SecurityException if no suitable permission is present
android11-security-release/location/java/android/location/LocationManager.java:1246:     * @throws SecurityException if permissions are not present
android11-security-release/location/java/android/location/LocationManager.java:1407:                } catch (SecurityException e) {
android11-security-release/location/java/android/location/LocationManager.java:1491:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android11-security-release/location/java/android/location/LocationManager.java:1519:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android11-security-release/location/java/android/location/LocationManager.java:1544:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android11-security-release/location/java/android/location/LocationManager.java:1583:     * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
android11-security-release/location/java/android/location/LocationManager.java:1687:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android11-security-release/location/java/android/location/LocationManager.java:1723:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android11-security-release/location/java/android/location/LocationManager.java:1771:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android11-security-release/location/java/android/location/LocationManager.java:1808:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android11-security-release/location/java/android/location/LocationManager.java:1834:     * @throws SecurityException if {@link android.Manifest.permission#ACCESS_FINE_LOCATION}
android11-security-release/location/java/android/location/LocationManager.java:1945:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:1994:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2013:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2038:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2088:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2106:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2130:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2204:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2228:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2253:     * @throws SecurityException        if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2277:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2317:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2390:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/location/java/android/location/LocationManager.java:2415:     * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
android11-security-release/api/system-current.txt:1910:    method @RequiresPermission(anyOf={"android.permission.INTERACT_ACROSS_USERS", "android.permission.INTERACT_ACROSS_USERS_FULL"}) public void setEnabled(@NonNull String, boolean, @NonNull android.os.UserHandle) throws java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/api/system-current.txt:1911:    method @RequiresPermission(anyOf={"android.permission.INTERACT_ACROSS_USERS", "android.permission.INTERACT_ACROSS_USERS_FULL"}) public void setEnabledExclusiveInCategory(@NonNull String, @NonNull android.os.UserHandle) throws java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/api/system-current.txt:4187:    method @RequiresPermission(android.Manifest.permission.MODIFY_AUDIO_ROUTING) public void addOnPreferredDeviceForStrategyChangedListener(@NonNull java.util.concurrent.Executor, @NonNull android.media.AudioManager.OnPreferredDeviceForStrategyChangedListener) throws java.lang.SecurityException;
android11-security-release/api/system-current.txt:6315:    method @RequiresPermission(anyOf={android.Manifest.permission.SCORE_NETWORKS, android.Manifest.permission.REQUEST_NETWORK_SCORES}) public boolean clearScores() throws java.lang.SecurityException;
android11-security-release/api/system-current.txt:6316:    method @RequiresPermission(anyOf={android.Manifest.permission.SCORE_NETWORKS, android.Manifest.permission.REQUEST_NETWORK_SCORES}) public void disableScoring() throws java.lang.SecurityException;
android11-security-release/api/system-current.txt:6318:    method @RequiresPermission(android.Manifest.permission.REQUEST_NETWORK_SCORES) public void registerNetworkScoreCallback(int, int, @NonNull java.util.concurrent.Executor, @NonNull android.net.NetworkScoreManager.NetworkScoreCallback) throws java.lang.SecurityException;
android11-security-release/api/system-current.txt:6319:    method @RequiresPermission(android.Manifest.permission.REQUEST_NETWORK_SCORES) public boolean requestScores(@NonNull java.util.Collection<android.net.NetworkKey>) throws java.lang.SecurityException;
android11-security-release/api/system-current.txt:6320:    method @RequiresPermission(anyOf={android.Manifest.permission.SCORE_NETWORKS, android.Manifest.permission.REQUEST_NETWORK_SCORES}) public boolean setActiveScorer(String) throws java.lang.SecurityException;
android11-security-release/api/system-current.txt:6321:    method @RequiresPermission(android.Manifest.permission.SCORE_NETWORKS) public boolean updateScores(@NonNull android.net.ScoredNetwork[]) throws java.lang.SecurityException;
android11-security-release/api/system-current.txt:9362:  public class DecryptionFailedException extends java.security.GeneralSecurityException {
android11-security-release/api/system-current.txt:9366:  public class InternalRecoveryServiceException extends java.security.GeneralSecurityException {
android11-security-release/api/system-current.txt:9422:  public class LockScreenRequiredException extends java.security.GeneralSecurityException {
android11-security-release/api/system-current.txt:9457:  public class SessionExpiredException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:4042:    method @Deprecated public java.util.List<android.app.ActivityManager.RecentTaskInfo> getRecentTasks(int, int) throws java.lang.SecurityException;
android11-security-release/api/current.txt:4044:    method public android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName) throws java.lang.SecurityException;
android11-security-release/api/current.txt:4045:    method @Deprecated public java.util.List<android.app.ActivityManager.RunningServiceInfo> getRunningServices(int) throws java.lang.SecurityException;
android11-security-release/api/current.txt:4046:    method @Deprecated public java.util.List<android.app.ActivityManager.RunningTaskInfo> getRunningTasks(int) throws java.lang.SecurityException;
android11-security-release/api/current.txt:4610:  public final class AuthenticationRequiredException extends java.lang.SecurityException implements android.os.Parcelable {
android11-security-release/api/current.txt:6220:  public final class RecoverableSecurityException extends java.lang.SecurityException implements android.os.Parcelable {
android11-security-release/api/current.txt:6221:    ctor public RecoverableSecurityException(@NonNull Throwable, @NonNull CharSequence, @NonNull android.app.RemoteAction);
android11-security-release/api/current.txt:6226:    field @NonNull public static final android.os.Parcelable.Creator<android.app.RecoverableSecurityException> CREATOR;
android11-security-release/api/current.txt:6868:    method @Deprecated @Nullable public String getCertInstallerPackage(@NonNull android.content.ComponentName) throws java.lang.SecurityException;
android11-security-release/api/current.txt:6994:    method @Deprecated public void setCertInstallerPackage(@NonNull android.content.ComponentName, @Nullable String) throws java.lang.SecurityException;
android11-security-release/api/current.txt:7015:    method public void setLockTaskPackages(@NonNull android.content.ComponentName, @NonNull String[]) throws java.lang.SecurityException;
android11-security-release/api/current.txt:7997:    method public android.app.usage.NetworkStats queryDetails(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android11-security-release/api/current.txt:7998:    method public android.app.usage.NetworkStats queryDetailsForUid(int, String, long, long, int) throws java.lang.SecurityException;
android11-security-release/api/current.txt:7999:    method public android.app.usage.NetworkStats queryDetailsForUidTag(int, String, long, long, int, int) throws java.lang.SecurityException;
android11-security-release/api/current.txt:8000:    method public android.app.usage.NetworkStats queryDetailsForUidTagState(int, String, long, long, int, int, int) throws java.lang.SecurityException;
android11-security-release/api/current.txt:8001:    method public android.app.usage.NetworkStats querySummary(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android11-security-release/api/current.txt:8002:    method public android.app.usage.NetworkStats.Bucket querySummaryForDevice(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android11-security-release/api/current.txt:8003:    method public android.app.usage.NetworkStats.Bucket querySummaryForUser(int, String, long, long) throws android.os.RemoteException, java.lang.SecurityException;
android11-security-release/api/current.txt:9487:    method public void onSecurityException(android.accounts.Account, android.os.Bundle, String, android.content.SyncResult);
android11-security-release/api/current.txt:26316:    method public void setDataSource(android.content.Context, android.net.Uri) throws java.lang.IllegalArgumentException, java.lang.SecurityException;
android11-security-release/api/current.txt:26531:    method public void setDataSource(@NonNull android.content.Context, @NonNull android.net.Uri) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/api/current.txt:26533:    method public void setDataSource(@NonNull android.content.Context, @NonNull android.net.Uri, @Nullable java.util.Map<java.lang.String,java.lang.String>) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/api/current.txt:26534:    method public void setDataSource(String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
android11-security-release/api/current.txt:36751:    method public static final void setThreadPriority(int, int) throws java.lang.IllegalArgumentException, java.lang.SecurityException;
android11-security-release/api/current.txt:36752:    method public static final void setThreadPriority(int) throws java.lang.IllegalArgumentException, java.lang.SecurityException;
android11-security-release/api/current.txt:36792:    method public static void verifyPackage(java.io.File, android.os.RecoverySystem.ProgressListener, java.io.File) throws java.security.GeneralSecurityException, java.io.IOException;
android11-security-release/api/current.txt:62581:    ctor protected ObjectInputStream() throws java.io.IOException, java.lang.SecurityException;
android11-security-release/api/current.txt:62583:    method protected boolean enableResolveObject(boolean) throws java.lang.SecurityException;
android11-security-release/api/current.txt:62639:    ctor protected ObjectOutputStream() throws java.io.IOException, java.lang.SecurityException;
android11-security-release/api/current.txt:62644:    method protected boolean enableReplaceObject(boolean) throws java.lang.SecurityException;
android11-security-release/api/current.txt:63713:    method @NonNull public java.lang.reflect.Constructor<T> getConstructor(@Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android11-security-release/api/current.txt:63714:    method @NonNull public java.lang.reflect.Constructor<?>[] getConstructors() throws java.lang.SecurityException;
android11-security-release/api/current.txt:63718:    method @NonNull public java.lang.reflect.Constructor<T> getDeclaredConstructor(@Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android11-security-release/api/current.txt:63719:    method @NonNull public java.lang.reflect.Constructor<?>[] getDeclaredConstructors() throws java.lang.SecurityException;
android11-security-release/api/current.txt:63722:    method @NonNull public java.lang.reflect.Method getDeclaredMethod(@NonNull String, @Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android11-security-release/api/current.txt:63723:    method @NonNull public java.lang.reflect.Method[] getDeclaredMethods() throws java.lang.SecurityException;
android11-security-release/api/current.txt:63730:    method @NonNull public java.lang.reflect.Field[] getFields() throws java.lang.SecurityException;
android11-security-release/api/current.txt:63734:    method @NonNull public java.lang.reflect.Method getMethod(@NonNull String, @Nullable Class<?>...) throws java.lang.NoSuchMethodException, java.lang.SecurityException;
android11-security-release/api/current.txt:63735:    method @NonNull public java.lang.reflect.Method[] getMethods() throws java.lang.SecurityException;
android11-security-release/api/current.txt:64436:  public class SecurityException extends java.lang.RuntimeException {
android11-security-release/api/current.txt:64437:    ctor public SecurityException();
android11-security-release/api/current.txt:64438:    ctor public SecurityException(String);
android11-security-release/api/current.txt:64439:    ctor public SecurityException(String, Throwable);
android11-security-release/api/current.txt:64440:    ctor public SecurityException(Throwable);
android11-security-release/api/current.txt:65292:    method public static void setAccessible(java.lang.reflect.AccessibleObject[], boolean) throws java.lang.SecurityException;
android11-security-release/api/current.txt:65293:    method public void setAccessible(boolean) throws java.lang.SecurityException;
android11-security-release/api/current.txt:68024:  public class AccessControlException extends java.lang.SecurityException {
android11-security-release/api/current.txt:68154:  public class DigestException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68188:  public class GeneralSecurityException extends java.lang.Exception {
android11-security-release/api/current.txt:68189:    ctor public GeneralSecurityException();
android11-security-release/api/current.txt:68190:    ctor public GeneralSecurityException(String);
android11-security-release/api/current.txt:68191:    ctor public GeneralSecurityException(String, Throwable);
android11-security-release/api/current.txt:68192:    ctor public GeneralSecurityException(Throwable);
android11-security-release/api/current.txt:68196:    method public void checkGuard(Object) throws java.lang.SecurityException;
android11-security-release/api/current.txt:68201:    method public Object getObject() throws java.lang.SecurityException;
android11-security-release/api/current.txt:68237:  public class InvalidAlgorithmParameterException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68263:  public class KeyException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68425:  public class KeyStoreException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68488:  public class NoSuchAlgorithmException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68495:  public class NoSuchProviderException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68510:    method public void checkGuard(Object) throws java.lang.SecurityException;
android11-security-release/api/current.txt:68727:  public class SignatureException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68776:  public class UnrecoverableEntryException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68863:  public class CRLException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68916:  public class CertPathBuilderException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:68956:  public class CertPathValidatorException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:69009:  public class CertStoreException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:69050:  public class CertificateException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:69573:  public class InvalidKeySpecException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:69580:  public class InvalidParameterSpecException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:77000:    ctor public FileHandler() throws java.io.IOException, java.lang.SecurityException;
android11-security-release/api/current.txt:77001:    ctor public FileHandler(String) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/api/current.txt:77002:    ctor public FileHandler(String, boolean) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/api/current.txt:77003:    ctor public FileHandler(String, int, int) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/api/current.txt:77004:    ctor public FileHandler(String, int, int, boolean) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/api/current.txt:77021:    method public abstract void close() throws java.lang.SecurityException;
android11-security-release/api/current.txt:77031:    method public void setEncoding(String) throws java.lang.SecurityException, java.io.UnsupportedEncodingException;
android11-security-release/api/current.txt:77033:    method public void setFilter(java.util.logging.Filter) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77034:    method public void setFormatter(java.util.logging.Formatter) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77035:    method public void setLevel(java.util.logging.Level) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77061:    method @Deprecated public void addPropertyChangeListener(java.beans.PropertyChangeListener) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77062:    method public void checkAccess() throws java.lang.SecurityException;
android11-security-release/api/current.txt:77068:    method public void readConfiguration() throws java.io.IOException, java.lang.SecurityException;
android11-security-release/api/current.txt:77069:    method public void readConfiguration(java.io.InputStream) throws java.io.IOException, java.lang.SecurityException;
android11-security-release/api/current.txt:77070:    method @Deprecated public void removePropertyChangeListener(java.beans.PropertyChangeListener) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77071:    method public void reset() throws java.lang.SecurityException;
android11-security-release/api/current.txt:77105:    method public void addHandler(@NonNull java.util.logging.Handler) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77154:    method public void removeHandler(@Nullable java.util.logging.Handler) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77155:    method public void setFilter(@Nullable java.util.logging.Filter) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77156:    method public void setLevel(@Nullable java.util.logging.Level) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77183:    method public void close() throws java.lang.SecurityException;
android11-security-release/api/current.txt:77188:    method public void setPushLevel(java.util.logging.Level) throws java.lang.SecurityException;
android11-security-release/api/current.txt:77204:    method public void close() throws java.lang.SecurityException;
android11-security-release/api/current.txt:77207:    method protected void setOutputStream(java.io.OutputStream) throws java.lang.SecurityException;
android11-security-release/api/current.txt:78125:  public class BadPaddingException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:78243:  public class ExemptionMechanismException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:78258:  public class IllegalBlockSizeException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:78346:  public class NoSuchPaddingException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:78388:  public class ShortBufferException extends java.security.GeneralSecurityException {
android11-security-release/api/current.txt:79953:  public class LoginException extends java.security.GeneralSecurityException {
android11-security-release/api/test-current.txt:134:    method @RequiresPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS) public void removeStacksInWindowingModes(int[]) throws java.lang.SecurityException;
android11-security-release/api/test-current.txt:135:    method @RequiresPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS) public void removeStacksWithActivityTypes(int[]) throws java.lang.SecurityException;
android11-security-release/api/test-current.txt:140:    method @RequiresPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS) public boolean setTaskWindowingMode(int, int, boolean) throws java.lang.SecurityException;
android11-security-release/api/test-current.txt:141:    method @RequiresPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS) public boolean setTaskWindowingModeSplitScreenPrimary(int, int, boolean, boolean, android.graphics.Rect, boolean) throws java.lang.SecurityException;
Binary file android11-security-release/.git/index matches
android11-security-release/proto/src/metrics_constants/metrics_constants.proto:3885:    // Value 2: A SecurityException was thrown
android11-security-release/keystore/java/android/security/keystore/AttestationUtils.java:253:     * @exception SecurityException if you are not permitted to obtain an attestation of the
android11-security-release/keystore/java/android/security/keystore/AndroidKeyStoreCipherSpiBase.java:34:import java.security.GeneralSecurityException;
android11-security-release/keystore/java/android/security/keystore/AndroidKeyStoreCipherSpiBase.java:265:        GeneralSecurityException e = KeyStoreCryptoOperationUtils.getExceptionForCipherInit(
android11-security-release/keystore/java/android/security/keystore/KeyStoreCryptoOperationUtils.java:24:import java.security.GeneralSecurityException;
android11-security-release/keystore/java/android/security/keystore/KeyStoreCryptoOperationUtils.java:74:    public static GeneralSecurityException getExceptionForCipherInit(
android11-security-release/nfc-extras/java/com/android/nfc_extras/NfcAdapterExtras.java:228:     * @throws java.lang.SecurityException if authentication failed
android11-security-release/apex/jobscheduler/service/java/com/android/server/DeviceIdleController.java:2549:                    throw new SecurityException("Calling app " + UserHandle.formatUid(callingUid)
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobSchedulerShellCommand.java:93:            throw new SecurityException("Uid " + uid
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobSchedulerService.java:1107:            // This may throw a SecurityException.
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobSchedulerService.java:1858:            } catch (SecurityException e) {
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobSchedulerService.java:1866:            } catch (SecurityException e) {
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobSchedulerService.java:2612:                    throw new SecurityException("Job has invalid flags");
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobSchedulerService.java:2694:                throw new SecurityException("Caller uid " + callerUid
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobSchedulerService.java:2827:                throw new SecurityException(
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobSchedulerService.java:2856:                throw new SecurityException(
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobServiceContext.java:257:            } catch (SecurityException e) {
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobServiceContext.java:259:                // android:singleUser, can result in a SecurityException being thrown from
android11-security-release/apex/jobscheduler/service/java/com/android/server/job/JobServiceContext.java:502:            throw new SecurityException(sb.toString());
android11-security-release/apex/statsd/service/java/com/android/server/stats/StatsManagerService.java:505:                throw new SecurityException(
android11-security-release/apex/statsd/service/java/com/android/server/stats/StatsCompanion.java:52:            throw new SecurityException("Not allowed to access StatsCompanion");
android11-security-release/apex/statsd/framework/java/android/app/StatsManager.java:154:            } catch (SecurityException e) {
android11-security-release/apex/statsd/framework/java/android/app/StatsManager.java:193:            } catch (SecurityException e) {
android11-security-release/apex/statsd/framework/java/android/app/StatsManager.java:264:            } catch (SecurityException e) {
android11-security-release/apex/statsd/framework/java/android/app/StatsManager.java:316:            } catch (SecurityException e) {
android11-security-release/apex/statsd/framework/java/android/app/StatsManager.java:354:            } catch (SecurityException e) {
android11-security-release/apex/statsd/framework/java/android/app/StatsManager.java:392:            } catch (SecurityException e) {
android11-security-release/apex/statsd/framework/java/android/app/StatsManager.java:432:            } catch (SecurityException e) {
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreSession.java:550:            throw new SecurityException(mOwnerUid + " is not the session owner");
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:382:                throw new SecurityException("Session not found: " + sessionId);
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:420:                throw new SecurityException("Caller not allowed to access " + blobHandle
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:481:                throw new SecurityException("Caller not allowed to access " + blobHandle
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:537:                throw new SecurityException("Caller not allowed to access " + blobHandle
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:643:                throw new SecurityException("Caller not allowed to access " + blobHandle
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:653:            throw new SecurityException("Specified calling package [" + callingPackage
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:1428:                throw new SecurityException("Caller not allowed to create session; "
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:1478:                throw new SecurityException("Caller not allowed to open blob; "
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:1510:                throw new SecurityException("Caller not allowed to open blob; "
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:1535:                throw new SecurityException("Caller not allowed to open blob; "
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:1571:                throw new SecurityException("Only system uid is allowed to call "
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:1589:                throw new SecurityException("Only system uid is allowed to call "
android11-security-release/apex/blobstore/service/java/com/android/server/blob/BlobStoreManagerService.java:1619:                throw new SecurityException("Caller not allowed to open blob; "
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:184:     * @throws SecurityException when the caller is not allowed to create a session, such
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:211:     * @throws SecurityException when the caller does not own the session, or
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:232:     * @throws SecurityException when the caller does not own the session, or
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:255:     * @throws SecurityException when the blob represented by the {@code blobHandle} does not
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:299:     * @throws SecurityException when the blob represented by the {@code blobHandle} does not
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:362:     * @throws SecurityException when the blob represented by the {@code blobHandle} does not
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:418:     * @throws SecurityException when the blob represented by the {@code blobHandle} does not
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:468:     * @throws SecurityException when the blob represented by the {@code blobHandle} does not
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:494:     * @throws SecurityException when the blob represented by the {@code blobHandle} does not
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:595:     * @throws SecurityException when the blob represented by the {@code blobHandle} does not
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:652:         * @throws SecurityException when the caller is not the owner of the session.
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:678:         * @throws SecurityException when the caller is not the owner of the session.
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:700:         * @throws SecurityException when the caller is not the owner of the session.
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:721:         * @throws SecurityException when the caller is not the owner of the session.
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:738:         * @throws SecurityException when the caller is not the owner of the session.
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:765:         * @throws SecurityException when the caller is not the owner of the session.
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:817:         * @throws SecurityException when the caller is not the owner of the session.
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:865:         * @throws SecurityException when the caller is not the owner of the session.
android11-security-release/apex/blobstore/framework/java/android/app/blob/BlobStoreManager.java:921:         * @throws SecurityException when the caller is not the owner of the session.
android11-security-release/config/preloaded-classes:8403:com.android.internal.os.ZygoteSecurityException
android11-security-release/config/preloaded-classes:10215:java.lang.SecurityException
android11-security-release/config/preloaded-classes:10578:java.security.GeneralSecurityException
android11-security-release/config/hiddenapi-greylist-max-o.txt:3784:Landroid/app/AppOpsManager;->buildSecurityExceptionMsg(IILjava/lang/String;)Ljava/lang/String;
android11-security-release/config/hiddenapi-greylist-max-o.txt:8332:Landroid/app/RecoverableSecurityException$LocalDialog;-><init>()V
android11-security-release/config/hiddenapi-greylist-max-o.txt:8333:Landroid/app/RecoverableSecurityException;-><init>(Landroid/os/Parcel;)V
android11-security-release/config/hiddenapi-greylist-max-o.txt:8334:Landroid/app/RecoverableSecurityException;-><init>(Ljava/lang/Throwable;Ljava/lang/CharSequence;Landroid/app/RemoteAction;)V
android11-security-release/config/hiddenapi-greylist-max-o.txt:8335:Landroid/app/RecoverableSecurityException;-><init>(Ljava/lang/Throwable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/app/PendingIntent;)V
android11-security-release/config/hiddenapi-greylist-max-o.txt:8336:Landroid/app/RecoverableSecurityException;->CREATOR:Landroid/os/Parcelable$Creator;
android11-security-release/config/hiddenapi-greylist-max-o.txt:8337:Landroid/app/RecoverableSecurityException;->getUserAction()Landroid/app/RemoteAction;
android11-security-release/config/hiddenapi-greylist-max-o.txt:8338:Landroid/app/RecoverableSecurityException;->getUserMessage()Ljava/lang/CharSequence;
android11-security-release/config/hiddenapi-greylist-max-o.txt:8339:Landroid/app/RecoverableSecurityException;->mUserAction:Landroid/app/RemoteAction;
android11-security-release/config/hiddenapi-greylist-max-o.txt:8340:Landroid/app/RecoverableSecurityException;->mUserMessage:Ljava/lang/CharSequence;
android11-security-release/config/hiddenapi-greylist-max-o.txt:8341:Landroid/app/RecoverableSecurityException;->showAsDialog(Landroid/app/Activity;)V
android11-security-release/config/hiddenapi-greylist-max-o.txt:8342:Landroid/app/RecoverableSecurityException;->showAsNotification(Landroid/content/Context;)V
android11-security-release/config/hiddenapi-greylist-max-o.txt:8343:Landroid/app/RecoverableSecurityException;->showAsNotification(Landroid/content/Context;Ljava/lang/String;)V
android11-security-release/config/hiddenapi-greylist-max-o.txt:8344:Landroid/app/RecoverableSecurityException;->TAG:Ljava/lang/String;
android11-security-release/config/dirty-image-objects:349:java.lang.SecurityException
android11-security-release/config/boot-image-profile.txt:17390:HSPLandroid/security/keystore/KeyStoreCryptoOperationUtils;->getExceptionForCipherInit(Landroid/security/KeyStore;Landroid/security/keystore/AndroidKeyStoreKey;I)Ljava/security/GeneralSecurityException;
android11-security-release/config/boot-image-profile.txt:33063:HSPLjava/lang/SecurityException;-><init>(Ljava/lang/String;)V
android11-security-release/config/boot-image-profile.txt:34435:HSPLjava/security/GeneralSecurityException;-><init>(Ljava/lang/String;)V
android11-security-release/config/boot-image-profile.txt:48833:Lcom/android/internal/os/ZygoteSecurityException;
android11-security-release/config/boot-image-profile.txt:51869:Ljava/lang/SecurityException;
android11-security-release/config/boot-image-profile.txt:52235:Ljava/security/GeneralSecurityException;
android11-security-release/telephony/java/android/telephony/PhoneNumberUtils.java:2259:        } catch (SecurityException ex) {
android11-security-release/telephony/java/android/telephony/VisualVoicemailService.java:273:     * @throws SecurityException if the caller is not the current default dialer
android11-security-release/telephony/java/android/telephony/SmsManager.java:582:        //    an incorrect SecurityException.
android11-security-release/telephony/java/android/telephony/SmsManager.java:691:        //    an incorrect SecurityException.
android11-security-release/telephony/java/android/telephony/SmsManager.java:1011:            //    SEND_SMS, it will throw an incorrect SecurityException.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:1915:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:1968:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:2037:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:2115:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:2153:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:2236:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:2273:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:3879:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:3917:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:4171:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:4210:     *     higher, then a SecurityException is thrown.</li>
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:4900:     * @throws SecurityException if the caller is not the current default dialer
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:5345:     * @throws SecurityException if the caller does not have carrier privileges or is not the
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:5698:     * {@link SecurityException} will be thrown otherwise.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:9708:        } catch (SecurityException e) {
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:9727:        } catch (SecurityException e) {
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:9750:        } catch (SecurityException e) {
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:9770:        } catch (SecurityException e) {
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:9789:        } catch (SecurityException e) {
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:10079:        } catch (SecurityException e) {
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:10430:     *         if not available; or throw a SecurityException if the caller doesn't have the
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:12009:     * or throw a SecurityException if the caller does not have the permission.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:12063:     * or throw a SecurityException if the caller does not have the permission.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:12146:     * network; {@code false} if it is not; or throw an SecurityException if the caller does not
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:12758:     * @throws {@link SecurityException} if the caller is not the system or phone process.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:12788:     * @throws {@link SecurityException} if the caller is not the system or phone process.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:12818:     * @throws {@link SecurityException} if the caller is not the system or phone process.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:13186:     * @throws SecurityException if the caller doesn't have the permission.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:13214:     * @throws SecurityException if the caller doesn't have the permission.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:13271:     * @throws SecurityException if the caller doesn't have the permission.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:13308:     * @throws SecurityException if the caller doesn't have the permission.
android11-security-release/telephony/java/android/telephony/TelephonyManager.java:13341:     * @throws SecurityException if the caller doesn't have the permission.
android11-security-release/telephony/java/android/telephony/mbms/vendor/MbmsGroupCallServiceBase.java:189:     * May throw an {@link IllegalArgumentException} or a {@link SecurityException}, which
android11-security-release/telephony/java/android/telephony/mbms/vendor/MbmsStreamingServiceBase.java:47:     * May throw an {@link IllegalArgumentException} or a {@link SecurityException}, which
android11-security-release/telephony/java/android/telephony/mbms/MbmsTempFileProvider.java:96:            throw new SecurityException("Provider must not be exported");
android11-security-release/telephony/java/android/telephony/mbms/MbmsTempFileProvider.java:99:            throw new SecurityException("Provider must grant uri permissions");
android11-security-release/telephony/java/android/telephony/mbms/MbmsTempFileProvider.java:167:            throw new SecurityException("Resolved path jumped beyond configured root");
android11-security-release/telephony/java/android/telephony/SubscriptionManager.java:2493:     * SecurityException if the caller hasn't got the right permission.
android11-security-release/telephony/java/android/telephony/SubscriptionManager.java:2531:     * @throws SecurityException if the caller doesn't meet the requirements
android11-security-release/telephony/java/android/telephony/SubscriptionManager.java:2558:     * @throws SecurityException if the caller doesn't meet the requirements
android11-security-release/telephony/java/android/telephony/SubscriptionManager.java:2588:     * @throws SecurityException if the caller doesn't meet the requirements
android11-security-release/telephony/java/android/telephony/SubscriptionManager.java:2620:     * @throws SecurityException if the caller doesn't meet the requirements
android11-security-release/telephony/java/android/telephony/SubscriptionManager.java:2859:     * @throws SecurityException if the caller doesn't meet the requirements
android11-security-release/telephony/java/android/telephony/SubscriptionManager.java:2907:     * @throws SecurityException if the caller doesn't meet the requirements
android11-security-release/telephony/java/android/telephony/SubscriptionManager.java:2959:     * @throws SecurityException if the caller doesn't meet the requirements
android11-security-release/telephony/java/android/telephony/SubscriptionManager.java:3007:     * @throws SecurityException if the caller doesn't meet the requirements
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:71:     *   <li>throw SecurityException: if the caller didn't declare any of these permissions, or, for
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:97:    /** Identical to checkCallingOrSelfReadPhoneState but never throws SecurityException */
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:104:        } catch (SecurityException se) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:116:     *   <li>throw SecurityException: if the caller didn't declare any of these permissions, or, for
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:139:        } catch (SecurityException privilegedPhoneStateException) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:143:            } catch (SecurityException phoneStateException) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:179:     * of throwing a SecurityException. Therefore, the callers cannot tell the difference
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:182:     * category expect SecurityExceptions; apps in the latter don't. So this method is suitable for
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:196:        } catch (SecurityException privilegedPhoneStateException) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:200:            } catch (SecurityException phoneStateException) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:222:    *   <li>throw SecurityException: if the caller does not meet any of the requirements and is
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:227:     *       identifiers so false is returned instead of throwing a SecurityException to indicate
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:246:     *   <li>throw SecurityException: if the caller does not meet any of the requirements and is
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:251:     *       to the device identifiers so false is returned instead of throwing a SecurityException
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:269:     *   <li>throw SecurityException: if the caller does not meet any of the requirements and is
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:273:     *       identifiers so false is returned instead of throwing a SecurityException to indicate
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:293:     *   <li>throw SecurityException: if the caller does not meet any of the requirements and is
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:297:     *       identifiers so false is returned instead of throwing a SecurityException to indicate
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:332:     * @throws SecurityException if the caller does not meet any of the requirements for the
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:381:        throw new SecurityException(message + ": The user " + uid
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:450:            } catch (SecurityException readPhoneStateException) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:459:            } catch (SecurityException readPrivilegedPhoneStateException) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:465:                    } catch (SecurityException carrierPrivilegeException) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:484:        } catch (SecurityException readSmsSecurityException) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:494:        } catch (SecurityException readPhoneNumberSecurityException) {
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:497:        throw new SecurityException(message + ": Neither user " + uid
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:507:     * @throws SecurityException if the caller does not have the required permission/privileges
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:524:     * @throws SecurityException if the caller does not have the required permission/privileges
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:544:     * @throws SecurityException if the caller does not have the required permission/privileges
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:566:     * @throws SecurityException if the caller does not have the required permission/privileges
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:591:     * @throws SecurityException if the caller does not have the required privileges
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:607:            throw new SecurityException(message);
android11-security-release/telephony/common/com/android/internal/telephony/TelephonyPermissions.java:650:        throw new SecurityException(message + ": Only shell user can call it");
android11-security-release/telephony/common/com/google/android/mms/util/DrmConvertSession.java:160:                    } catch (SecurityException e) {
android11-security-release/apct-tests/perftests/core/src/android/os/ParcelPerfTest.java:203:            SecurityException e = new SecurityException("TestMessage");
android11-security-release/apct-tests/perftests/core/src/android/os/ParcelPerfTest.java:223:            p.writeException(new SecurityException(msg));
android11-security-release/apct-tests/perftests/core/src/android/os/ParcelPerfTest.java:228:            } catch (SecurityException e) {
android11-security-release/apct-tests/perftests/core/src/android/os/ParcelPerfTest.java:241:                } catch (SecurityException expected) {
android11-security-release/libs/hwui/jni/pdf/PdfUtils.cpp:57:            jniThrowException(env, "java/lang/SecurityException",
android11-security-release/libs/hwui/jni/pdf/PdfUtils.cpp:61:            jniThrowException(env, "java/lang/SecurityException", "unsupported security scheme");
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:78:    public void reportChange_noLogCompatChangePermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:80:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:96:    public void reportChangeByPackageName_noLogCompatChangePermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:98:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:114:    public void reportChangeByUid_noLogCompatChangePermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:116:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:130:    public void isChangeEnabled_noReadCompatConfigPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:132:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:139:    public void isChangeEnabled_noLogCompatChangeConfigPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:141:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:158:    public void isChangeEnabledByPackageName_noReadCompatConfigPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:160:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:167:    public void isChangeEnabledByPackageName_noLogompatConfigPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:169:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:186:    public void isChangeEnabledByUid_noReadCompatConfigPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:188:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:194:    public void isChangeEnabledByUid_noLogCompatChangePermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:196:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:211:    public void setOverrides_noOverridesPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:213:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:236:    public void setOverridesForTest_noOverridesPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:238:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:261:    public void clearOverrides_noOverridesPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:263:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:276:    public void clearOverridesForTest_noOverridesPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:278:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:291:    public void clearOverride_noOverridesPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:293:        thrown.expect(SecurityException.class);
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:306:    public void listAllChanges_noReadCompatConfigPermission_throwsSecurityException()
android11-security-release/tests/PlatformCompatGating/src/com/android/tests/gating/PlatformCompatPermissionsTest.java:308:        thrown.expect(SecurityException.class);
android11-security-release/tests/testables/tests/src/android/testing/TestablePermissionsTest.java:70:    @Test(expected = SecurityException.class)
android11-security-release/tests/testables/tests/src/android/testing/TestablePermissionsTest.java:83:    @Test(expected = SecurityException.class)
android11-security-release/tests/testables/src/android/testing/TestablePermissions.java:71:            throw new SecurityException();
android11-security-release/tests/testables/src/android/testing/TestablePermissions.java:77:            throw new SecurityException();
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:679:        } catch (SecurityException se) {
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:755:            fail("expected SecurityException");
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:756:        } catch (SecurityException e) {
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:762:            fail("expected SecurityException");
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:763:        } catch (SecurityException e) {
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:771:            fail("expected SecurityException");
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:772:        } catch (SecurityException e) {
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:778:            fail("expected SecurityException");
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:779:        } catch (SecurityException e) {
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:785:            fail("expected SecurityException");
android11-security-release/tests/RollbackTest/RollbackTest/src/com/android/tests/rollback/RollbackTest.java:786:        } catch (SecurityException e) {
android11-security-release/tests/UsbManagerTests/src/com/android/server/usbtest/UsbManagerApiTest.java:45:     * Verify NO SecurityException
android11-security-release/tests/UsbManagerTests/src/com/android/server/usbtest/UsbManagerApiTest.java:49:    public void testUsbApi_GetCurrentFunctionsSys_shouldNoSecurityException() throws Exception {
android11-security-release/tests/UsbManagerTests/src/com/android/server/usbtest/UsbManagerApiTest.java:54:     * Verify NO SecurityException
android11-security-release/tests/UsbManagerTests/src/com/android/server/usbtest/UsbManagerApiTest.java:58:    public void testUsbApi_SetCurrentFunctionsSys_shouldNoSecurityException() throws Exception {
android11-security-release/tests/UsbManagerTests/src/com/android/server/usbtest/UsbManagerApiTest.java:63:     * Verify NO SecurityException
android11-security-release/tests/UsbManagerTests/src/com/android/server/usbtest/UsbManagerApiTest.java:67:    public void testUsbApi_GetCurrentFunctions_shouldNoSecurityException() throws Exception {
android11-security-release/tests/UsbManagerTests/src/com/android/server/usbtest/UsbManagerApiTest.java:72:     * Verify NO SecurityException
android11-security-release/tests/UsbManagerTests/src/com/android/server/usbtest/UsbManagerApiTest.java:76:    public void testUsbApi_SetCurrentFunctions_shouldNoSecurityException() throws Exception {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:44:            fail("IActivityManager.moveTaskToFront did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:46:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:57:            fail("IActivityManager.updateConfiguration did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:59:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:70:            fail("IActivityManager.setDebugApp did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:72:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:83:            fail("IActivityManager.setProcessLimit did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:85:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:96:            fail("IActivityManager.setAlwaysFinish did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:98:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:109:            fail("IActivityManager.signalPersistentProcesses did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:111:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:122:            fail("IActivityManager.unhandledBack did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:124:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:135:            fail("IActivityManager.setActivityController did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:137:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:148:            fail("IActivityManager.shutdown did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:150:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:161:            fail("IActivityManager.stopAppSwitches did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:163:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:171:            fail("IActivityManager.resumeAppSwitches did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/ActivityManagerPermissionTests.java:173:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:61:                    "did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:62:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:83:                   "did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:84:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:98:                    " did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:99:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:113:                    "did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:114:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:128:                   "did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/PmPermissionsTests.java:129:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:49:            fail("SmsManager.sendTextMessage did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:50:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:65:            fail("SmsManager.sendDataMessage did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:66:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:84:            fail("SmsManager.sendMultipartTextMessage did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:85:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:99:            fail("SmsManager.sendDataMessage did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:100:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:114:            fail("SmsManager.sendDataMessage did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/SmsManagerPermissionTest.java:115:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/VibratorServicePermissionTest.java:60:            fail("vibrate did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/VibratorServicePermissionTest.java:61:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/VibratorServicePermissionTest.java:75:            fail("cancelVibrate did not throw SecurityException as expected");
android11-security-release/tests/permission/src/com/android/framework/permission/tests/VibratorServicePermissionTest.java:76:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:50:            fail("IWindowManager.setEventDispatching did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:52:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:60:            fail("IWindowManager.addWindowToken did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:62:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:70:            fail("IWindowManager.prepareAppTransition did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:72:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:80:            fail("IWindowManager.executeAppTransition did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:82:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:94:            fail("IWindowManager.disableKeyguard did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:96:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:104:            fail("IWindowManager.reenableKeyguard did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:106:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:114:            fail("IWindowManager.exitKeyguardSecurely did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:116:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:127:            fail("IWindowManager.setAnimationScale did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:129:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:137:            fail("IWindowManager.setAnimationScales did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:139:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:150:            fail("IWindowManager.updateRotation did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:152:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:160:            fail("IWindowManager.freezeRotation did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:162:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:170:            fail("IWindowManager.thawRotation did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:172:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:181:        // Verify if addWindowTokenWithOptions throw SecurityException for privileged window type.
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:184:            fail("IWindowManager.addWindowTokenWithOptions did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:186:        } catch (SecurityException e) {
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:192:        // Verify if addWindowTokenWithOptions throw SecurityException for null packageName.
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:195:            fail("IWindowManager.addWindowTokenWithOptions did not throw SecurityException as"
android11-security-release/tests/permission/src/com/android/framework/permission/tests/WindowManagerPermissionTests.java:197:        } catch (SecurityException e) {
android11-security-release/tests/BlobStoreTestUtils/src/com/android/utils/blob/Utils.java:139:        } catch (SecurityException e) {
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:45:     * Verify SecurityException resulting from required permissions missing
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:48:    @Test(expected = SecurityException.class)
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:49:    public void testUsbApi_GetCurrentFunctionsSys_OnSecurityException() throws Exception {
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:54:     * Verify SecurityException resulting from required permissions missing
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:57:    @Test(expected = SecurityException.class)
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:58:    public void testUsbApi_SetCurrentFunctionsSys_OnSecurityException() throws Exception {
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:63:     * Verify SecurityException resulting from required permissions missing
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:66:    @Test(expected = SecurityException.class)
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:68:    public void testUsbApi_GetCurrentFunctions_OnSecurityException() throws Exception {
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:73:     * Verify SecurityException resulting from required permissions missing
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:76:    @Test(expected = SecurityException.class)
android11-security-release/tests/UsbTests/src/com/android/server/usb/UsbManagerNoPermTest.java:78:    public void testUsbApi_SetCurrentFunctions_OnSecurityException() throws Exception {
android11-security-release/tests/net/java/com/android/server/IpSecServiceParameterizedTest.java:134:            throw new SecurityException("Unavailable permission requested");
android11-security-release/tests/net/java/com/android/server/IpSecServiceParameterizedTest.java:820:            fail("Expected a SecurityException for badPackage.");
android11-security-release/tests/net/java/com/android/server/IpSecServiceParameterizedTest.java:821:        } catch (SecurityException expected) {
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:494:                throw new SecurityException("[Test] permission denied: " + permission);
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3180:    public void testNetworkRequestUidSpoofSecurityException() throws Exception {
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3185:        doThrow(new SecurityException()).when(mAppOpsManager).checkPackage(anyInt(), anyString());
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3186:        assertThrows(SecurityException.class, () -> {
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3199:        // permission should get SecurityException.
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3200:        assertThrows(SecurityException.class, () ->
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:3203:        assertThrows(SecurityException.class, () ->
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:7080:        assertThrows(SecurityException.class, () -> mService.startVpnProfile(notMyVpnPkg));
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:7086:        assertThrows(SecurityException.class, () -> mService.stopVpnProfile(notMyVpnPkg));
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:7279:            fail("Expected SecurityException for non-VpnService app");
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:7280:        } catch (SecurityException expected) {
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:7291:            fail("Expected SecurityException for non-VpnService app");
android11-security-release/tests/net/java/com/android/server/ConnectivityServiceTest.java:7292:        } catch (SecurityException expected) {
android11-security-release/tests/net/java/com/android/server/connectivity/VpnTest.java:796:            fail("Expected SecurityException due to restricted user");
android11-security-release/tests/net/java/com/android/server/connectivity/VpnTest.java:797:        } catch (SecurityException expected) {
android11-security-release/tests/net/java/com/android/server/connectivity/VpnTest.java:819:            fail("Expected SecurityException due to restricted user");
android11-security-release/tests/net/java/com/android/server/connectivity/VpnTest.java:820:        } catch (SecurityException expected) {
android11-security-release/tests/net/java/com/android/server/connectivity/VpnTest.java:873:        } catch (SecurityException expected) {
android11-security-release/tests/net/java/com/android/server/connectivity/VpnTest.java:916:            fail("Expected SecurityException due to restricted user");
android11-security-release/tests/net/java/com/android/server/connectivity/VpnTest.java:917:        } catch (SecurityException expected) {
android11-security-release/tests/net/java/com/android/server/connectivity/VpnTest.java:929:            fail("Expected SecurityException due to restricted user");
android11-security-release/tests/net/java/com/android/server/connectivity/VpnTest.java:930:        } catch (SecurityException expected) {
android11-security-release/tests/net/java/com/android/server/net/NetworkStatsCollectionTest.java:257:            fail("Should have thrown SecurityException for accessing different UID");
android11-security-release/tests/net/java/com/android/server/net/NetworkStatsCollectionTest.java:258:        } catch (SecurityException e) {
android11-security-release/tests/net/common/java/android/net/NetworkStackTest.java:79:        } catch (SecurityException e) {
android11-security-release/tests/net/common/java/android/net/NetworkStackTest.java:80:            // Expect to get a SecurityException
android11-security-release/startop/iorap/tests/src/com/google/android/startop/iorap/IIorapIntegrationTest.kt:30:@FlakyTest(bugId = 149098310) // Failing on cuttlefish with SecurityException.
android11-security-release/test-runner/src/android/test/InstrumentationTestRunner.java:629:        } catch (SecurityException e) {
android11-security-release/telecomm/java/android/telecom/CallerInfo.java:552:        } catch (SecurityException se) {
android11-security-release/telecomm/java/android/telecom/TelecomManager.java:1164:     * A {@link SecurityException} will be thrown if a called is not the default dialer, or lacks
android11-security-release/telecomm/java/android/telecom/TelecomManager.java:1308:     * A {@link SecurityException} will be thrown if an app tries to register a
android11-security-release/telecomm/java/android/telecom/TelecomManager.java:1836:     * For a managed {@link ConnectionService}, a {@link SecurityException} will be thrown if either
android11-security-release/telecomm/java/android/telecom/TelecomManager.java:1840:     * For a self-managed {@link ConnectionService}, a {@link SecurityException} will be thrown if
android11-security-release/telecomm/java/android/telecom/TelecomManager.java:1884:     * For a managed {@link ConnectionService}, a {@link SecurityException} will be thrown if either
android11-security-release/telecomm/java/android/telecom/TelecomManager.java:2339:     * For a managed {@link ConnectionService}, a {@link SecurityException} will be thrown if either
android11-security-release/telecomm/java/android/telecom/TelecomManager.java:2344:     * For a self-managed {@link ConnectionService}, a {@link SecurityException} will be thrown if
android11-security-release/media/jni/android_media_MediaPlayer.cpp:205:            jniThrowException(env, "java/lang/SecurityException", NULL);
android11-security-release/media/java/android/media/Ringtone.java:262:                } catch (SecurityException e) {
android11-security-release/media/java/android/media/Ringtone.java:342:        } catch (SecurityException | IOException e) {
android11-security-release/media/java/android/media/MediaExtractor.java:136:        } catch (SecurityException ex) {
android11-security-release/media/java/android/media/tv/tuner/Tuner.java:527:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/media/java/android/media/tv/tuner/Tuner.java:539:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/media/java/android/media/tv/tuner/Tuner.java:568:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/media/java/android/media/tv/tuner/Tuner.java:606:     * @throws SecurityException     if the caller does not have appropriate permissions.
android11-security-release/media/java/android/media/tv/tuner/Tuner.java:640:     * @throws SecurityException if the caller does not have appropriate permissions.
android11-security-release/media/java/android/media/tv/TvContract.java:280:     * provider will be cleared. Once a package is blocked, {@link SecurityException} will be thrown
android11-security-release/media/java/android/media/tv/TvContract.java:299:     * the content provider will be cleared. Once a package is blocked, {@link SecurityException}
android11-security-release/media/java/android/media/tv/TvContract.java:325:     * the content provider will be cleared. Once a package is blocked, {@link SecurityException}
android11-security-release/media/java/android/media/MediaMetadataRetriever.java:321:     * @throws SecurityException if the Uri cannot be used due to lack of
android11-security-release/media/java/android/media/MediaMetadataRetriever.java:325:        throws IllegalArgumentException, SecurityException {
android11-security-release/media/java/android/media/MediaMetadataRetriever.java:360:        } catch (SecurityException ex) {
android11-security-release/media/java/android/media/voice/KeyphraseModelManager.java:78:     * @throws SecurityException Thrown when caller does not have MANAGE_VOICE_KEYPHRASES permission
android11-security-release/media/java/android/media/voice/KeyphraseModelManager.java:109:     * @throws SecurityException Thrown when caller does not have MANAGE_VOICE_KEYPHRASES permission
android11-security-release/media/java/android/media/voice/KeyphraseModelManager.java:141:     * @throws SecurityException Thrown when caller does not have MANAGE_VOICE_KEYPHRASES permission
android11-security-release/media/java/android/media/RingtoneManager.java:941:        } catch (SecurityException | IOException e) {
android11-security-release/media/java/android/media/midi/MidiDeviceServer.java:190:                    throw new SecurityException("Can't access private device from different UID");
android11-security-release/media/java/android/media/midi/MidiDeviceServer.java:228:                    throw new SecurityException("Can't access private device from different UID");
android11-security-release/media/java/android/media/midi/MidiDeviceServer.java:325:                throw new SecurityException("setDeviceInfo should only be called by MidiService");
android11-security-release/media/java/android/media/AudioManager.java:847:     * @throws SecurityException if the adjustment triggers a Do Not Disturb change
android11-security-release/media/java/android/media/AudioManager.java:1170:     * @throws SecurityException if the volume change triggers a Do Not Disturb change
android11-security-release/media/java/android/media/AudioManager.java:1685:     * @throws SecurityException if the caller doesn't hold the required permission
android11-security-release/media/java/android/media/AudioManager.java:1692:            throws SecurityException {
android11-security-release/media/java/android/media/AudioRecordingConfiguration.java:234:     * @throws SecurityException Thrown if the caller is missing the MODIFY_AUDIO_ROUTING permission
android11-security-release/media/java/android/media/AudioRecordingConfiguration.java:242:            throw new SecurityException("MODIFY_AUDIO_ROUTING permission is missing");
android11-security-release/media/java/android/media/MediaPlayer.java:923:        } catch (SecurityException ex) {
android11-security-release/media/java/android/media/MediaPlayer.java:988:        } catch (SecurityException ex) {
android11-security-release/media/java/android/media/MediaPlayer.java:1003:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android11-security-release/media/java/android/media/MediaPlayer.java:1099:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android11-security-release/media/java/android/media/MediaPlayer.java:1107:        } catch (NullPointerException | SecurityException | IOException ex) {
android11-security-release/media/java/android/media/MediaPlayer.java:1126:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android11-security-release/media/java/android/media/MediaPlayer.java:1140:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android11-security-release/media/java/android/media/MediaPlayer.java:1146:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException
android11-security-release/media/java/android/media/MediaPlayer.java:1168:            throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
android11-security-release/media/java/android/media/MediaPlayer.java:1191:        throws IOException, IllegalArgumentException, SecurityException, IllegalStateException;
android11-security-release/media/java/android/media/MediaPlayer.java:2904:        } catch (SecurityException ex) {
android11-security-release/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/CameraTestHelper.java:141:        } catch (SecurityException e) {
android11-security-release/media/tests/EffectsTest/src/com/android/effectstest/SimplePlayer.java:134:                  } catch (SecurityException ex) {
